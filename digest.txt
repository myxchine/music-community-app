Directory structure:
└── music-platform/
    ├── README.md
    ├── drizzle.config.ts
    ├── next-env.d.ts
    ├── next.config.ts
    ├── package.json
    ├── pnpm-lock.yaml
    ├── postcss.config.mjs
    ├── tsconfig.json
    ├── messages/
    │   ├── de.json
    │   ├── en.json
    │   ├── es.json
    │   ├── fr.json
    │   └── pt.json
    ├── public/
    │   ├── icons/
    │   └── images/
    └── src/
        ├── app/
        │   ├── globals.css
        │   ├── layout.tsx
        │   ├── manifest.tsx
        │   ├── not-found.tsx
        │   ├── types.ts
        │   ├── (frontend)/
        │   │   ├── layout.tsx
        │   │   ├── (app)/
        │   │   │   ├── layout.tsx
        │   │   │   ├── (foreign routes)/
        │   │   │   │   ├── artists/
        │   │   │   │   │   └── [artistId]/
        │   │   │   │   │       ├── artist-songs.tsx
        │   │   │   │   │       └── page.tsx
        │   │   │   │   └── songs/
        │   │   │   │       ├── page.tsx
        │   │   │   │       └── liked/
        │   │   │   │           └── page.tsx
        │   │   │   ├── account/
        │   │   │   │   ├── page.tsx
        │   │   │   │   ├── signout.tsx
        │   │   │   │   └── upload-song/
        │   │   │   │       ├── music-player.tsx
        │   │   │   │       ├── page.tsx
        │   │   │   │       └── _upload/
        │   │   │   │           ├── form.tsx
        │   │   │   │           ├── handle-form-submit.ts
        │   │   │   │           ├── index.tsx
        │   │   │   │           ├── no-ssr-wrapper.tsx
        │   │   │   │           └── ffmpeg/
        │   │   │   │               ├── audio-compressor.ts
        │   │   │   │               ├── audio-converter.ts
        │   │   │   │               └── ffmpeg-core.ts
        │   │   │   ├── home/
        │   │   │   │   └── page.tsx
        │   │   │   └── search/
        │   │   │       └── page.tsx
        │   │   └── (site)/
        │   │       ├── header.tsx
        │   │       ├── layout.tsx
        │   │       ├── page.tsx
        │   │       └── signin/
        │   │           ├── googlebutton.tsx
        │   │           └── page.tsx
        │   ├── api/
        │   │   ├── auth/
        │   │   │   └── [...nextauth]/
        │   │   │       └── route.ts
        │   │   ├── stream-audio/
        │   │   │   └── route.ts
        │   │   └── track-listens/
        │   │       └── route.ts
        │   └── fonts/
        │       └── custom.woff
        ├── components/
        │   ├── loading.tsx
        │   ├── auth/
        │   │   └── session-provider.tsx
        │   ├── music/
        │   │   ├── artist-list.tsx
        │   │   ├── music-player-full.tsx
        │   │   ├── music-player.tsx
        │   │   └── songs/
        │   │       ├── loading-skeleton.tsx
        │   │       ├── song-list.tsx
        │   │       ├── song-modal.tsx
        │   │       └── song.tsx
        │   └── ui/
        │       ├── footer.tsx
        │       ├── header.tsx
        │       ├── icons.tsx
        │       └── components/
        │           ├── block.tsx
        │           ├── button.tsx
        │           ├── component.tsx
        │           ├── image.tsx
        │           ├── index.ts
        │           ├── link.tsx
        │           ├── row.tsx
        │           └── section.tsx
        ├── hooks/
        │   ├── music-player-provider.tsx
        │   └── useQuery.ts
        └── server/
            ├── auth.ts
            ├── db/
            │   ├── index.ts
            │   ├── schema.ts
            │   └── utils.ts
            └── storage/
                ├── get-upload-url.ts
                ├── helpers.ts
                ├── index.ts
                └── utils.ts

================================================
File: README.md
================================================
Social Media for Music lovers who move fast and want to share their music with the world without worrying about technicalities and costs, also dont have to worry about signing up to a label to publish music

Features:
- Fully typesafe with TypeScript
- Frontend in React
- Backend connects to a hosted Postgres database integrated through an orm (drizzle typescript orm)
- Userbase for creating users who can sign up and create their unqiue profile with username, name, description and profile picture
- Any user can upload their music files under their account to share with anyone who has access to the internet
- Authentication with NextAuth.js
- Audio files are validated and compressed using wasm ffmpeg to normalise files to the same bitrate and format (optimised for streaming over the internet and effecient storage means less costs)
- File uploads with cloudflare R2 object storage
- Custom Music Player with custom useMusicPlayer hook and music custom provider for global context (persistent state across all routes and components)
- Songs can be played in the background with a music player
- Songs can be favorited and saved to a playlist
- Authenticated and secured audio streaming (file url never exposed to the client)

================================================
File: drizzle.config.ts
================================================
import { defineConfig } from "drizzle-kit";

export default defineConfig({
  schema: "./src/server/db/schema.ts",
  out: "./src/server/db/migrations",
  dialect: "postgresql",
  dbCredentials: {
    url: process.env.DATABASE_URL!,
  },
  tablesFilter: ["music_*"],
});


================================================
File: next-env.d.ts
================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


================================================
File: next.config.ts
================================================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: "https",
        hostname: "pub-5d98fcdd24fb4227be900a856fef1126.r2.dev",
        pathname: "/**",
      },
    ],
  },
};

export default nextConfig;


================================================
File: package.json
================================================
{
  "name": "michael-dossantos-music-webapp",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@auth/drizzle-adapter": "^1.8.0",
    "@aws-sdk/client-s3": "^3.750.0",
    "@aws-sdk/s3-request-presigner": "^3.750.0",
    "@ffmpeg/ffmpeg": "*",
    "@ffmpeg/util": "*",
    "@tanstack/react-query": "^5.67.1",
    "drizzle-kit": "^0.30.5",
    "drizzle-orm": "^0.40.0",
    "formidable": "^3.5.2",
    "next": "15.2.0",
    "next-auth": "^4.24.11",
    "postgres": "^3.4.5",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "server-only": "^0.0.1",
    "sonner": "^2.0.1"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4",
    "@types/formidable": "^3.4.5",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}


================================================
File: pnpm-lock.yaml
================================================
lockfileVersion: "9.0"

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:
  .:
    dependencies:
      "@auth/drizzle-adapter":
        specifier: ^1.8.0
        version: 1.8.0
      "@aws-sdk/client-s3":
        specifier: ^3.750.0
        version: 3.750.0
      "@aws-sdk/s3-request-presigner":
        specifier: ^3.750.0
        version: 3.750.0
      "@ffmpeg/ffmpeg":
        specifier: "*"
        version: 0.12.15
      "@ffmpeg/util":
        specifier: "*"
        version: 0.12.2
      "@tanstack/react-query":
        specifier: ^5.67.1
        version: 5.67.1(react@19.0.0)
      drizzle-kit:
        specifier: ^0.30.5
        version: 0.30.5
      drizzle-orm:
        specifier: ^0.40.0
        version: 0.40.0(gel@2.0.0)(postgres@3.4.5)
      formidable:
        specifier: ^3.5.2
        version: 3.5.2
      next:
        specifier: 15.2.0
        version: 15.2.0(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      next-auth:
        specifier: ^4.24.11
        version: 4.24.11(next@15.2.0(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      postgres:
        specifier: ^3.4.5
        version: 3.4.5
      react:
        specifier: ^19.0.0
        version: 19.0.0
      react-dom:
        specifier: ^19.0.0
        version: 19.0.0(react@19.0.0)
      server-only:
        specifier: ^0.0.1
        version: 0.0.1
      sonner:
        specifier: ^2.0.1
        version: 2.0.1(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
    devDependencies:
      "@tailwindcss/postcss":
        specifier: ^4
        version: 4.0.9
      "@types/formidable":
        specifier: ^3.4.5
        version: 3.4.5
      "@types/node":
        specifier: ^20
        version: 20.17.19
      "@types/react":
        specifier: ^19
        version: 19.0.10
      "@types/react-dom":
        specifier: ^19
        version: 19.0.4(@types/react@19.0.10)
      tailwindcss:
        specifier: ^4
        version: 4.0.9
      typescript:
        specifier: ^5
        version: 5.7.3

packages:
  "@alloc/quick-lru@5.2.0":
    resolution:
      {
        integrity: sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==,
      }
    engines: { node: ">=10" }

  "@auth/core@0.38.0":
    resolution:
      {
        integrity: sha512-ClHl44x4cY3wfJmHLpW+XrYqED0fZIzbHmwbExltzroCjR5ts3DLTWzADRba8mJFYZ8JIEJDa+lXnGl0E9Bl7Q==,
      }
    peerDependencies:
      "@simplewebauthn/browser": ^9.0.1
      "@simplewebauthn/server": ^9.0.2
      nodemailer: ^6.8.0
    peerDependenciesMeta:
      "@simplewebauthn/browser":
        optional: true
      "@simplewebauthn/server":
        optional: true
      nodemailer:
        optional: true

  "@auth/drizzle-adapter@1.8.0":
    resolution:
      {
        integrity: sha512-cxApE0h5WcyDsgGix9hzmWmCz0qxvmMJexAOQmI6R/YXYxrZ/mKBKu0BlfgQBR6z2XvNWl4wbEGchwSenSCksQ==,
      }

  "@aws-crypto/crc32@5.2.0":
    resolution:
      {
        integrity: sha512-nLbCWqQNgUiwwtFsen1AdzAtvuLRsQS8rYgMuxCrdKf9kOssamGLuPwyTY9wyYblNr9+1XM8v6zoDTPPSIeANg==,
      }
    engines: { node: ">=16.0.0" }

  "@aws-crypto/crc32c@5.2.0":
    resolution:
      {
        integrity: sha512-+iWb8qaHLYKrNvGRbiYRHSdKRWhto5XlZUEBwDjYNf+ly5SVYG6zEoYIdxvf5R3zyeP16w4PLBn3rH1xc74Rag==,
      }

  "@aws-crypto/sha1-browser@5.2.0":
    resolution:
      {
        integrity: sha512-OH6lveCFfcDjX4dbAvCFSYUjJZjDr/3XJ3xHtjn3Oj5b9RjojQo8npoLeA/bNwkOkrSQ0wgrHzXk4tDRxGKJeg==,
      }

  "@aws-crypto/sha256-browser@5.2.0":
    resolution:
      {
        integrity: sha512-AXfN/lGotSQwu6HNcEsIASo7kWXZ5HYWvfOmSNKDsEqC4OashTp8alTmaz+F7TC2L083SFv5RdB+qU3Vs1kZqw==,
      }

  "@aws-crypto/sha256-js@5.2.0":
    resolution:
      {
        integrity: sha512-FFQQyu7edu4ufvIZ+OadFpHHOt+eSTBaYaki44c+akjg7qZg9oOQeLlk77F6tSYqjDAFClrHJk9tMf0HdVyOvA==,
      }
    engines: { node: ">=16.0.0" }

  "@aws-crypto/supports-web-crypto@5.2.0":
    resolution:
      {
        integrity: sha512-iAvUotm021kM33eCdNfwIN//F77/IADDSs58i+MDaOqFrVjZo9bAal0NK7HurRuWLLpF1iLX7gbWrjHjeo+YFg==,
      }

  "@aws-crypto/util@5.2.0":
    resolution:
      {
        integrity: sha512-4RkU9EsI6ZpBve5fseQlGNUWKMa1RLPQ1dnjnQoe07ldfIzcsGb5hC5W0Dm7u423KWzawlrpbjXBrXCEv9zazQ==,
      }

  "@aws-sdk/client-s3@3.750.0":
    resolution:
      {
        integrity: sha512-S9G9noCeBxchoMVkHYrRi1A1xW/VOTP2W7X34lP+Y7Wpl32yMA7IJo0fAGAuTc0q1Nu6/pXDm+oDG7rhTCA1tg==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/client-sso@3.750.0":
    resolution:
      {
        integrity: sha512-y0Rx6pTQXw0E61CaptpZF65qNggjqOgymq/RYZU5vWba5DGQ+iqGt8Yq8s+jfBoBBNXshxq8l8Dl5Uq/JTY1wg==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/core@3.750.0":
    resolution:
      {
        integrity: sha512-bZ5K7N5L4+Pa2epbVpUQqd1XLG2uU8BGs/Sd+2nbgTf+lNQJyIxAg/Qsrjz9MzmY8zzQIeRQEkNmR6yVAfCmmQ==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/credential-provider-env@3.750.0":
    resolution:
      {
        integrity: sha512-In6bsG0p/P31HcH4DBRKBbcDS/3SHvEPjfXV8ODPWZO/l3/p7IRoYBdQ07C9R+VMZU2D0+/Sc/DWK/TUNDk1+Q==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/credential-provider-http@3.750.0":
    resolution:
      {
        integrity: sha512-wFB9qqfa20AB0dElsQz5ZlZT5o+a+XzpEpmg0erylmGYqEOvh8NQWfDUVpRmQuGq9VbvW/8cIbxPoNqEbPtuWQ==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/credential-provider-ini@3.750.0":
    resolution:
      {
        integrity: sha512-2YIZmyEr5RUd3uxXpxOLD9G67Bibm4I/65M6vKFP17jVMUT+R1nL7mKqmhEVO2p+BoeV+bwMyJ/jpTYG368PCg==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/credential-provider-node@3.750.0":
    resolution:
      {
        integrity: sha512-THWHHAceLwsOiowPEmKyhWVDlEUxH07GHSw5AQFDvNQtGKOQl0HSIFO1mKObT2Q2Vqzji9Bq8H58SO5BFtNPRw==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/credential-provider-process@3.750.0":
    resolution:
      {
        integrity: sha512-Q78SCH1n0m7tpu36sJwfrUSxI8l611OyysjQeMiIOliVfZICEoHcLHLcLkiR+tnIpZ3rk7d2EQ6R1jwlXnalMQ==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/credential-provider-sso@3.750.0":
    resolution:
      {
        integrity: sha512-FGYrDjXN/FOQVi/t8fHSv8zCk+NEvtFnuc4cZUj5OIbM4vrfFc5VaPyn41Uza3iv6Qq9rZg0QOwWnqK8lNrqUw==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/credential-provider-web-identity@3.750.0":
    resolution:
      {
        integrity: sha512-Nz8zs3YJ+GOTSrq+LyzbbC1Ffpt7pK38gcOyNZv76pP5MswKTUKNYBJehqwa+i7FcFQHsCk3TdhR8MT1ZR23uA==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/middleware-bucket-endpoint@3.734.0":
    resolution:
      {
        integrity: sha512-etC7G18aF7KdZguW27GE/wpbrNmYLVT755EsFc8kXpZj8D6AFKxc7OuveinJmiy0bYXAMspJUWsF6CrGpOw6CQ==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/middleware-expect-continue@3.734.0":
    resolution:
      {
        integrity: sha512-P38/v1l6HjuB2aFUewt7ueAW5IvKkFcv5dalPtbMGRhLeyivBOHwbCyuRKgVs7z7ClTpu9EaViEGki2jEQqEsQ==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/middleware-flexible-checksums@3.750.0":
    resolution:
      {
        integrity: sha512-ach0d2buDnX2TUausUbiXXFWFo3IegLnCrA+Rw8I9AYVpLN9lTaRwAYJwYC6zEuW9Golff8MwkYsp/OaC5tKMw==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/middleware-host-header@3.734.0":
    resolution:
      {
        integrity: sha512-LW7RRgSOHHBzWZnigNsDIzu3AiwtjeI2X66v+Wn1P1u+eXssy1+up4ZY/h+t2sU4LU36UvEf+jrZti9c6vRnFw==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/middleware-location-constraint@3.734.0":
    resolution:
      {
        integrity: sha512-EJEIXwCQhto/cBfHdm3ZOeLxd2NlJD+X2F+ZTOxzokuhBtY0IONfC/91hOo5tWQweerojwshSMHRCKzRv1tlwg==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/middleware-logger@3.734.0":
    resolution:
      {
        integrity: sha512-mUMFITpJUW3LcKvFok176eI5zXAUomVtahb9IQBwLzkqFYOrMJvWAvoV4yuxrJ8TlQBG8gyEnkb9SnhZvjg67w==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/middleware-recursion-detection@3.734.0":
    resolution:
      {
        integrity: sha512-CUat2d9ITsFc2XsmeiRQO96iWpxSKYFjxvj27Hc7vo87YUHRnfMfnc8jw1EpxEwMcvBD7LsRa6vDNky6AjcrFA==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/middleware-sdk-s3@3.750.0":
    resolution:
      {
        integrity: sha512-3H6Z46cmAQCHQ0z8mm7/cftY5ifiLfCjbObrbyyp2fhQs9zk6gCKzIX8Zjhw0RMd93FZi3ebRuKJWmMglf4Itw==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/middleware-ssec@3.734.0":
    resolution:
      {
        integrity: sha512-d4yd1RrPW/sspEXizq2NSOUivnheac6LPeLSLnaeTbBG9g1KqIqvCzP1TfXEqv2CrWfHEsWtJpX7oyjySSPvDQ==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/middleware-user-agent@3.750.0":
    resolution:
      {
        integrity: sha512-YYcslDsP5+2NZoN3UwuhZGkhAHPSli7HlJHBafBrvjGV/I9f8FuOO1d1ebxGdEP4HyRXUGyh+7Ur4q+Psk0ryw==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/nested-clients@3.750.0":
    resolution:
      {
        integrity: sha512-OH68BRF0rt9nDloq4zsfeHI0G21lj11a66qosaljtEP66PWm7tQ06feKbFkXHT5E1K3QhJW3nVyK8v2fEBY5fg==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/region-config-resolver@3.734.0":
    resolution:
      {
        integrity: sha512-Lvj1kPRC5IuJBr9DyJ9T9/plkh+EfKLy+12s/mykOy1JaKHDpvj+XGy2YO6YgYVOb8JFtaqloid+5COtje4JTQ==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/s3-request-presigner@3.750.0":
    resolution:
      {
        integrity: sha512-G4GNngNQlh9EyJZj2WKOOikX0Fev1WSxTV/XJugaHlpnVriebvi3GzolrgxUpRrcGpFGWjmAxLi/gYxTUla1ow==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/signature-v4-multi-region@3.750.0":
    resolution:
      {
        integrity: sha512-RA9hv1Irro/CrdPcOEXKwJ0DJYJwYCsauGEdRXihrRfy8MNSR9E+mD5/Fr5Rxjaq5AHM05DYnN3mg/DU6VwzSw==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/token-providers@3.750.0":
    resolution:
      {
        integrity: sha512-X/KzqZw41iWolwNdc8e3RMcNSMR364viHv78u6AefXOO5eRM40c4/LuST1jDzq35/LpnqRhL7/MuixOetw+sFw==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/types@3.734.0":
    resolution:
      {
        integrity: sha512-o11tSPTT70nAkGV1fN9wm/hAIiLPyWX6SuGf+9JyTp7S/rC2cFWhR26MvA69nplcjNaXVzB0f+QFrLXXjOqCrg==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/util-arn-parser@3.723.0":
    resolution:
      {
        integrity: sha512-ZhEfvUwNliOQROcAk34WJWVYTlTa4694kSVhDSjW6lE1bMataPnIN8A0ycukEzBXmd8ZSoBcQLn6lKGl7XIJ5w==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/util-endpoints@3.743.0":
    resolution:
      {
        integrity: sha512-sN1l559zrixeh5x+pttrnd0A3+r34r0tmPkJ/eaaMaAzXqsmKU/xYre9K3FNnsSS1J1k4PEfk/nHDTVUgFYjnw==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/util-format-url@3.734.0":
    resolution:
      {
        integrity: sha512-TxZMVm8V4aR/QkW9/NhujvYpPZjUYqzLwSge5imKZbWFR806NP7RMwc5ilVuHF/bMOln/cVHkl42kATElWBvNw==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/util-locate-window@3.723.0":
    resolution:
      {
        integrity: sha512-Yf2CS10BqK688DRsrKI/EO6B8ff5J86NXe4C+VCysK7UOgN0l1zOTeTukZ3H8Q9tYYX3oaF1961o8vRkFm7Nmw==,
      }
    engines: { node: ">=18.0.0" }

  "@aws-sdk/util-user-agent-browser@3.734.0":
    resolution:
      {
        integrity: sha512-xQTCus6Q9LwUuALW+S76OL0jcWtMOVu14q+GoLnWPUM7QeUw963oQcLhF7oq0CtaLLKyl4GOUfcwc773Zmwwng==,
      }

  "@aws-sdk/util-user-agent-node@3.750.0":
    resolution:
      {
        integrity: sha512-84HJj9G9zbrHX2opLk9eHfDceB+UIHVrmflMzWHpsmo9fDuro/flIBqaVDlE021Osj6qIM0SJJcnL6s23j7JEw==,
      }
    engines: { node: ">=18.0.0" }
    peerDependencies:
      aws-crt: ">=1.0.0"
    peerDependenciesMeta:
      aws-crt:
        optional: true

  "@aws-sdk/xml-builder@3.734.0":
    resolution:
      {
        integrity: sha512-Zrjxi5qwGEcUsJ0ru7fRtW74WcTS0rbLcehoFB+rN1GRi2hbLcFaYs4PwVA5diLeAJH0gszv3x4Hr/S87MfbKQ==,
      }
    engines: { node: ">=18.0.0" }

  "@babel/runtime@7.26.9":
    resolution:
      {
        integrity: sha512-aA63XwOkcl4xxQa3HjPMqOP6LiK0ZDv3mUPYEFXkpHbaFjtGggE1A61FjFzJnB+p7/oy2gA8E+rcBNl/zC1tMg==,
      }
    engines: { node: ">=6.9.0" }

  "@drizzle-team/brocli@0.10.2":
    resolution:
      {
        integrity: sha512-z33Il7l5dKjUgGULTqBsQBQwckHh5AbIuxhdsIxDDiZAzBOrZO6q9ogcWC65kU382AfynTfgNumVcNIjuIua6w==,
      }

  "@emnapi/runtime@1.3.1":
    resolution:
      {
        integrity: sha512-kEBmG8KyqtxJZv+ygbEim+KCGtIq1fC22Ms3S4ziXmYKm8uyoLX0MHONVKwp+9opg390VaKRNt4a7A9NwmpNhw==,
      }

  "@esbuild-kit/core-utils@3.3.2":
    resolution:
      {
        integrity: sha512-sPRAnw9CdSsRmEtnsl2WXWdyquogVpB3yZ3dgwJfe8zrOzTsV7cJvmwrKVa+0ma5BoiGJ+BoqkMvawbayKUsqQ==,
      }
    deprecated: "Merged into tsx: https://tsx.is"

  "@esbuild-kit/esm-loader@2.6.5":
    resolution:
      {
        integrity: sha512-FxEMIkJKnodyA1OaCUoEvbYRkoZlLZ4d/eXFu9Fh8CbBBgP5EmZxrfTRyN0qpXZ4vOvqnE5YdRdcrmUUXuU+dA==,
      }
    deprecated: "Merged into tsx: https://tsx.is"

  "@esbuild/aix-ppc64@0.19.12":
    resolution:
      {
        integrity: sha512-bmoCYyWdEL3wDQIVbcyzRyeKLgk2WtWLTWz1ZIAZF/EGbNOwSA6ew3PftJ1PqMiOOGu0OyFMzG53L0zqIpPeNA==,
      }
    engines: { node: ">=12" }
    cpu: [ppc64]
    os: [aix]

  "@esbuild/android-arm64@0.18.20":
    resolution:
      {
        integrity: sha512-Nz4rJcchGDtENV0eMKUNa6L12zz2zBDXuhj/Vjh18zGqB44Bi7MBMSXjgunJgjRhCmKOjnPuZp4Mb6OKqtMHLQ==,
      }
    engines: { node: ">=12" }
    cpu: [arm64]
    os: [android]

  "@esbuild/android-arm64@0.19.12":
    resolution:
      {
        integrity: sha512-P0UVNGIienjZv3f5zq0DP3Nt2IE/3plFzuaS96vihvD0Hd6H/q4WXUGpCxD/E8YrSXfNyRPbpTq+T8ZQioSuPA==,
      }
    engines: { node: ">=12" }
    cpu: [arm64]
    os: [android]

  "@esbuild/android-arm@0.18.20":
    resolution:
      {
        integrity: sha512-fyi7TDI/ijKKNZTUJAQqiG5T7YjJXgnzkURqmGj13C6dCqckZBLdl4h7bkhHt/t0WP+zO9/zwroDvANaOqO5Sw==,
      }
    engines: { node: ">=12" }
    cpu: [arm]
    os: [android]

  "@esbuild/android-arm@0.19.12":
    resolution:
      {
        integrity: sha512-qg/Lj1mu3CdQlDEEiWrlC4eaPZ1KztwGJ9B6J+/6G+/4ewxJg7gqj8eVYWvao1bXrqGiW2rsBZFSX3q2lcW05w==,
      }
    engines: { node: ">=12" }
    cpu: [arm]
    os: [android]

  "@esbuild/android-x64@0.18.20":
    resolution:
      {
        integrity: sha512-8GDdlePJA8D6zlZYJV/jnrRAi6rOiNaCC/JclcXpB+KIuvfBN4owLtgzY2bsxnx666XjJx2kDPUmnTtR8qKQUg==,
      }
    engines: { node: ">=12" }
    cpu: [x64]
    os: [android]

  "@esbuild/android-x64@0.19.12":
    resolution:
      {
        integrity: sha512-3k7ZoUW6Q6YqhdhIaq/WZ7HwBpnFBlW905Fa4s4qWJyiNOgT1dOqDiVAQFwBH7gBRZr17gLrlFCRzF6jFh7Kew==,
      }
    engines: { node: ">=12" }
    cpu: [x64]
    os: [android]

  "@esbuild/darwin-arm64@0.18.20":
    resolution:
      {
        integrity: sha512-bxRHW5kHU38zS2lPTPOyuyTm+S+eobPUnTNkdJEfAddYgEcll4xkT8DB9d2008DtTbl7uJag2HuE5NZAZgnNEA==,
      }
    engines: { node: ">=12" }
    cpu: [arm64]
    os: [darwin]

  "@esbuild/darwin-arm64@0.19.12":
    resolution:
      {
        integrity: sha512-B6IeSgZgtEzGC42jsI+YYu9Z3HKRxp8ZT3cqhvliEHovq8HSX2YX8lNocDn79gCKJXOSaEot9MVYky7AKjCs8g==,
      }
    engines: { node: ">=12" }
    cpu: [arm64]
    os: [darwin]

  "@esbuild/darwin-x64@0.18.20":
    resolution:
      {
        integrity: sha512-pc5gxlMDxzm513qPGbCbDukOdsGtKhfxD1zJKXjCCcU7ju50O7MeAZ8c4krSJcOIJGFR+qx21yMMVYwiQvyTyQ==,
      }
    engines: { node: ">=12" }
    cpu: [x64]
    os: [darwin]

  "@esbuild/darwin-x64@0.19.12":
    resolution:
      {
        integrity: sha512-hKoVkKzFiToTgn+41qGhsUJXFlIjxI/jSYeZf3ugemDYZldIXIxhvwN6erJGlX4t5h417iFuheZ7l+YVn05N3A==,
      }
    engines: { node: ">=12" }
    cpu: [x64]
    os: [darwin]

  "@esbuild/freebsd-arm64@0.18.20":
    resolution:
      {
        integrity: sha512-yqDQHy4QHevpMAaxhhIwYPMv1NECwOvIpGCZkECn8w2WFHXjEwrBn3CeNIYsibZ/iZEUemj++M26W3cNR5h+Tw==,
      }
    engines: { node: ">=12" }
    cpu: [arm64]
    os: [freebsd]

  "@esbuild/freebsd-arm64@0.19.12":
    resolution:
      {
        integrity: sha512-4aRvFIXmwAcDBw9AueDQ2YnGmz5L6obe5kmPT8Vd+/+x/JMVKCgdcRwH6APrbpNXsPz+K653Qg8HB/oXvXVukA==,
      }
    engines: { node: ">=12" }
    cpu: [arm64]
    os: [freebsd]

  "@esbuild/freebsd-x64@0.18.20":
    resolution:
      {
        integrity: sha512-tgWRPPuQsd3RmBZwarGVHZQvtzfEBOreNuxEMKFcd5DaDn2PbBxfwLcj4+aenoh7ctXcbXmOQIn8HI6mCSw5MQ==,
      }
    engines: { node: ">=12" }
    cpu: [x64]
    os: [freebsd]

  "@esbuild/freebsd-x64@0.19.12":
    resolution:
      {
        integrity: sha512-EYoXZ4d8xtBoVN7CEwWY2IN4ho76xjYXqSXMNccFSx2lgqOG/1TBPW0yPx1bJZk94qu3tX0fycJeeQsKovA8gg==,
      }
    engines: { node: ">=12" }
    cpu: [x64]
    os: [freebsd]

  "@esbuild/linux-arm64@0.18.20":
    resolution:
      {
        integrity: sha512-2YbscF+UL7SQAVIpnWvYwM+3LskyDmPhe31pE7/aoTMFKKzIc9lLbyGUpmmb8a8AixOL61sQ/mFh3jEjHYFvdA==,
      }
    engines: { node: ">=12" }
    cpu: [arm64]
    os: [linux]

  "@esbuild/linux-arm64@0.19.12":
    resolution:
      {
        integrity: sha512-EoTjyYyLuVPfdPLsGVVVC8a0p1BFFvtpQDB/YLEhaXyf/5bczaGeN15QkR+O4S5LeJ92Tqotve7i1jn35qwvdA==,
      }
    engines: { node: ">=12" }
    cpu: [arm64]
    os: [linux]

  "@esbuild/linux-arm@0.18.20":
    resolution:
      {
        integrity: sha512-/5bHkMWnq1EgKr1V+Ybz3s1hWXok7mDFUMQ4cG10AfW3wL02PSZi5kFpYKrptDsgb2WAJIvRcDm+qIvXf/apvg==,
      }
    engines: { node: ">=12" }
    cpu: [arm]
    os: [linux]

  "@esbuild/linux-arm@0.19.12":
    resolution:
      {
        integrity: sha512-J5jPms//KhSNv+LO1S1TX1UWp1ucM6N6XuL6ITdKWElCu8wXP72l9MM0zDTzzeikVyqFE6U8YAV9/tFyj0ti+w==,
      }
    engines: { node: ">=12" }
    cpu: [arm]
    os: [linux]

  "@esbuild/linux-ia32@0.18.20":
    resolution:
      {
        integrity: sha512-P4etWwq6IsReT0E1KHU40bOnzMHoH73aXp96Fs8TIT6z9Hu8G6+0SHSw9i2isWrD2nbx2qo5yUqACgdfVGx7TA==,
      }
    engines: { node: ">=12" }
    cpu: [ia32]
    os: [linux]

  "@esbuild/linux-ia32@0.19.12":
    resolution:
      {
        integrity: sha512-Thsa42rrP1+UIGaWz47uydHSBOgTUnwBwNq59khgIwktK6x60Hivfbux9iNR0eHCHzOLjLMLfUMLCypBkZXMHA==,
      }
    engines: { node: ">=12" }
    cpu: [ia32]
    os: [linux]

  "@esbuild/linux-loong64@0.18.20":
    resolution:
      {
        integrity: sha512-nXW8nqBTrOpDLPgPY9uV+/1DjxoQ7DoB2N8eocyq8I9XuqJ7BiAMDMf9n1xZM9TgW0J8zrquIb/A7s3BJv7rjg==,
      }
    engines: { node: ">=12" }
    cpu: [loong64]
    os: [linux]

  "@esbuild/linux-loong64@0.19.12":
    resolution:
      {
        integrity: sha512-LiXdXA0s3IqRRjm6rV6XaWATScKAXjI4R4LoDlvO7+yQqFdlr1Bax62sRwkVvRIrwXxvtYEHHI4dm50jAXkuAA==,
      }
    engines: { node: ">=12" }
    cpu: [loong64]
    os: [linux]

  "@esbuild/linux-mips64el@0.18.20":
    resolution:
      {
        integrity: sha512-d5NeaXZcHp8PzYy5VnXV3VSd2D328Zb+9dEq5HE6bw6+N86JVPExrA6O68OPwobntbNJ0pzCpUFZTo3w0GyetQ==,
      }
    engines: { node: ">=12" }
    cpu: [mips64el]
    os: [linux]

  "@esbuild/linux-mips64el@0.19.12":
    resolution:
      {
        integrity: sha512-fEnAuj5VGTanfJ07ff0gOA6IPsvrVHLVb6Lyd1g2/ed67oU1eFzL0r9WL7ZzscD+/N6i3dWumGE1Un4f7Amf+w==,
      }
    engines: { node: ">=12" }
    cpu: [mips64el]
    os: [linux]

  "@esbuild/linux-ppc64@0.18.20":
    resolution:
      {
        integrity: sha512-WHPyeScRNcmANnLQkq6AfyXRFr5D6N2sKgkFo2FqguP44Nw2eyDlbTdZwd9GYk98DZG9QItIiTlFLHJHjxP3FA==,
      }
    engines: { node: ">=12" }
    cpu: [ppc64]
    os: [linux]

  "@esbuild/linux-ppc64@0.19.12":
    resolution:
      {
        integrity: sha512-nYJA2/QPimDQOh1rKWedNOe3Gfc8PabU7HT3iXWtNUbRzXS9+vgB0Fjaqr//XNbd82mCxHzik2qotuI89cfixg==,
      }
    engines: { node: ">=12" }
    cpu: [ppc64]
    os: [linux]

  "@esbuild/linux-riscv64@0.18.20":
    resolution:
      {
        integrity: sha512-WSxo6h5ecI5XH34KC7w5veNnKkju3zBRLEQNY7mv5mtBmrP/MjNBCAlsM2u5hDBlS3NGcTQpoBvRzqBcRtpq1A==,
      }
    engines: { node: ">=12" }
    cpu: [riscv64]
    os: [linux]

  "@esbuild/linux-riscv64@0.19.12":
    resolution:
      {
        integrity: sha512-2MueBrlPQCw5dVJJpQdUYgeqIzDQgw3QtiAHUC4RBz9FXPrskyyU3VI1hw7C0BSKB9OduwSJ79FTCqtGMWqJHg==,
      }
    engines: { node: ">=12" }
    cpu: [riscv64]
    os: [linux]

  "@esbuild/linux-s390x@0.18.20":
    resolution:
      {
        integrity: sha512-+8231GMs3mAEth6Ja1iK0a1sQ3ohfcpzpRLH8uuc5/KVDFneH6jtAJLFGafpzpMRO6DzJ6AvXKze9LfFMrIHVQ==,
      }
    engines: { node: ">=12" }
    cpu: [s390x]
    os: [linux]

  "@esbuild/linux-s390x@0.19.12":
    resolution:
      {
        integrity: sha512-+Pil1Nv3Umes4m3AZKqA2anfhJiVmNCYkPchwFJNEJN5QxmTs1uzyy4TvmDrCRNT2ApwSari7ZIgrPeUx4UZDg==,
      }
    engines: { node: ">=12" }
    cpu: [s390x]
    os: [linux]

  "@esbuild/linux-x64@0.18.20":
    resolution:
      {
        integrity: sha512-UYqiqemphJcNsFEskc73jQ7B9jgwjWrSayxawS6UVFZGWrAAtkzjxSqnoclCXxWtfwLdzU+vTpcNYhpn43uP1w==,
      }
    engines: { node: ">=12" }
    cpu: [x64]
    os: [linux]

  "@esbuild/linux-x64@0.19.12":
    resolution:
      {
        integrity: sha512-B71g1QpxfwBvNrfyJdVDexenDIt1CiDN1TIXLbhOw0KhJzE78KIFGX6OJ9MrtC0oOqMWf+0xop4qEU8JrJTwCg==,
      }
    engines: { node: ">=12" }
    cpu: [x64]
    os: [linux]

  "@esbuild/netbsd-x64@0.18.20":
    resolution:
      {
        integrity: sha512-iO1c++VP6xUBUmltHZoMtCUdPlnPGdBom6IrO4gyKPFFVBKioIImVooR5I83nTew5UOYrk3gIJhbZh8X44y06A==,
      }
    engines: { node: ">=12" }
    cpu: [x64]
    os: [netbsd]

  "@esbuild/netbsd-x64@0.19.12":
    resolution:
      {
        integrity: sha512-3ltjQ7n1owJgFbuC61Oj++XhtzmymoCihNFgT84UAmJnxJfm4sYCiSLTXZtE00VWYpPMYc+ZQmB6xbSdVh0JWA==,
      }
    engines: { node: ">=12" }
    cpu: [x64]
    os: [netbsd]

  "@esbuild/openbsd-x64@0.18.20":
    resolution:
      {
        integrity: sha512-e5e4YSsuQfX4cxcygw/UCPIEP6wbIL+se3sxPdCiMbFLBWu0eiZOJ7WoD+ptCLrmjZBK1Wk7I6D/I3NglUGOxg==,
      }
    engines: { node: ">=12" }
    cpu: [x64]
    os: [openbsd]

  "@esbuild/openbsd-x64@0.19.12":
    resolution:
      {
        integrity: sha512-RbrfTB9SWsr0kWmb9srfF+L933uMDdu9BIzdA7os2t0TXhCRjrQyCeOt6wVxr79CKD4c+p+YhCj31HBkYcXebw==,
      }
    engines: { node: ">=12" }
    cpu: [x64]
    os: [openbsd]

  "@esbuild/sunos-x64@0.18.20":
    resolution:
      {
        integrity: sha512-kDbFRFp0YpTQVVrqUd5FTYmWo45zGaXe0X8E1G/LKFC0v8x0vWrhOWSLITcCn63lmZIxfOMXtCfti/RxN/0wnQ==,
      }
    engines: { node: ">=12" }
    cpu: [x64]
    os: [sunos]

  "@esbuild/sunos-x64@0.19.12":
    resolution:
      {
        integrity: sha512-HKjJwRrW8uWtCQnQOz9qcU3mUZhTUQvi56Q8DPTLLB+DawoiQdjsYq+j+D3s9I8VFtDr+F9CjgXKKC4ss89IeA==,
      }
    engines: { node: ">=12" }
    cpu: [x64]
    os: [sunos]

  "@esbuild/win32-arm64@0.18.20":
    resolution:
      {
        integrity: sha512-ddYFR6ItYgoaq4v4JmQQaAI5s7npztfV4Ag6NrhiaW0RrnOXqBkgwZLofVTlq1daVTQNhtI5oieTvkRPfZrePg==,
      }
    engines: { node: ">=12" }
    cpu: [arm64]
    os: [win32]

  "@esbuild/win32-arm64@0.19.12":
    resolution:
      {
        integrity: sha512-URgtR1dJnmGvX864pn1B2YUYNzjmXkuJOIqG2HdU62MVS4EHpU2946OZoTMnRUHklGtJdJZ33QfzdjGACXhn1A==,
      }
    engines: { node: ">=12" }
    cpu: [arm64]
    os: [win32]

  "@esbuild/win32-ia32@0.18.20":
    resolution:
      {
        integrity: sha512-Wv7QBi3ID/rROT08SABTS7eV4hX26sVduqDOTe1MvGMjNd3EjOz4b7zeexIR62GTIEKrfJXKL9LFxTYgkyeu7g==,
      }
    engines: { node: ">=12" }
    cpu: [ia32]
    os: [win32]

  "@esbuild/win32-ia32@0.19.12":
    resolution:
      {
        integrity: sha512-+ZOE6pUkMOJfmxmBZElNOx72NKpIa/HFOMGzu8fqzQJ5kgf6aTGrcJaFsNiVMH4JKpMipyK+7k0n2UXN7a8YKQ==,
      }
    engines: { node: ">=12" }
    cpu: [ia32]
    os: [win32]

  "@esbuild/win32-x64@0.18.20":
    resolution:
      {
        integrity: sha512-kTdfRcSiDfQca/y9QIkng02avJ+NCaQvrMejlsB3RRv5sE9rRoeBPISaZpKxHELzRxZyLvNts1P27W3wV+8geQ==,
      }
    engines: { node: ">=12" }
    cpu: [x64]
    os: [win32]

  "@esbuild/win32-x64@0.19.12":
    resolution:
      {
        integrity: sha512-T1QyPSDCyMXaO3pzBkF96E8xMkiRYbUEZADd29SyPGabqxMViNoii+NcK7eWJAEoU6RZyEm5lVSIjTmcdoB9HA==,
      }
    engines: { node: ">=12" }
    cpu: [x64]
    os: [win32]

  "@ffmpeg/ffmpeg@0.12.15":
    resolution:
      {
        integrity: sha512-1C8Obr4GsN3xw+/1Ww6PFM84wSQAGsdoTuTWPOj2OizsRDLT4CXTaVjPhkw6ARyDus1B9X/L2LiXHqYYsGnRFw==,
      }
    engines: { node: ">=18.x" }

  "@ffmpeg/types@0.12.4":
    resolution:
      {
        integrity: sha512-k9vJQNBGTxE5AhYDtOYR5rO5fKsspbg51gbcwtbkw2lCdoIILzklulcjJfIDwrtn7XhDeF2M+THwJ2FGrLeV6A==,
      }
    engines: { node: ">=16.x" }

  "@ffmpeg/util@0.12.2":
    resolution:
      {
        integrity: sha512-ouyoW+4JB7WxjeZ2y6KpRvB+dLp7Cp4ro8z0HIVpZVCM7AwFlHa0c4R8Y/a4M3wMqATpYKhC7lSFHQ0T11MEDw==,
      }
    engines: { node: ">=18.x" }

  "@img/sharp-darwin-arm64@0.33.5":
    resolution:
      {
        integrity: sha512-UT4p+iz/2H4twwAoLCqfA9UH5pI6DggwKEGuaPy7nCVQ8ZsiY5PIcrRvD1DzuY3qYL07NtIQcWnBSY/heikIFQ==,
      }
    engines: { node: ^18.17.0 || ^20.3.0 || >=21.0.0 }
    cpu: [arm64]
    os: [darwin]

  "@img/sharp-darwin-x64@0.33.5":
    resolution:
      {
        integrity: sha512-fyHac4jIc1ANYGRDxtiqelIbdWkIuQaI84Mv45KvGRRxSAa7o7d1ZKAOBaYbnepLC1WqxfpimdeWfvqqSGwR2Q==,
      }
    engines: { node: ^18.17.0 || ^20.3.0 || >=21.0.0 }
    cpu: [x64]
    os: [darwin]

  "@img/sharp-libvips-darwin-arm64@1.0.4":
    resolution:
      {
        integrity: sha512-XblONe153h0O2zuFfTAbQYAX2JhYmDHeWikp1LM9Hul9gVPjFY427k6dFEcOL72O01QxQsWi761svJ/ev9xEDg==,
      }
    cpu: [arm64]
    os: [darwin]

  "@img/sharp-libvips-darwin-x64@1.0.4":
    resolution:
      {
        integrity: sha512-xnGR8YuZYfJGmWPvmlunFaWJsb9T/AO2ykoP3Fz/0X5XV2aoYBPkX6xqCQvUTKKiLddarLaxpzNe+b1hjeWHAQ==,
      }
    cpu: [x64]
    os: [darwin]

  "@img/sharp-libvips-linux-arm64@1.0.4":
    resolution:
      {
        integrity: sha512-9B+taZ8DlyyqzZQnoeIvDVR/2F4EbMepXMc/NdVbkzsJbzkUjhXv/70GQJ7tdLA4YJgNP25zukcxpX2/SueNrA==,
      }
    cpu: [arm64]
    os: [linux]

  "@img/sharp-libvips-linux-arm@1.0.5":
    resolution:
      {
        integrity: sha512-gvcC4ACAOPRNATg/ov8/MnbxFDJqf/pDePbBnuBDcjsI8PssmjoKMAz4LtLaVi+OnSb5FK/yIOamqDwGmXW32g==,
      }
    cpu: [arm]
    os: [linux]

  "@img/sharp-libvips-linux-s390x@1.0.4":
    resolution:
      {
        integrity: sha512-u7Wz6ntiSSgGSGcjZ55im6uvTrOxSIS8/dgoVMoiGE9I6JAfU50yH5BoDlYA1tcuGS7g/QNtetJnxA6QEsCVTA==,
      }
    cpu: [s390x]
    os: [linux]

  "@img/sharp-libvips-linux-x64@1.0.4":
    resolution:
      {
        integrity: sha512-MmWmQ3iPFZr0Iev+BAgVMb3ZyC4KeFc3jFxnNbEPas60e1cIfevbtuyf9nDGIzOaW9PdnDciJm+wFFaTlj5xYw==,
      }
    cpu: [x64]
    os: [linux]

  "@img/sharp-libvips-linuxmusl-arm64@1.0.4":
    resolution:
      {
        integrity: sha512-9Ti+BbTYDcsbp4wfYib8Ctm1ilkugkA/uscUn6UXK1ldpC1JjiXbLfFZtRlBhjPZ5o1NCLiDbg8fhUPKStHoTA==,
      }
    cpu: [arm64]
    os: [linux]

  "@img/sharp-libvips-linuxmusl-x64@1.0.4":
    resolution:
      {
        integrity: sha512-viYN1KX9m+/hGkJtvYYp+CCLgnJXwiQB39damAO7WMdKWlIhmYTfHjwSbQeUK/20vY154mwezd9HflVFM1wVSw==,
      }
    cpu: [x64]
    os: [linux]

  "@img/sharp-linux-arm64@0.33.5":
    resolution:
      {
        integrity: sha512-JMVv+AMRyGOHtO1RFBiJy/MBsgz0x4AWrT6QoEVVTyh1E39TrCUpTRI7mx9VksGX4awWASxqCYLCV4wBZHAYxA==,
      }
    engines: { node: ^18.17.0 || ^20.3.0 || >=21.0.0 }
    cpu: [arm64]
    os: [linux]

  "@img/sharp-linux-arm@0.33.5":
    resolution:
      {
        integrity: sha512-JTS1eldqZbJxjvKaAkxhZmBqPRGmxgu+qFKSInv8moZ2AmT5Yib3EQ1c6gp493HvrvV8QgdOXdyaIBrhvFhBMQ==,
      }
    engines: { node: ^18.17.0 || ^20.3.0 || >=21.0.0 }
    cpu: [arm]
    os: [linux]

  "@img/sharp-linux-s390x@0.33.5":
    resolution:
      {
        integrity: sha512-y/5PCd+mP4CA/sPDKl2961b+C9d+vPAveS33s6Z3zfASk2j5upL6fXVPZi7ztePZ5CuH+1kW8JtvxgbuXHRa4Q==,
      }
    engines: { node: ^18.17.0 || ^20.3.0 || >=21.0.0 }
    cpu: [s390x]
    os: [linux]

  "@img/sharp-linux-x64@0.33.5":
    resolution:
      {
        integrity: sha512-opC+Ok5pRNAzuvq1AG0ar+1owsu842/Ab+4qvU879ippJBHvyY5n2mxF1izXqkPYlGuP/M556uh53jRLJmzTWA==,
      }
    engines: { node: ^18.17.0 || ^20.3.0 || >=21.0.0 }
    cpu: [x64]
    os: [linux]

  "@img/sharp-linuxmusl-arm64@0.33.5":
    resolution:
      {
        integrity: sha512-XrHMZwGQGvJg2V/oRSUfSAfjfPxO+4DkiRh6p2AFjLQztWUuY/o8Mq0eMQVIY7HJ1CDQUJlxGGZRw1a5bqmd1g==,
      }
    engines: { node: ^18.17.0 || ^20.3.0 || >=21.0.0 }
    cpu: [arm64]
    os: [linux]

  "@img/sharp-linuxmusl-x64@0.33.5":
    resolution:
      {
        integrity: sha512-WT+d/cgqKkkKySYmqoZ8y3pxx7lx9vVejxW/W4DOFMYVSkErR+w7mf2u8m/y4+xHe7yY9DAXQMWQhpnMuFfScw==,
      }
    engines: { node: ^18.17.0 || ^20.3.0 || >=21.0.0 }
    cpu: [x64]
    os: [linux]

  "@img/sharp-wasm32@0.33.5":
    resolution:
      {
        integrity: sha512-ykUW4LVGaMcU9lu9thv85CbRMAwfeadCJHRsg2GmeRa/cJxsVY9Rbd57JcMxBkKHag5U/x7TSBpScF4U8ElVzg==,
      }
    engines: { node: ^18.17.0 || ^20.3.0 || >=21.0.0 }
    cpu: [wasm32]

  "@img/sharp-win32-ia32@0.33.5":
    resolution:
      {
        integrity: sha512-T36PblLaTwuVJ/zw/LaH0PdZkRz5rd3SmMHX8GSmR7vtNSP5Z6bQkExdSK7xGWyxLw4sUknBuugTelgw2faBbQ==,
      }
    engines: { node: ^18.17.0 || ^20.3.0 || >=21.0.0 }
    cpu: [ia32]
    os: [win32]

  "@img/sharp-win32-x64@0.33.5":
    resolution:
      {
        integrity: sha512-MpY/o8/8kj+EcnxwvrP4aTJSWw/aZ7JIGR4aBeZkZw5B7/Jn+tY9/VNwtcoGmdT7GfggGIU4kygOMSbYnOrAbg==,
      }
    engines: { node: ^18.17.0 || ^20.3.0 || >=21.0.0 }
    cpu: [x64]
    os: [win32]

  "@next/env@15.2.0":
    resolution:
      {
        integrity: sha512-eMgJu1RBXxxqqnuRJQh5RozhskoNUDHBFybvi+Z+yK9qzKeG7dadhv/Vp1YooSZmCnegf7JxWuapV77necLZNA==,
      }

  "@next/swc-darwin-arm64@15.2.0":
    resolution:
      {
        integrity: sha512-rlp22GZwNJjFCyL7h5wz9vtpBVuCt3ZYjFWpEPBGzG712/uL1bbSkS675rVAUCRZ4hjoTJ26Q7IKhr5DfJrHDA==,
      }
    engines: { node: ">= 10" }
    cpu: [arm64]
    os: [darwin]

  "@next/swc-darwin-x64@15.2.0":
    resolution:
      {
        integrity: sha512-DiU85EqSHogCz80+sgsx90/ecygfCSGl5P3b4XDRVZpgujBm5lp4ts7YaHru7eVTyZMjHInzKr+w0/7+qDrvMA==,
      }
    engines: { node: ">= 10" }
    cpu: [x64]
    os: [darwin]

  "@next/swc-linux-arm64-gnu@15.2.0":
    resolution:
      {
        integrity: sha512-VnpoMaGukiNWVxeqKHwi8MN47yKGyki5q+7ql/7p/3ifuU2341i/gDwGK1rivk0pVYbdv5D8z63uu9yMw0QhpQ==,
      }
    engines: { node: ">= 10" }
    cpu: [arm64]
    os: [linux]

  "@next/swc-linux-arm64-musl@15.2.0":
    resolution:
      {
        integrity: sha512-ka97/ssYE5nPH4Qs+8bd8RlYeNeUVBhcnsNUmFM6VWEob4jfN9FTr0NBhXVi1XEJpj3cMfgSRW+LdE3SUZbPrw==,
      }
    engines: { node: ">= 10" }
    cpu: [arm64]
    os: [linux]

  "@next/swc-linux-x64-gnu@15.2.0":
    resolution:
      {
        integrity: sha512-zY1JduE4B3q0k2ZCE+DAF/1efjTXUsKP+VXRtrt/rJCTgDlUyyryx7aOgYXNc1d8gobys/Lof9P9ze8IyRDn7Q==,
      }
    engines: { node: ">= 10" }
    cpu: [x64]
    os: [linux]

  "@next/swc-linux-x64-musl@15.2.0":
    resolution:
      {
        integrity: sha512-QqvLZpurBD46RhaVaVBepkVQzh8xtlUN00RlG4Iq1sBheNugamUNPuZEH1r9X1YGQo1KqAe1iiShF0acva3jHQ==,
      }
    engines: { node: ">= 10" }
    cpu: [x64]
    os: [linux]

  "@next/swc-win32-arm64-msvc@15.2.0":
    resolution:
      {
        integrity: sha512-ODZ0r9WMyylTHAN6pLtvUtQlGXBL9voljv6ujSlcsjOxhtXPI1Ag6AhZK0SE8hEpR1374WZZ5w33ChpJd5fsjw==,
      }
    engines: { node: ">= 10" }
    cpu: [arm64]
    os: [win32]

  "@next/swc-win32-x64-msvc@15.2.0":
    resolution:
      {
        integrity: sha512-8+4Z3Z7xa13NdUuUAcpVNA6o76lNPniBd9Xbo02bwXQXnZgFvEopwY2at5+z7yHl47X9qbZpvwatZ2BRo3EdZw==,
      }
    engines: { node: ">= 10" }
    cpu: [x64]
    os: [win32]

  "@panva/hkdf@1.2.1":
    resolution:
      {
        integrity: sha512-6oclG6Y3PiDFcoyk8srjLfVKyMfVCKJ27JwNPViuXziFpmdz+MZnZN/aKY0JGXgYuO/VghU0jcOAZgWXZ1Dmrw==,
      }

  "@petamoriken/float16@3.9.1":
    resolution:
      {
        integrity: sha512-j+ejhYwY6PeB+v1kn7lZFACUIG97u90WxMuGosILFsl9d4Ovi0sjk0GlPfoEcx+FzvXZDAfioD+NGnnPamXgMA==,
      }

  "@smithy/abort-controller@4.0.1":
    resolution:
      {
        integrity: sha512-fiUIYgIgRjMWznk6iLJz35K2YxSLHzLBA/RC6lBrKfQ8fHbPfvk7Pk9UvpKoHgJjI18MnbPuEju53zcVy6KF1g==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/chunked-blob-reader-native@4.0.0":
    resolution:
      {
        integrity: sha512-R9wM2yPmfEMsUmlMlIgSzOyICs0x9uu7UTHoccMyt7BWw8shcGM8HqB355+BZCPBcySvbTYMs62EgEQkNxz2ig==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/chunked-blob-reader@5.0.0":
    resolution:
      {
        integrity: sha512-+sKqDBQqb036hh4NPaUiEkYFkTUGYzRsn3EuFhyfQfMy6oGHEUJDurLP9Ufb5dasr/XiAmPNMr6wa9afjQB+Gw==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/config-resolver@4.0.1":
    resolution:
      {
        integrity: sha512-Igfg8lKu3dRVkTSEm98QpZUvKEOa71jDX4vKRcvJVyRc3UgN3j7vFMf0s7xLQhYmKa8kyJGQgUJDOV5V3neVlQ==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/core@3.1.5":
    resolution:
      {
        integrity: sha512-HLclGWPkCsekQgsyzxLhCQLa8THWXtB5PxyYN+2O6nkyLt550KQKTlbV2D1/j5dNIQapAZM1+qFnpBFxZQkgCA==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/credential-provider-imds@4.0.1":
    resolution:
      {
        integrity: sha512-l/qdInaDq1Zpznpmev/+52QomsJNZ3JkTl5yrTl02V6NBgJOQ4LY0SFw/8zsMwj3tLe8vqiIuwF6nxaEwgf6mg==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/eventstream-codec@4.0.1":
    resolution:
      {
        integrity: sha512-Q2bCAAR6zXNVtJgifsU16ZjKGqdw/DyecKNgIgi7dlqw04fqDu0mnq+JmGphqheypVc64CYq3azSuCpAdFk2+A==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/eventstream-serde-browser@4.0.1":
    resolution:
      {
        integrity: sha512-HbIybmz5rhNg+zxKiyVAnvdM3vkzjE6ccrJ620iPL8IXcJEntd3hnBl+ktMwIy12Te/kyrSbUb8UCdnUT4QEdA==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/eventstream-serde-config-resolver@4.0.1":
    resolution:
      {
        integrity: sha512-lSipaiq3rmHguHa3QFF4YcCM3VJOrY9oq2sow3qlhFY+nBSTF/nrO82MUQRPrxHQXA58J5G1UnU2WuJfi465BA==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/eventstream-serde-node@4.0.1":
    resolution:
      {
        integrity: sha512-o4CoOI6oYGYJ4zXo34U8X9szDe3oGjmHgsMGiZM0j4vtNoT+h80TLnkUcrLZR3+E6HIxqW+G+9WHAVfl0GXK0Q==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/eventstream-serde-universal@4.0.1":
    resolution:
      {
        integrity: sha512-Z94uZp0tGJuxds3iEAZBqGU2QiaBHP4YytLUjwZWx+oUeohCsLyUm33yp4MMBmhkuPqSbQCXq5hDet6JGUgHWA==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/fetch-http-handler@5.0.1":
    resolution:
      {
        integrity: sha512-3aS+fP28urrMW2KTjb6z9iFow6jO8n3MFfineGbndvzGZit3taZhKWtTorf+Gp5RpFDDafeHlhfsGlDCXvUnJA==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/hash-blob-browser@4.0.1":
    resolution:
      {
        integrity: sha512-rkFIrQOKZGS6i1D3gKJ8skJ0RlXqDvb1IyAphksaFOMzkn3v3I1eJ8m7OkLj0jf1McP63rcCEoLlkAn/HjcTRw==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/hash-node@4.0.1":
    resolution:
      {
        integrity: sha512-TJ6oZS+3r2Xu4emVse1YPB3Dq3d8RkZDKcPr71Nj/lJsdAP1c7oFzYqEn1IBc915TsgLl2xIJNuxCz+gLbLE0w==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/hash-stream-node@4.0.1":
    resolution:
      {
        integrity: sha512-U1rAE1fxmReCIr6D2o/4ROqAQX+GffZpyMt3d7njtGDr2pUNmAKRWa49gsNVhCh2vVAuf3wXzWwNr2YN8PAXIw==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/invalid-dependency@4.0.1":
    resolution:
      {
        integrity: sha512-gdudFPf4QRQ5pzj7HEnu6FhKRi61BfH/Gk5Yf6O0KiSbr1LlVhgjThcvjdu658VE6Nve8vaIWB8/fodmS1rBPQ==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/is-array-buffer@2.2.0":
    resolution:
      {
        integrity: sha512-GGP3O9QFD24uGeAXYUjwSTXARoqpZykHadOmA8G5vfJPK0/DC67qa//0qvqrJzL1xc8WQWX7/yc7fwudjPHPhA==,
      }
    engines: { node: ">=14.0.0" }

  "@smithy/is-array-buffer@4.0.0":
    resolution:
      {
        integrity: sha512-saYhF8ZZNoJDTvJBEWgeBccCg+yvp1CX+ed12yORU3NilJScfc6gfch2oVb4QgxZrGUx3/ZJlb+c/dJbyupxlw==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/md5-js@4.0.1":
    resolution:
      {
        integrity: sha512-HLZ647L27APi6zXkZlzSFZIjpo8po45YiyjMGJZM3gyDY8n7dPGdmxIIljLm4gPt/7rRvutLTTkYJpZVfG5r+A==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/middleware-content-length@4.0.1":
    resolution:
      {
        integrity: sha512-OGXo7w5EkB5pPiac7KNzVtfCW2vKBTZNuCctn++TTSOMpe6RZO/n6WEC1AxJINn3+vWLKW49uad3lo/u0WJ9oQ==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/middleware-endpoint@4.0.6":
    resolution:
      {
        integrity: sha512-ftpmkTHIFqgaFugcjzLZv3kzPEFsBFSnq1JsIkr2mwFzCraZVhQk2gqN51OOeRxqhbPTkRFj39Qd2V91E/mQxg==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/middleware-retry@4.0.7":
    resolution:
      {
        integrity: sha512-58j9XbUPLkqAcV1kHzVX/kAR16GT+j7DUZJqwzsxh1jtz7G82caZiGyyFgUvogVfNTg3TeAOIJepGc8TXF4AVQ==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/middleware-serde@4.0.2":
    resolution:
      {
        integrity: sha512-Sdr5lOagCn5tt+zKsaW+U2/iwr6bI9p08wOkCp6/eL6iMbgdtc2R5Ety66rf87PeohR0ExI84Txz9GYv5ou3iQ==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/middleware-stack@4.0.1":
    resolution:
      {
        integrity: sha512-dHwDmrtR/ln8UTHpaIavRSzeIk5+YZTBtLnKwDW3G2t6nAupCiQUvNzNoHBpik63fwUaJPtlnMzXbQrNFWssIA==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/node-config-provider@4.0.1":
    resolution:
      {
        integrity: sha512-8mRTjvCtVET8+rxvmzRNRR0hH2JjV0DFOmwXPrISmTIJEfnCBugpYYGAsCj8t41qd+RB5gbheSQ/6aKZCQvFLQ==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/node-http-handler@4.0.3":
    resolution:
      {
        integrity: sha512-dYCLeINNbYdvmMLtW0VdhW1biXt+PPCGazzT5ZjKw46mOtdgToQEwjqZSS9/EN8+tNs/RO0cEWG044+YZs97aA==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/property-provider@4.0.1":
    resolution:
      {
        integrity: sha512-o+VRiwC2cgmk/WFV0jaETGOtX16VNPp2bSQEzu0whbReqE1BMqsP2ami2Vi3cbGVdKu1kq9gQkDAGKbt0WOHAQ==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/protocol-http@5.0.1":
    resolution:
      {
        integrity: sha512-TE4cpj49jJNB/oHyh/cRVEgNZaoPaxd4vteJNB0yGidOCVR0jCw/hjPVsT8Q8FRmj8Bd3bFZt8Dh7xGCT+xMBQ==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/querystring-builder@4.0.1":
    resolution:
      {
        integrity: sha512-wU87iWZoCbcqrwszsOewEIuq+SU2mSoBE2CcsLwE0I19m0B2gOJr1MVjxWcDQYOzHbR1xCk7AcOBbGFUYOKvdg==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/querystring-parser@4.0.1":
    resolution:
      {
        integrity: sha512-Ma2XC7VS9aV77+clSFylVUnPZRindhB7BbmYiNOdr+CHt/kZNJoPP0cd3QxCnCFyPXC4eybmyE98phEHkqZ5Jw==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/service-error-classification@4.0.1":
    resolution:
      {
        integrity: sha512-3JNjBfOWpj/mYfjXJHB4Txc/7E4LVq32bwzE7m28GN79+M1f76XHflUaSUkhOriprPDzev9cX/M+dEB80DNDKA==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/shared-ini-file-loader@4.0.1":
    resolution:
      {
        integrity: sha512-hC8F6qTBbuHRI/uqDgqqi6J0R4GtEZcgrZPhFQnMhfJs3MnUTGSnR1NSJCJs5VWlMydu0kJz15M640fJlRsIOw==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/signature-v4@5.0.1":
    resolution:
      {
        integrity: sha512-nCe6fQ+ppm1bQuw5iKoeJ0MJfz2os7Ic3GBjOkLOPtavbD1ONoyE3ygjBfz2ythFWm4YnRm6OxW+8p/m9uCoIA==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/smithy-client@4.1.6":
    resolution:
      {
        integrity: sha512-UYDolNg6h2O0L+cJjtgSyKKvEKCOa/8FHYJnBobyeoeWDmNpXjwOAtw16ezyeu1ETuuLEOZbrynK0ZY1Lx9Jbw==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/types@4.1.0":
    resolution:
      {
        integrity: sha512-enhjdwp4D7CXmwLtD6zbcDMbo6/T6WtuuKCY49Xxc6OMOmUWlBEBDREsxxgV2LIdeQPW756+f97GzcgAwp3iLw==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/url-parser@4.0.1":
    resolution:
      {
        integrity: sha512-gPXcIEUtw7VlK8f/QcruNXm7q+T5hhvGu9tl63LsJPZ27exB6dtNwvh2HIi0v7JcXJ5emBxB+CJxwaLEdJfA+g==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/util-base64@4.0.0":
    resolution:
      {
        integrity: sha512-CvHfCmO2mchox9kjrtzoHkWHxjHZzaFojLc8quxXY7WAAMAg43nuxwv95tATVgQFNDwd4M9S1qFzj40Ul41Kmg==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/util-body-length-browser@4.0.0":
    resolution:
      {
        integrity: sha512-sNi3DL0/k64/LO3A256M+m3CDdG6V7WKWHdAiBBMUN8S3hK3aMPhwnPik2A/a2ONN+9doY9UxaLfgqsIRg69QA==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/util-body-length-node@4.0.0":
    resolution:
      {
        integrity: sha512-q0iDP3VsZzqJyje8xJWEJCNIu3lktUGVoSy1KB0UWym2CL1siV3artm+u1DFYTLejpsrdGyCSWBdGNjJzfDPjg==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/util-buffer-from@2.2.0":
    resolution:
      {
        integrity: sha512-IJdWBbTcMQ6DA0gdNhh/BwrLkDR+ADW5Kr1aZmd4k3DIF6ezMV4R2NIAmT08wQJ3yUK82thHWmC/TnK/wpMMIA==,
      }
    engines: { node: ">=14.0.0" }

  "@smithy/util-buffer-from@4.0.0":
    resolution:
      {
        integrity: sha512-9TOQ7781sZvddgO8nxueKi3+yGvkY35kotA0Y6BWRajAv8jjmigQ1sBwz0UX47pQMYXJPahSKEKYFgt+rXdcug==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/util-config-provider@4.0.0":
    resolution:
      {
        integrity: sha512-L1RBVzLyfE8OXH+1hsJ8p+acNUSirQnWQ6/EgpchV88G6zGBTDPdXiiExei6Z1wR2RxYvxY/XLw6AMNCCt8H3w==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/util-defaults-mode-browser@4.0.7":
    resolution:
      {
        integrity: sha512-CZgDDrYHLv0RUElOsmZtAnp1pIjwDVCSuZWOPhIOBvG36RDfX1Q9+6lS61xBf+qqvHoqRjHxgINeQz47cYFC2Q==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/util-defaults-mode-node@4.0.7":
    resolution:
      {
        integrity: sha512-79fQW3hnfCdrfIi1soPbK3zmooRFnLpSx3Vxi6nUlqaaQeC5dm8plt4OTNDNqEEEDkvKghZSaoti684dQFVrGQ==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/util-endpoints@3.0.1":
    resolution:
      {
        integrity: sha512-zVdUENQpdtn9jbpD9SCFK4+aSiavRb9BxEtw9ZGUR1TYo6bBHbIoi7VkrFQ0/RwZlzx0wRBaRmPclj8iAoJCLA==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/util-hex-encoding@4.0.0":
    resolution:
      {
        integrity: sha512-Yk5mLhHtfIgW2W2WQZWSg5kuMZCVbvhFmC7rV4IO2QqnZdbEFPmQnCcGMAX2z/8Qj3B9hYYNjZOhWym+RwhePw==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/util-middleware@4.0.1":
    resolution:
      {
        integrity: sha512-HiLAvlcqhbzhuiOa0Lyct5IIlyIz0PQO5dnMlmQ/ubYM46dPInB+3yQGkfxsk6Q24Y0n3/JmcA1v5iEhmOF5mA==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/util-retry@4.0.1":
    resolution:
      {
        integrity: sha512-WmRHqNVwn3kI3rKk1LsKcVgPBG6iLTBGC1iYOV3GQegwJ3E8yjzHytPt26VNzOWr1qu0xE03nK0Ug8S7T7oufw==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/util-stream@4.1.2":
    resolution:
      {
        integrity: sha512-44PKEqQ303d3rlQuiDpcCcu//hV8sn+u2JBo84dWCE0rvgeiVl0IlLMagbU++o0jCWhYCsHaAt9wZuZqNe05Hw==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/util-uri-escape@4.0.0":
    resolution:
      {
        integrity: sha512-77yfbCbQMtgtTylO9itEAdpPXSog3ZxMe09AEhm0dU0NLTalV70ghDZFR+Nfi1C60jnJoh/Re4090/DuZh2Omg==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/util-utf8@2.3.0":
    resolution:
      {
        integrity: sha512-R8Rdn8Hy72KKcebgLiv8jQcQkXoLMOGGv5uI1/k0l+snqkOzQ1R0ChUBCxWMlBsFMekWjq0wRudIweFs7sKT5A==,
      }
    engines: { node: ">=14.0.0" }

  "@smithy/util-utf8@4.0.0":
    resolution:
      {
        integrity: sha512-b+zebfKCfRdgNJDknHCob3O7FpeYQN6ZG6YLExMcasDHsCXlsXCEuiPZeLnJLpwa5dvPetGlnGCiMHuLwGvFow==,
      }
    engines: { node: ">=18.0.0" }

  "@smithy/util-waiter@4.0.2":
    resolution:
      {
        integrity: sha512-piUTHyp2Axx3p/kc2CIJkYSv0BAaheBQmbACZgQSSfWUumWNW+R1lL+H9PDBxKJkvOeEX+hKYEFiwO8xagL8AQ==,
      }
    engines: { node: ">=18.0.0" }

  "@swc/counter@0.1.3":
    resolution:
      {
        integrity: sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==,
      }

  "@swc/helpers@0.5.15":
    resolution:
      {
        integrity: sha512-JQ5TuMi45Owi4/BIMAJBoSQoOJu12oOk/gADqlcUL9JEdHB8vyjUSsxqeNXnmXHjYKMi2WcYtezGEEhqUI/E2g==,
      }

  "@tailwindcss/node@4.0.9":
    resolution:
      {
        integrity: sha512-tOJvdI7XfJbARYhxX+0RArAhmuDcczTC46DGCEziqxzzbIaPnfYaIyRT31n4u8lROrsO7Q6u/K9bmQHL2uL1bQ==,
      }

  "@tailwindcss/oxide-android-arm64@4.0.9":
    resolution:
      {
        integrity: sha512-YBgy6+2flE/8dbtrdotVInhMVIxnHJPbAwa7U1gX4l2ThUIaPUp18LjB9wEH8wAGMBZUb//SzLtdXXNBHPUl6Q==,
      }
    engines: { node: ">= 10" }
    cpu: [arm64]
    os: [android]

  "@tailwindcss/oxide-darwin-arm64@4.0.9":
    resolution:
      {
        integrity: sha512-pWdl4J2dIHXALgy2jVkwKBmtEb73kqIfMpYmcgESr7oPQ+lbcQ4+tlPeVXaSAmang+vglAfFpXQCOvs/aGSqlw==,
      }
    engines: { node: ">= 10" }
    cpu: [arm64]
    os: [darwin]

  "@tailwindcss/oxide-darwin-x64@4.0.9":
    resolution:
      {
        integrity: sha512-4Dq3lKp0/C7vrRSkNPtBGVebEyWt9QPPlQctxJ0H3MDyiQYvzVYf8jKow7h5QkWNe8hbatEqljMj/Y0M+ERYJg==,
      }
    engines: { node: ">= 10" }
    cpu: [x64]
    os: [darwin]

  "@tailwindcss/oxide-freebsd-x64@4.0.9":
    resolution:
      {
        integrity: sha512-k7U1RwRODta8x0uealtVt3RoWAWqA+D5FAOsvVGpYoI6ObgmnzqWW6pnVwz70tL8UZ/QXjeMyiICXyjzB6OGtQ==,
      }
    engines: { node: ">= 10" }
    cpu: [x64]
    os: [freebsd]

  "@tailwindcss/oxide-linux-arm-gnueabihf@4.0.9":
    resolution:
      {
        integrity: sha512-NDDjVweHz2zo4j+oS8y3KwKL5wGCZoXGA9ruJM982uVJLdsF8/1AeKvUwKRlMBpxHt1EdWJSAh8a0Mfhl28GlQ==,
      }
    engines: { node: ">= 10" }
    cpu: [arm]
    os: [linux]

  "@tailwindcss/oxide-linux-arm64-gnu@4.0.9":
    resolution:
      {
        integrity: sha512-jk90UZ0jzJl3Dy1BhuFfRZ2KP9wVKMXPjmCtY4U6fF2LvrjP5gWFJj5VHzfzHonJexjrGe1lMzgtjriuZkxagg==,
      }
    engines: { node: ">= 10" }
    cpu: [arm64]
    os: [linux]

  "@tailwindcss/oxide-linux-arm64-musl@4.0.9":
    resolution:
      {
        integrity: sha512-3eMjyTC6HBxh9nRgOHzrc96PYh1/jWOwHZ3Kk0JN0Kl25BJ80Lj9HEvvwVDNTgPg154LdICwuFLuhfgH9DULmg==,
      }
    engines: { node: ">= 10" }
    cpu: [arm64]
    os: [linux]

  "@tailwindcss/oxide-linux-x64-gnu@4.0.9":
    resolution:
      {
        integrity: sha512-v0D8WqI/c3WpWH1kq/HP0J899ATLdGZmENa2/emmNjubT0sWtEke9W9+wXeEoACuGAhF9i3PO5MeyditpDCiWQ==,
      }
    engines: { node: ">= 10" }
    cpu: [x64]
    os: [linux]

  "@tailwindcss/oxide-linux-x64-musl@4.0.9":
    resolution:
      {
        integrity: sha512-Kvp0TCkfeXyeehqLJr7otsc4hd/BUPfcIGrQiwsTVCfaMfjQZCG7DjI+9/QqPZha8YapLA9UoIcUILRYO7NE1Q==,
      }
    engines: { node: ">= 10" }
    cpu: [x64]
    os: [linux]

  "@tailwindcss/oxide-win32-arm64-msvc@4.0.9":
    resolution:
      {
        integrity: sha512-m3+60T/7YvWekajNq/eexjhV8z10rswcz4BC9bioJ7YaN+7K8W2AmLmG0B79H14m6UHE571qB0XsPus4n0QVgQ==,
      }
    engines: { node: ">= 10" }
    cpu: [arm64]
    os: [win32]

  "@tailwindcss/oxide-win32-x64-msvc@4.0.9":
    resolution:
      {
        integrity: sha512-dpc05mSlqkwVNOUjGu/ZXd5U1XNch1kHFJ4/cHkZFvaW1RzbHmRt24gvM8/HC6IirMxNarzVw4IXVtvrOoZtxA==,
      }
    engines: { node: ">= 10" }
    cpu: [x64]
    os: [win32]

  "@tailwindcss/oxide@4.0.9":
    resolution:
      {
        integrity: sha512-eLizHmXFqHswJONwfqi/WZjtmWZpIalpvMlNhTM99/bkHtUs6IqgI1XQ0/W5eO2HiRQcIlXUogI2ycvKhVLNcA==,
      }
    engines: { node: ">= 10" }

  "@tailwindcss/postcss@4.0.9":
    resolution:
      {
        integrity: sha512-BT/E+pdMqulavEAVM5NCpxmGEwHiLDPpkmg/c/X25ZBW+izTe+aZ+v1gf/HXTrihRoCxrUp5U4YyHsBTzspQKQ==,
      }

  "@tanstack/query-core@5.67.1":
    resolution:
      {
        integrity: sha512-AkFmuukVejyqVIjEQoFhLb3q+xHl7JG8G9cANWTMe3s8iKzD9j1VBSYXgCjy6vm6xM8cUCR9zP2yqWxY9pTWOA==,
      }

  "@tanstack/react-query@5.67.1":
    resolution:
      {
        integrity: sha512-fH5u4JLwB6A+wLFdi8wWBWAYoJV5deYif2OveJ26ktAWjU499uvVFS1wPWnyEyq5LvZX1MZInvv9QRaIZANRaQ==,
      }
    peerDependencies:
      react: ^18 || ^19

  "@types/formidable@3.4.5":
    resolution:
      {
        integrity: sha512-s7YPsNVfnsng5L8sKnG/Gbb2tiwwJTY1conOkJzTMRvJAlLFW1nEua+ADsJQu8N1c0oTHx9+d5nqg10WuT9gHQ==,
      }

  "@types/node@20.17.19":
    resolution:
      {
        integrity: sha512-LEwC7o1ifqg/6r2gn9Dns0f1rhK+fPFDoMiceTJ6kWmVk6bgXBI/9IOWfVan4WiAavK9pIVWdX0/e3J+eEUh5A==,
      }

  "@types/react-dom@19.0.4":
    resolution:
      {
        integrity: sha512-4fSQ8vWFkg+TGhePfUzVmat3eC14TXYSsiiDSLI0dVLsrm9gZFABjPy/Qu6TKgl1tq1Bu1yDsuQgY3A3DOjCcg==,
      }
    peerDependencies:
      "@types/react": ^19.0.0

  "@types/react@19.0.10":
    resolution:
      {
        integrity: sha512-JuRQ9KXLEjaUNjTWpzuR231Z2WpIwczOkBEIvbHNCzQefFIT0L8IqE6NV6ULLyC1SI/i234JnDoMkfg+RjQj2g==,
      }

  asap@2.0.6:
    resolution:
      {
        integrity: sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==,
      }

  bowser@2.11.0:
    resolution:
      {
        integrity: sha512-AlcaJBi/pqqJBIQ8U9Mcpc9i8Aqxn88Skv5d+xBX006BY5u8N3mGLHa5Lgppa7L/HfwgwLgZ6NYs+Ag6uUmJRA==,
      }

  buffer-from@1.1.2:
    resolution:
      {
        integrity: sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==,
      }

  busboy@1.6.0:
    resolution:
      {
        integrity: sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==,
      }
    engines: { node: ">=10.16.0" }

  caniuse-lite@1.0.30001701:
    resolution:
      {
        integrity: sha512-faRs/AW3jA9nTwmJBSO1PQ6L/EOgsB5HMQQq4iCu5zhPgVVgO/pZRHlmatwijZKetFw8/Pr4q6dEN8sJuq8qTw==,
      }

  client-only@0.0.1:
    resolution:
      {
        integrity: sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==,
      }

  color-convert@2.0.1:
    resolution:
      {
        integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==,
      }
    engines: { node: ">=7.0.0" }

  color-name@1.1.4:
    resolution:
      {
        integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==,
      }

  color-string@1.9.1:
    resolution:
      {
        integrity: sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==,
      }

  color@4.2.3:
    resolution:
      {
        integrity: sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==,
      }
    engines: { node: ">=12.5.0" }

  cookie@0.7.2:
    resolution:
      {
        integrity: sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==,
      }
    engines: { node: ">= 0.6" }

  csstype@3.1.3:
    resolution:
      {
        integrity: sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==,
      }

  debug@4.4.0:
    resolution:
      {
        integrity: sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==,
      }
    engines: { node: ">=6.0" }
    peerDependencies:
      supports-color: "*"
    peerDependenciesMeta:
      supports-color:
        optional: true

  detect-libc@1.0.3:
    resolution:
      {
        integrity: sha512-pGjwhsmsp4kL2RTz08wcOlGN83otlqHeD/Z5T8GXZB+/YcpQ/dgo+lbU8ZsGxV0HIvqqxo9l7mqYwyYMD9bKDg==,
      }
    engines: { node: ">=0.10" }
    hasBin: true

  detect-libc@2.0.3:
    resolution:
      {
        integrity: sha512-bwy0MGW55bG41VqxxypOsdSdGqLwXPI/focwgTYCFMbdUiBAxLg9CFzG08sz2aqzknwiX7Hkl0bQENjg8iLByw==,
      }
    engines: { node: ">=8" }

  dezalgo@1.0.4:
    resolution:
      {
        integrity: sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==,
      }

  drizzle-kit@0.30.5:
    resolution:
      {
        integrity: sha512-l6dMSE100u7sDaTbLczibrQZjA35jLsHNqIV+jmhNVO3O8jzM6kywMOmV9uOz9ZVSCMPQhAZEFjL/qDPVrqpUA==,
      }
    hasBin: true

  drizzle-orm@0.40.0:
    resolution:
      {
        integrity: sha512-7ptk/HQiMSrEZHnAsSlBESXWj52VwgMmyTEfoNmpNN2ZXpcz13LwHfXTIghsAEud7Z5UJhDOp8U07ujcqme7wg==,
      }
    peerDependencies:
      "@aws-sdk/client-rds-data": ">=3"
      "@cloudflare/workers-types": ">=4"
      "@electric-sql/pglite": ">=0.2.0"
      "@libsql/client": ">=0.10.0"
      "@libsql/client-wasm": ">=0.10.0"
      "@neondatabase/serverless": ">=0.10.0"
      "@op-engineering/op-sqlite": ">=2"
      "@opentelemetry/api": ^1.4.1
      "@planetscale/database": ">=1"
      "@prisma/client": "*"
      "@tidbcloud/serverless": "*"
      "@types/better-sqlite3": "*"
      "@types/pg": "*"
      "@types/sql.js": "*"
      "@vercel/postgres": ">=0.8.0"
      "@xata.io/client": "*"
      better-sqlite3: ">=7"
      bun-types: "*"
      expo-sqlite: ">=14.0.0"
      gel: ">=2"
      knex: "*"
      kysely: "*"
      mysql2: ">=2"
      pg: ">=8"
      postgres: ">=3"
      prisma: "*"
      sql.js: ">=1"
      sqlite3: ">=5"
    peerDependenciesMeta:
      "@aws-sdk/client-rds-data":
        optional: true
      "@cloudflare/workers-types":
        optional: true
      "@electric-sql/pglite":
        optional: true
      "@libsql/client":
        optional: true
      "@libsql/client-wasm":
        optional: true
      "@neondatabase/serverless":
        optional: true
      "@op-engineering/op-sqlite":
        optional: true
      "@opentelemetry/api":
        optional: true
      "@planetscale/database":
        optional: true
      "@prisma/client":
        optional: true
      "@tidbcloud/serverless":
        optional: true
      "@types/better-sqlite3":
        optional: true
      "@types/pg":
        optional: true
      "@types/sql.js":
        optional: true
      "@vercel/postgres":
        optional: true
      "@xata.io/client":
        optional: true
      better-sqlite3:
        optional: true
      bun-types:
        optional: true
      expo-sqlite:
        optional: true
      gel:
        optional: true
      knex:
        optional: true
      kysely:
        optional: true
      mysql2:
        optional: true
      pg:
        optional: true
      postgres:
        optional: true
      prisma:
        optional: true
      sql.js:
        optional: true
      sqlite3:
        optional: true

  enhanced-resolve@5.18.1:
    resolution:
      {
        integrity: sha512-ZSW3ma5GkcQBIpwZTSRAI8N71Uuwgs93IezB7mf7R60tC8ZbJideoDNKjHn2O9KIlx6rkGTTEk1xUCK2E1Y2Yg==,
      }
    engines: { node: ">=10.13.0" }

  env-paths@3.0.0:
    resolution:
      {
        integrity: sha512-dtJUTepzMW3Lm/NPxRf3wP4642UWhjL2sQxc+ym2YMj1m/H2zDNQOlezafzkHwn6sMstjHTwG6iQQsctDW/b1A==,
      }
    engines: { node: ^12.20.0 || ^14.13.1 || >=16.0.0 }

  esbuild-register@3.6.0:
    resolution:
      {
        integrity: sha512-H2/S7Pm8a9CL1uhp9OvjwrBh5Pvx0H8qVOxNu8Wed9Y7qv56MPtq+GGM8RJpq6glYJn9Wspr8uw7l55uyinNeg==,
      }
    peerDependencies:
      esbuild: ">=0.12 <1"

  esbuild@0.18.20:
    resolution:
      {
        integrity: sha512-ceqxoedUrcayh7Y7ZX6NdbbDzGROiyVBgC4PriJThBKSVPWnnFHZAkfI1lJT8QFkOwH4qOS2SJkS4wvpGl8BpA==,
      }
    engines: { node: ">=12" }
    hasBin: true

  esbuild@0.19.12:
    resolution:
      {
        integrity: sha512-aARqgq8roFBj054KvQr5f1sFu0D65G+miZRCuJyJ0G13Zwx7vRar5Zhn2tkQNzIXcBrNVsv/8stehpj+GAjgbg==,
      }
    engines: { node: ">=12" }
    hasBin: true

  fast-xml-parser@4.4.1:
    resolution:
      {
        integrity: sha512-xkjOecfnKGkSsOwtZ5Pz7Us/T6mrbPQrq0nh+aCO5V9nk5NLWmasAHumTKjiPJPWANe+kAZ84Jc8ooJkzZ88Sw==,
      }
    hasBin: true

  formidable@3.5.2:
    resolution:
      {
        integrity: sha512-Jqc1btCy3QzRbJaICGwKcBfGWuLADRerLzDqi2NwSt/UkXLsHJw2TVResiaoBufHVHy9aSgClOHCeJsSsFLTbg==,
      }

  gel@2.0.0:
    resolution:
      {
        integrity: sha512-Oq3Fjay71s00xzDc0BF/mpcLmnA+uRqMEJK8p5K4PaZjUEsxaeo+kR9OHBVAf289/qPd+0OcLOLUN0UhqiUCog==,
      }
    engines: { node: ">= 18.0.0" }
    hasBin: true

  get-tsconfig@4.10.0:
    resolution:
      {
        integrity: sha512-kGzZ3LWWQcGIAmg6iWvXn0ei6WDtV26wzHRMwDSzmAbcXrTEXxHy6IehI6/4eT6VRKyMP1eF1VqwrVUmE/LR7A==,
      }

  graceful-fs@4.2.11:
    resolution:
      {
        integrity: sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==,
      }

  hexoid@2.0.0:
    resolution:
      {
        integrity: sha512-qlspKUK7IlSQv2o+5I7yhUd7TxlOG2Vr5LTa3ve2XSNVKAL/n/u/7KLvKmFNimomDIKvZFXWHv0T12mv7rT8Aw==,
      }
    engines: { node: ">=8" }

  is-arrayish@0.3.2:
    resolution:
      {
        integrity: sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==,
      }

  isexe@3.1.1:
    resolution:
      {
        integrity: sha512-LpB/54B+/2J5hqQ7imZHfdU31OlgQqx7ZicVlkm9kzg9/w8GKLEcFfJl/t7DCEDueOyBAD6zCCwTO6Fzs0NoEQ==,
      }
    engines: { node: ">=16" }

  jiti@2.4.2:
    resolution:
      {
        integrity: sha512-rg9zJN+G4n2nfJl5MW3BMygZX56zKPNVEYYqq7adpmMh4Jn2QNEwhvQlFy6jPVdcod7txZtKHWnyZiA3a0zP7A==,
      }
    hasBin: true

  jose@4.15.9:
    resolution:
      {
        integrity: sha512-1vUQX+IdDMVPj4k8kOxgUqlcK518yluMuGZwqlr44FS1ppZB/5GWh4rZG89erpOBOJjU/OBsnCVFfapsRz6nEA==,
      }

  jose@6.0.8:
    resolution:
      {
        integrity: sha512-EyUPtOKyTYq+iMOszO42eobQllaIjJnwkZ2U93aJzNyPibCy7CEvT9UQnaCVB51IAd49gbNdCew1c0LcLTCB2g==,
      }

  lightningcss-darwin-arm64@1.29.1:
    resolution:
      {
        integrity: sha512-HtR5XJ5A0lvCqYAoSv2QdZZyoHNttBpa5EP9aNuzBQeKGfbyH5+UipLWvVzpP4Uml5ej4BYs5I9Lco9u1fECqw==,
      }
    engines: { node: ">= 12.0.0" }
    cpu: [arm64]
    os: [darwin]

  lightningcss-darwin-x64@1.29.1:
    resolution:
      {
        integrity: sha512-k33G9IzKUpHy/J/3+9MCO4e+PzaFblsgBjSGlpAaFikeBFm8B/CkO3cKU9oI4g+fjS2KlkLM/Bza9K/aw8wsNA==,
      }
    engines: { node: ">= 12.0.0" }
    cpu: [x64]
    os: [darwin]

  lightningcss-freebsd-x64@1.29.1:
    resolution:
      {
        integrity: sha512-0SUW22fv/8kln2LnIdOCmSuXnxgxVC276W5KLTwoehiO0hxkacBxjHOL5EtHD8BAXg2BvuhsJPmVMasvby3LiQ==,
      }
    engines: { node: ">= 12.0.0" }
    cpu: [x64]
    os: [freebsd]

  lightningcss-linux-arm-gnueabihf@1.29.1:
    resolution:
      {
        integrity: sha512-sD32pFvlR0kDlqsOZmYqH/68SqUMPNj+0pucGxToXZi4XZgZmqeX/NkxNKCPsswAXU3UeYgDSpGhu05eAufjDg==,
      }
    engines: { node: ">= 12.0.0" }
    cpu: [arm]
    os: [linux]

  lightningcss-linux-arm64-gnu@1.29.1:
    resolution:
      {
        integrity: sha512-0+vClRIZ6mmJl/dxGuRsE197o1HDEeeRk6nzycSy2GofC2JsY4ifCRnvUWf/CUBQmlrvMzt6SMQNMSEu22csWQ==,
      }
    engines: { node: ">= 12.0.0" }
    cpu: [arm64]
    os: [linux]

  lightningcss-linux-arm64-musl@1.29.1:
    resolution:
      {
        integrity: sha512-UKMFrG4rL/uHNgelBsDwJcBqVpzNJbzsKkbI3Ja5fg00sgQnHw/VrzUTEc4jhZ+AN2BvQYz/tkHu4vt1kLuJyw==,
      }
    engines: { node: ">= 12.0.0" }
    cpu: [arm64]
    os: [linux]

  lightningcss-linux-x64-gnu@1.29.1:
    resolution:
      {
        integrity: sha512-u1S+xdODy/eEtjADqirA774y3jLcm8RPtYztwReEXoZKdzgsHYPl0s5V52Tst+GKzqjebkULT86XMSxejzfISw==,
      }
    engines: { node: ">= 12.0.0" }
    cpu: [x64]
    os: [linux]

  lightningcss-linux-x64-musl@1.29.1:
    resolution:
      {
        integrity: sha512-L0Tx0DtaNUTzXv0lbGCLB/c/qEADanHbu4QdcNOXLIe1i8i22rZRpbT3gpWYsCh9aSL9zFujY/WmEXIatWvXbw==,
      }
    engines: { node: ">= 12.0.0" }
    cpu: [x64]
    os: [linux]

  lightningcss-win32-arm64-msvc@1.29.1:
    resolution:
      {
        integrity: sha512-QoOVnkIEFfbW4xPi+dpdft/zAKmgLgsRHfJalEPYuJDOWf7cLQzYg0DEh8/sn737FaeMJxHZRc1oBreiwZCjog==,
      }
    engines: { node: ">= 12.0.0" }
    cpu: [arm64]
    os: [win32]

  lightningcss-win32-x64-msvc@1.29.1:
    resolution:
      {
        integrity: sha512-NygcbThNBe4JElP+olyTI/doBNGJvLs3bFCRPdvuCcxZCcCZ71B858IHpdm7L1btZex0FvCmM17FK98Y9MRy1Q==,
      }
    engines: { node: ">= 12.0.0" }
    cpu: [x64]
    os: [win32]

  lightningcss@1.29.1:
    resolution:
      {
        integrity: sha512-FmGoeD4S05ewj+AkhTY+D+myDvXI6eL27FjHIjoyUkO/uw7WZD1fBVs0QxeYWa7E17CUHJaYX/RUGISCtcrG4Q==,
      }
    engines: { node: ">= 12.0.0" }

  lru-cache@6.0.0:
    resolution:
      {
        integrity: sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==,
      }
    engines: { node: ">=10" }

  ms@2.1.3:
    resolution:
      {
        integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==,
      }

  nanoid@3.3.8:
    resolution:
      {
        integrity: sha512-WNLf5Sd8oZxOm+TzppcYk8gVOgP+l58xNy58D0nbUnOxOWRWvlcCV4kUF7ltmI6PsrLl/BgKEyS4mqsGChFN0w==,
      }
    engines: { node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1 }
    hasBin: true

  next-auth@4.24.11:
    resolution:
      {
        integrity: sha512-pCFXzIDQX7xmHFs4KVH4luCjaCbuPRtZ9oBUjUhOk84mZ9WVPf94n87TxYI4rSRf9HmfHEF8Yep3JrYDVOo3Cw==,
      }
    peerDependencies:
      "@auth/core": 0.34.2
      next: ^12.2.5 || ^13 || ^14 || ^15
      nodemailer: ^6.6.5
      react: ^17.0.2 || ^18 || ^19
      react-dom: ^17.0.2 || ^18 || ^19
    peerDependenciesMeta:
      "@auth/core":
        optional: true
      nodemailer:
        optional: true

  next@15.2.0:
    resolution:
      {
        integrity: sha512-VaiM7sZYX8KIAHBrRGSFytKknkrexNfGb8GlG6e93JqueCspuGte8i4ybn8z4ww1x3f2uzY4YpTaBEW4/hvsoQ==,
      }
    engines: { node: ^18.18.0 || ^19.8.0 || >= 20.0.0 }
    hasBin: true
    peerDependencies:
      "@opentelemetry/api": ^1.1.0
      "@playwright/test": ^1.41.2
      babel-plugin-react-compiler: "*"
      react: ^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0
      react-dom: ^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0
      sass: ^1.3.0
    peerDependenciesMeta:
      "@opentelemetry/api":
        optional: true
      "@playwright/test":
        optional: true
      babel-plugin-react-compiler:
        optional: true
      sass:
        optional: true

  oauth4webapi@3.3.0:
    resolution:
      {
        integrity: sha512-ZlozhPlFfobzh3hB72gnBFLjXpugl/dljz1fJSRdqaV2r3D5dmi5lg2QWI0LmUYuazmE+b5exsloEv6toUtw9g==,
      }

  oauth@0.9.15:
    resolution:
      {
        integrity: sha512-a5ERWK1kh38ExDEfoO6qUHJb32rd7aYmPHuyCu3Fta/cnICvYmgd2uhuKXvPD+PXB+gCEYYEaQdIRAjCOwAKNA==,
      }

  object-hash@2.2.0:
    resolution:
      {
        integrity: sha512-gScRMn0bS5fH+IuwyIFgnh9zBdo4DV+6GhygmWM9HyNJSgS0hScp1f5vjtm7oIIOiT9trXrShAkLFSc2IqKNgw==,
      }
    engines: { node: ">= 6" }

  oidc-token-hash@5.1.0:
    resolution:
      {
        integrity: sha512-y0W+X7Ppo7oZX6eovsRkuzcSM40Bicg2JEJkDJ4irIt1wsYAP5MLSNv+QAogO8xivMffw/9OvV3um1pxXgt1uA==,
      }
    engines: { node: ^10.13.0 || >=12.0.0 }

  once@1.4.0:
    resolution:
      {
        integrity: sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==,
      }

  openid-client@5.7.1:
    resolution:
      {
        integrity: sha512-jDBPgSVfTnkIh71Hg9pRvtJc6wTwqjRkN88+gCFtYWrlP4Yx2Dsrow8uPi3qLr/aeymPF3o2+dS+wOpglK04ew==,
      }

  picocolors@1.1.1:
    resolution:
      {
        integrity: sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==,
      }

  postcss@8.4.31:
    resolution:
      {
        integrity: sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==,
      }
    engines: { node: ^10 || ^12 || >=14 }

  postcss@8.5.3:
    resolution:
      {
        integrity: sha512-dle9A3yYxlBSrt8Fu+IpjGT8SY8hN0mlaA6GY8t0P5PjIOZemULz/E2Bnm/2dcUOena75OTNkHI76uZBNUUq3A==,
      }
    engines: { node: ^10 || ^12 || >=14 }

  postgres@3.4.5:
    resolution:
      {
        integrity: sha512-cDWgoah1Gez9rN3H4165peY9qfpEo+SA61oQv65O3cRUE1pOEoJWwddwcqKE8XZYjbblOJlYDlLV4h67HrEVDg==,
      }
    engines: { node: ">=12" }

  preact-render-to-string@5.2.6:
    resolution:
      {
        integrity: sha512-JyhErpYOvBV1hEPwIxc/fHWXPfnEGdRKxc8gFdAZ7XV4tlzyzG847XAyEZqoDnynP88akM4eaHcSOzNcLWFguw==,
      }
    peerDependencies:
      preact: ">=10"

  preact-render-to-string@6.5.11:
    resolution:
      {
        integrity: sha512-ubnauqoGczeGISiOh6RjX0/cdaF8v/oDXIjO85XALCQjwQP+SB4RDXXtvZ6yTYSjG+PC1QRP2AhPgCEsM2EvUw==,
      }
    peerDependencies:
      preact: ">=10"

  preact@10.24.3:
    resolution:
      {
        integrity: sha512-Z2dPnBnMUfyQfSQ+GBdsGa16hz35YmLmtTLhM169uW944hYL6xzTYkJjC07j+Wosz733pMWx0fgON3JNw1jJQA==,
      }

  preact@10.26.3:
    resolution:
      {
        integrity: sha512-OJCfNTdttkOTCbTN+gCnXn/woDqz1dIjvP+gdCoYGP2kKuX6w79FAP8qgY/r7jgAunvqHVVmEOKzKOFWzrXZdw==,
      }

  pretty-format@3.8.0:
    resolution:
      {
        integrity: sha512-WuxUnVtlWL1OfZFQFuqvnvs6MiAGk9UNsBostyBOB0Is9wb5uRESevA6rnl/rkksXaGX3GzZhPup5d6Vp1nFew==,
      }

  react-dom@19.0.0:
    resolution:
      {
        integrity: sha512-4GV5sHFG0e/0AD4X+ySy6UJd3jVl1iNsNHdpad0qhABJ11twS3TTBnseqsKurKcsNqCEFeGL3uLpVChpIO3QfQ==,
      }
    peerDependencies:
      react: ^19.0.0

  react@19.0.0:
    resolution:
      {
        integrity: sha512-V8AVnmPIICiWpGfm6GLzCR/W5FXLchHop40W4nXBmdlEceh16rCN8O8LNWm5bh5XUX91fh7KpA+W0TgMKmgTpQ==,
      }
    engines: { node: ">=0.10.0" }

  regenerator-runtime@0.14.1:
    resolution:
      {
        integrity: sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw==,
      }

  resolve-pkg-maps@1.0.0:
    resolution:
      {
        integrity: sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==,
      }

  scheduler@0.25.0:
    resolution:
      {
        integrity: sha512-xFVuu11jh+xcO7JOAGJNOXld8/TcEHK/4CituBUeUb5hqxJLj9YuemAEuvm9gQ/+pgXYfbQuqAkiYu+u7YEsNA==,
      }

  semver@7.7.1:
    resolution:
      {
        integrity: sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==,
      }
    engines: { node: ">=10" }
    hasBin: true

  server-only@0.0.1:
    resolution:
      {
        integrity: sha512-qepMx2JxAa5jjfzxG79yPPq+8BuFToHd1hm7kI+Z4zAq1ftQiP7HcxMhDDItrbtwVeLg/cY2JnKnrcFkmiswNA==,
      }

  sharp@0.33.5:
    resolution:
      {
        integrity: sha512-haPVm1EkS9pgvHrQ/F3Xy+hgcuMV0Wm9vfIBSiwZ05k+xgb0PkBQpGsAA/oWdDobNaZTH5ppvHtzCFbnSEwHVw==,
      }
    engines: { node: ^18.17.0 || ^20.3.0 || >=21.0.0 }

  shell-quote@1.8.2:
    resolution:
      {
        integrity: sha512-AzqKpGKjrj7EM6rKVQEPpB288oCfnrEIuyoT9cyF4nmGa7V8Zk6f7RRqYisX8X9m+Q7bd632aZW4ky7EhbQztA==,
      }
    engines: { node: ">= 0.4" }

  simple-swizzle@0.2.2:
    resolution:
      {
        integrity: sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==,
      }

  sonner@2.0.1:
    resolution:
      {
        integrity: sha512-FRBphaehZ5tLdLcQ8g2WOIRE+Y7BCfWi5Zyd8bCvBjiW8TxxAyoWZIxS661Yz6TGPqFQ4VLzOF89WEYhfynSFQ==,
      }
    peerDependencies:
      react: ^18.0.0 || ^19.0.0 || ^19.0.0-rc
      react-dom: ^18.0.0 || ^19.0.0 || ^19.0.0-rc

  source-map-js@1.2.1:
    resolution:
      {
        integrity: sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==,
      }
    engines: { node: ">=0.10.0" }

  source-map-support@0.5.21:
    resolution:
      {
        integrity: sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==,
      }

  source-map@0.6.1:
    resolution:
      {
        integrity: sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==,
      }
    engines: { node: ">=0.10.0" }

  streamsearch@1.1.0:
    resolution:
      {
        integrity: sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==,
      }
    engines: { node: ">=10.0.0" }

  strnum@1.1.2:
    resolution:
      {
        integrity: sha512-vrN+B7DBIoTTZjnPNewwhx6cBA/H+IS7rfW68n7XxC1y7uoiGQBxaKzqucGUgavX15dJgiGztLJ8vxuEzwqBdA==,
      }

  styled-jsx@5.1.6:
    resolution:
      {
        integrity: sha512-qSVyDTeMotdvQYoHWLNGwRFJHC+i+ZvdBRYosOFgC+Wg1vx4frN2/RG/NA7SYqqvKNLf39P2LSRA2pu6n0XYZA==,
      }
    engines: { node: ">= 12.0.0" }
    peerDependencies:
      "@babel/core": "*"
      babel-plugin-macros: "*"
      react: ">= 16.8.0 || 17.x.x || ^18.0.0-0 || ^19.0.0-0"
    peerDependenciesMeta:
      "@babel/core":
        optional: true
      babel-plugin-macros:
        optional: true

  tailwindcss@4.0.9:
    resolution:
      {
        integrity: sha512-12laZu+fv1ONDRoNR9ipTOpUD7RN9essRVkX36sjxuRUInpN7hIiHN4lBd/SIFjbISvnXzp8h/hXzmU8SQQYhw==,
      }

  tapable@2.2.1:
    resolution:
      {
        integrity: sha512-GNzQvQTOIP6RyTfE2Qxb8ZVlNmw0n88vp1szwWRimP02mnTsx3Wtn5qRdqY9w2XduFNUgvOwhNnQsjwCp+kqaQ==,
      }
    engines: { node: ">=6" }

  tslib@2.8.1:
    resolution:
      {
        integrity: sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==,
      }

  typescript@5.7.3:
    resolution:
      {
        integrity: sha512-84MVSjMEHP+FQRPy3pX9sTVV/INIex71s9TL2Gm5FG/WG1SqXeKyZ0k7/blY/4FdOzI12CBy1vGc4og/eus0fw==,
      }
    engines: { node: ">=14.17" }
    hasBin: true

  undici-types@6.19.8:
    resolution:
      {
        integrity: sha512-ve2KP6f/JnbPBFyobGHuerC9g1FYGn/F8n1LWTwNxCEzd6IfqTwUQcNXgEtmmQ6DlRrC1hrSrBnCZPokRrDHjw==,
      }

  uuid@8.3.2:
    resolution:
      {
        integrity: sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==,
      }
    hasBin: true

  uuid@9.0.1:
    resolution:
      {
        integrity: sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==,
      }
    hasBin: true

  which@4.0.0:
    resolution:
      {
        integrity: sha512-GlaYyEb07DPxYCKhKzplCWBJtvxZcZMrL+4UkrTSJHHPyZU4mYYTv3qaOe77H7EODLSSopAUFAc6W8U4yqvscg==,
      }
    engines: { node: ^16.13.0 || >=18.0.0 }
    hasBin: true

  wrappy@1.0.2:
    resolution:
      {
        integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==,
      }

  yallist@4.0.0:
    resolution:
      {
        integrity: sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==,
      }

snapshots:
  "@alloc/quick-lru@5.2.0": {}

  "@auth/core@0.38.0":
    dependencies:
      "@panva/hkdf": 1.2.1
      jose: 6.0.8
      oauth4webapi: 3.3.0
      preact: 10.24.3
      preact-render-to-string: 6.5.11(preact@10.24.3)

  "@auth/drizzle-adapter@1.8.0":
    dependencies:
      "@auth/core": 0.38.0
    transitivePeerDependencies:
      - "@simplewebauthn/browser"
      - "@simplewebauthn/server"
      - nodemailer

  "@aws-crypto/crc32@5.2.0":
    dependencies:
      "@aws-crypto/util": 5.2.0
      "@aws-sdk/types": 3.734.0
      tslib: 2.8.1

  "@aws-crypto/crc32c@5.2.0":
    dependencies:
      "@aws-crypto/util": 5.2.0
      "@aws-sdk/types": 3.734.0
      tslib: 2.8.1

  "@aws-crypto/sha1-browser@5.2.0":
    dependencies:
      "@aws-crypto/supports-web-crypto": 5.2.0
      "@aws-crypto/util": 5.2.0
      "@aws-sdk/types": 3.734.0
      "@aws-sdk/util-locate-window": 3.723.0
      "@smithy/util-utf8": 2.3.0
      tslib: 2.8.1

  "@aws-crypto/sha256-browser@5.2.0":
    dependencies:
      "@aws-crypto/sha256-js": 5.2.0
      "@aws-crypto/supports-web-crypto": 5.2.0
      "@aws-crypto/util": 5.2.0
      "@aws-sdk/types": 3.734.0
      "@aws-sdk/util-locate-window": 3.723.0
      "@smithy/util-utf8": 2.3.0
      tslib: 2.8.1

  "@aws-crypto/sha256-js@5.2.0":
    dependencies:
      "@aws-crypto/util": 5.2.0
      "@aws-sdk/types": 3.734.0
      tslib: 2.8.1

  "@aws-crypto/supports-web-crypto@5.2.0":
    dependencies:
      tslib: 2.8.1

  "@aws-crypto/util@5.2.0":
    dependencies:
      "@aws-sdk/types": 3.734.0
      "@smithy/util-utf8": 2.3.0
      tslib: 2.8.1

  "@aws-sdk/client-s3@3.750.0":
    dependencies:
      "@aws-crypto/sha1-browser": 5.2.0
      "@aws-crypto/sha256-browser": 5.2.0
      "@aws-crypto/sha256-js": 5.2.0
      "@aws-sdk/core": 3.750.0
      "@aws-sdk/credential-provider-node": 3.750.0
      "@aws-sdk/middleware-bucket-endpoint": 3.734.0
      "@aws-sdk/middleware-expect-continue": 3.734.0
      "@aws-sdk/middleware-flexible-checksums": 3.750.0
      "@aws-sdk/middleware-host-header": 3.734.0
      "@aws-sdk/middleware-location-constraint": 3.734.0
      "@aws-sdk/middleware-logger": 3.734.0
      "@aws-sdk/middleware-recursion-detection": 3.734.0
      "@aws-sdk/middleware-sdk-s3": 3.750.0
      "@aws-sdk/middleware-ssec": 3.734.0
      "@aws-sdk/middleware-user-agent": 3.750.0
      "@aws-sdk/region-config-resolver": 3.734.0
      "@aws-sdk/signature-v4-multi-region": 3.750.0
      "@aws-sdk/types": 3.734.0
      "@aws-sdk/util-endpoints": 3.743.0
      "@aws-sdk/util-user-agent-browser": 3.734.0
      "@aws-sdk/util-user-agent-node": 3.750.0
      "@aws-sdk/xml-builder": 3.734.0
      "@smithy/config-resolver": 4.0.1
      "@smithy/core": 3.1.5
      "@smithy/eventstream-serde-browser": 4.0.1
      "@smithy/eventstream-serde-config-resolver": 4.0.1
      "@smithy/eventstream-serde-node": 4.0.1
      "@smithy/fetch-http-handler": 5.0.1
      "@smithy/hash-blob-browser": 4.0.1
      "@smithy/hash-node": 4.0.1
      "@smithy/hash-stream-node": 4.0.1
      "@smithy/invalid-dependency": 4.0.1
      "@smithy/md5-js": 4.0.1
      "@smithy/middleware-content-length": 4.0.1
      "@smithy/middleware-endpoint": 4.0.6
      "@smithy/middleware-retry": 4.0.7
      "@smithy/middleware-serde": 4.0.2
      "@smithy/middleware-stack": 4.0.1
      "@smithy/node-config-provider": 4.0.1
      "@smithy/node-http-handler": 4.0.3
      "@smithy/protocol-http": 5.0.1
      "@smithy/smithy-client": 4.1.6
      "@smithy/types": 4.1.0
      "@smithy/url-parser": 4.0.1
      "@smithy/util-base64": 4.0.0
      "@smithy/util-body-length-browser": 4.0.0
      "@smithy/util-body-length-node": 4.0.0
      "@smithy/util-defaults-mode-browser": 4.0.7
      "@smithy/util-defaults-mode-node": 4.0.7
      "@smithy/util-endpoints": 3.0.1
      "@smithy/util-middleware": 4.0.1
      "@smithy/util-retry": 4.0.1
      "@smithy/util-stream": 4.1.2
      "@smithy/util-utf8": 4.0.0
      "@smithy/util-waiter": 4.0.2
      tslib: 2.8.1
    transitivePeerDependencies:
      - aws-crt

  "@aws-sdk/client-sso@3.750.0":
    dependencies:
      "@aws-crypto/sha256-browser": 5.2.0
      "@aws-crypto/sha256-js": 5.2.0
      "@aws-sdk/core": 3.750.0
      "@aws-sdk/middleware-host-header": 3.734.0
      "@aws-sdk/middleware-logger": 3.734.0
      "@aws-sdk/middleware-recursion-detection": 3.734.0
      "@aws-sdk/middleware-user-agent": 3.750.0
      "@aws-sdk/region-config-resolver": 3.734.0
      "@aws-sdk/types": 3.734.0
      "@aws-sdk/util-endpoints": 3.743.0
      "@aws-sdk/util-user-agent-browser": 3.734.0
      "@aws-sdk/util-user-agent-node": 3.750.0
      "@smithy/config-resolver": 4.0.1
      "@smithy/core": 3.1.5
      "@smithy/fetch-http-handler": 5.0.1
      "@smithy/hash-node": 4.0.1
      "@smithy/invalid-dependency": 4.0.1
      "@smithy/middleware-content-length": 4.0.1
      "@smithy/middleware-endpoint": 4.0.6
      "@smithy/middleware-retry": 4.0.7
      "@smithy/middleware-serde": 4.0.2
      "@smithy/middleware-stack": 4.0.1
      "@smithy/node-config-provider": 4.0.1
      "@smithy/node-http-handler": 4.0.3
      "@smithy/protocol-http": 5.0.1
      "@smithy/smithy-client": 4.1.6
      "@smithy/types": 4.1.0
      "@smithy/url-parser": 4.0.1
      "@smithy/util-base64": 4.0.0
      "@smithy/util-body-length-browser": 4.0.0
      "@smithy/util-body-length-node": 4.0.0
      "@smithy/util-defaults-mode-browser": 4.0.7
      "@smithy/util-defaults-mode-node": 4.0.7
      "@smithy/util-endpoints": 3.0.1
      "@smithy/util-middleware": 4.0.1
      "@smithy/util-retry": 4.0.1
      "@smithy/util-utf8": 4.0.0
      tslib: 2.8.1
    transitivePeerDependencies:
      - aws-crt

  "@aws-sdk/core@3.750.0":
    dependencies:
      "@aws-sdk/types": 3.734.0
      "@smithy/core": 3.1.5
      "@smithy/node-config-provider": 4.0.1
      "@smithy/property-provider": 4.0.1
      "@smithy/protocol-http": 5.0.1
      "@smithy/signature-v4": 5.0.1
      "@smithy/smithy-client": 4.1.6
      "@smithy/types": 4.1.0
      "@smithy/util-middleware": 4.0.1
      fast-xml-parser: 4.4.1
      tslib: 2.8.1

  "@aws-sdk/credential-provider-env@3.750.0":
    dependencies:
      "@aws-sdk/core": 3.750.0
      "@aws-sdk/types": 3.734.0
      "@smithy/property-provider": 4.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@aws-sdk/credential-provider-http@3.750.0":
    dependencies:
      "@aws-sdk/core": 3.750.0
      "@aws-sdk/types": 3.734.0
      "@smithy/fetch-http-handler": 5.0.1
      "@smithy/node-http-handler": 4.0.3
      "@smithy/property-provider": 4.0.1
      "@smithy/protocol-http": 5.0.1
      "@smithy/smithy-client": 4.1.6
      "@smithy/types": 4.1.0
      "@smithy/util-stream": 4.1.2
      tslib: 2.8.1

  "@aws-sdk/credential-provider-ini@3.750.0":
    dependencies:
      "@aws-sdk/core": 3.750.0
      "@aws-sdk/credential-provider-env": 3.750.0
      "@aws-sdk/credential-provider-http": 3.750.0
      "@aws-sdk/credential-provider-process": 3.750.0
      "@aws-sdk/credential-provider-sso": 3.750.0
      "@aws-sdk/credential-provider-web-identity": 3.750.0
      "@aws-sdk/nested-clients": 3.750.0
      "@aws-sdk/types": 3.734.0
      "@smithy/credential-provider-imds": 4.0.1
      "@smithy/property-provider": 4.0.1
      "@smithy/shared-ini-file-loader": 4.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1
    transitivePeerDependencies:
      - aws-crt

  "@aws-sdk/credential-provider-node@3.750.0":
    dependencies:
      "@aws-sdk/credential-provider-env": 3.750.0
      "@aws-sdk/credential-provider-http": 3.750.0
      "@aws-sdk/credential-provider-ini": 3.750.0
      "@aws-sdk/credential-provider-process": 3.750.0
      "@aws-sdk/credential-provider-sso": 3.750.0
      "@aws-sdk/credential-provider-web-identity": 3.750.0
      "@aws-sdk/types": 3.734.0
      "@smithy/credential-provider-imds": 4.0.1
      "@smithy/property-provider": 4.0.1
      "@smithy/shared-ini-file-loader": 4.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1
    transitivePeerDependencies:
      - aws-crt

  "@aws-sdk/credential-provider-process@3.750.0":
    dependencies:
      "@aws-sdk/core": 3.750.0
      "@aws-sdk/types": 3.734.0
      "@smithy/property-provider": 4.0.1
      "@smithy/shared-ini-file-loader": 4.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@aws-sdk/credential-provider-sso@3.750.0":
    dependencies:
      "@aws-sdk/client-sso": 3.750.0
      "@aws-sdk/core": 3.750.0
      "@aws-sdk/token-providers": 3.750.0
      "@aws-sdk/types": 3.734.0
      "@smithy/property-provider": 4.0.1
      "@smithy/shared-ini-file-loader": 4.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1
    transitivePeerDependencies:
      - aws-crt

  "@aws-sdk/credential-provider-web-identity@3.750.0":
    dependencies:
      "@aws-sdk/core": 3.750.0
      "@aws-sdk/nested-clients": 3.750.0
      "@aws-sdk/types": 3.734.0
      "@smithy/property-provider": 4.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1
    transitivePeerDependencies:
      - aws-crt

  "@aws-sdk/middleware-bucket-endpoint@3.734.0":
    dependencies:
      "@aws-sdk/types": 3.734.0
      "@aws-sdk/util-arn-parser": 3.723.0
      "@smithy/node-config-provider": 4.0.1
      "@smithy/protocol-http": 5.0.1
      "@smithy/types": 4.1.0
      "@smithy/util-config-provider": 4.0.0
      tslib: 2.8.1

  "@aws-sdk/middleware-expect-continue@3.734.0":
    dependencies:
      "@aws-sdk/types": 3.734.0
      "@smithy/protocol-http": 5.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@aws-sdk/middleware-flexible-checksums@3.750.0":
    dependencies:
      "@aws-crypto/crc32": 5.2.0
      "@aws-crypto/crc32c": 5.2.0
      "@aws-crypto/util": 5.2.0
      "@aws-sdk/core": 3.750.0
      "@aws-sdk/types": 3.734.0
      "@smithy/is-array-buffer": 4.0.0
      "@smithy/node-config-provider": 4.0.1
      "@smithy/protocol-http": 5.0.1
      "@smithy/types": 4.1.0
      "@smithy/util-middleware": 4.0.1
      "@smithy/util-stream": 4.1.2
      "@smithy/util-utf8": 4.0.0
      tslib: 2.8.1

  "@aws-sdk/middleware-host-header@3.734.0":
    dependencies:
      "@aws-sdk/types": 3.734.0
      "@smithy/protocol-http": 5.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@aws-sdk/middleware-location-constraint@3.734.0":
    dependencies:
      "@aws-sdk/types": 3.734.0
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@aws-sdk/middleware-logger@3.734.0":
    dependencies:
      "@aws-sdk/types": 3.734.0
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@aws-sdk/middleware-recursion-detection@3.734.0":
    dependencies:
      "@aws-sdk/types": 3.734.0
      "@smithy/protocol-http": 5.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@aws-sdk/middleware-sdk-s3@3.750.0":
    dependencies:
      "@aws-sdk/core": 3.750.0
      "@aws-sdk/types": 3.734.0
      "@aws-sdk/util-arn-parser": 3.723.0
      "@smithy/core": 3.1.5
      "@smithy/node-config-provider": 4.0.1
      "@smithy/protocol-http": 5.0.1
      "@smithy/signature-v4": 5.0.1
      "@smithy/smithy-client": 4.1.6
      "@smithy/types": 4.1.0
      "@smithy/util-config-provider": 4.0.0
      "@smithy/util-middleware": 4.0.1
      "@smithy/util-stream": 4.1.2
      "@smithy/util-utf8": 4.0.0
      tslib: 2.8.1

  "@aws-sdk/middleware-ssec@3.734.0":
    dependencies:
      "@aws-sdk/types": 3.734.0
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@aws-sdk/middleware-user-agent@3.750.0":
    dependencies:
      "@aws-sdk/core": 3.750.0
      "@aws-sdk/types": 3.734.0
      "@aws-sdk/util-endpoints": 3.743.0
      "@smithy/core": 3.1.5
      "@smithy/protocol-http": 5.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@aws-sdk/nested-clients@3.750.0":
    dependencies:
      "@aws-crypto/sha256-browser": 5.2.0
      "@aws-crypto/sha256-js": 5.2.0
      "@aws-sdk/core": 3.750.0
      "@aws-sdk/middleware-host-header": 3.734.0
      "@aws-sdk/middleware-logger": 3.734.0
      "@aws-sdk/middleware-recursion-detection": 3.734.0
      "@aws-sdk/middleware-user-agent": 3.750.0
      "@aws-sdk/region-config-resolver": 3.734.0
      "@aws-sdk/types": 3.734.0
      "@aws-sdk/util-endpoints": 3.743.0
      "@aws-sdk/util-user-agent-browser": 3.734.0
      "@aws-sdk/util-user-agent-node": 3.750.0
      "@smithy/config-resolver": 4.0.1
      "@smithy/core": 3.1.5
      "@smithy/fetch-http-handler": 5.0.1
      "@smithy/hash-node": 4.0.1
      "@smithy/invalid-dependency": 4.0.1
      "@smithy/middleware-content-length": 4.0.1
      "@smithy/middleware-endpoint": 4.0.6
      "@smithy/middleware-retry": 4.0.7
      "@smithy/middleware-serde": 4.0.2
      "@smithy/middleware-stack": 4.0.1
      "@smithy/node-config-provider": 4.0.1
      "@smithy/node-http-handler": 4.0.3
      "@smithy/protocol-http": 5.0.1
      "@smithy/smithy-client": 4.1.6
      "@smithy/types": 4.1.0
      "@smithy/url-parser": 4.0.1
      "@smithy/util-base64": 4.0.0
      "@smithy/util-body-length-browser": 4.0.0
      "@smithy/util-body-length-node": 4.0.0
      "@smithy/util-defaults-mode-browser": 4.0.7
      "@smithy/util-defaults-mode-node": 4.0.7
      "@smithy/util-endpoints": 3.0.1
      "@smithy/util-middleware": 4.0.1
      "@smithy/util-retry": 4.0.1
      "@smithy/util-utf8": 4.0.0
      tslib: 2.8.1
    transitivePeerDependencies:
      - aws-crt

  "@aws-sdk/region-config-resolver@3.734.0":
    dependencies:
      "@aws-sdk/types": 3.734.0
      "@smithy/node-config-provider": 4.0.1
      "@smithy/types": 4.1.0
      "@smithy/util-config-provider": 4.0.0
      "@smithy/util-middleware": 4.0.1
      tslib: 2.8.1

  "@aws-sdk/s3-request-presigner@3.750.0":
    dependencies:
      "@aws-sdk/signature-v4-multi-region": 3.750.0
      "@aws-sdk/types": 3.734.0
      "@aws-sdk/util-format-url": 3.734.0
      "@smithy/middleware-endpoint": 4.0.6
      "@smithy/protocol-http": 5.0.1
      "@smithy/smithy-client": 4.1.6
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@aws-sdk/signature-v4-multi-region@3.750.0":
    dependencies:
      "@aws-sdk/middleware-sdk-s3": 3.750.0
      "@aws-sdk/types": 3.734.0
      "@smithy/protocol-http": 5.0.1
      "@smithy/signature-v4": 5.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@aws-sdk/token-providers@3.750.0":
    dependencies:
      "@aws-sdk/nested-clients": 3.750.0
      "@aws-sdk/types": 3.734.0
      "@smithy/property-provider": 4.0.1
      "@smithy/shared-ini-file-loader": 4.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1
    transitivePeerDependencies:
      - aws-crt

  "@aws-sdk/types@3.734.0":
    dependencies:
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@aws-sdk/util-arn-parser@3.723.0":
    dependencies:
      tslib: 2.8.1

  "@aws-sdk/util-endpoints@3.743.0":
    dependencies:
      "@aws-sdk/types": 3.734.0
      "@smithy/types": 4.1.0
      "@smithy/util-endpoints": 3.0.1
      tslib: 2.8.1

  "@aws-sdk/util-format-url@3.734.0":
    dependencies:
      "@aws-sdk/types": 3.734.0
      "@smithy/querystring-builder": 4.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@aws-sdk/util-locate-window@3.723.0":
    dependencies:
      tslib: 2.8.1

  "@aws-sdk/util-user-agent-browser@3.734.0":
    dependencies:
      "@aws-sdk/types": 3.734.0
      "@smithy/types": 4.1.0
      bowser: 2.11.0
      tslib: 2.8.1

  "@aws-sdk/util-user-agent-node@3.750.0":
    dependencies:
      "@aws-sdk/middleware-user-agent": 3.750.0
      "@aws-sdk/types": 3.734.0
      "@smithy/node-config-provider": 4.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@aws-sdk/xml-builder@3.734.0":
    dependencies:
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@babel/runtime@7.26.9":
    dependencies:
      regenerator-runtime: 0.14.1

  "@drizzle-team/brocli@0.10.2": {}

  "@emnapi/runtime@1.3.1":
    dependencies:
      tslib: 2.8.1
    optional: true

  "@esbuild-kit/core-utils@3.3.2":
    dependencies:
      esbuild: 0.18.20
      source-map-support: 0.5.21

  "@esbuild-kit/esm-loader@2.6.5":
    dependencies:
      "@esbuild-kit/core-utils": 3.3.2
      get-tsconfig: 4.10.0

  "@esbuild/aix-ppc64@0.19.12":
    optional: true

  "@esbuild/android-arm64@0.18.20":
    optional: true

  "@esbuild/android-arm64@0.19.12":
    optional: true

  "@esbuild/android-arm@0.18.20":
    optional: true

  "@esbuild/android-arm@0.19.12":
    optional: true

  "@esbuild/android-x64@0.18.20":
    optional: true

  "@esbuild/android-x64@0.19.12":
    optional: true

  "@esbuild/darwin-arm64@0.18.20":
    optional: true

  "@esbuild/darwin-arm64@0.19.12":
    optional: true

  "@esbuild/darwin-x64@0.18.20":
    optional: true

  "@esbuild/darwin-x64@0.19.12":
    optional: true

  "@esbuild/freebsd-arm64@0.18.20":
    optional: true

  "@esbuild/freebsd-arm64@0.19.12":
    optional: true

  "@esbuild/freebsd-x64@0.18.20":
    optional: true

  "@esbuild/freebsd-x64@0.19.12":
    optional: true

  "@esbuild/linux-arm64@0.18.20":
    optional: true

  "@esbuild/linux-arm64@0.19.12":
    optional: true

  "@esbuild/linux-arm@0.18.20":
    optional: true

  "@esbuild/linux-arm@0.19.12":
    optional: true

  "@esbuild/linux-ia32@0.18.20":
    optional: true

  "@esbuild/linux-ia32@0.19.12":
    optional: true

  "@esbuild/linux-loong64@0.18.20":
    optional: true

  "@esbuild/linux-loong64@0.19.12":
    optional: true

  "@esbuild/linux-mips64el@0.18.20":
    optional: true

  "@esbuild/linux-mips64el@0.19.12":
    optional: true

  "@esbuild/linux-ppc64@0.18.20":
    optional: true

  "@esbuild/linux-ppc64@0.19.12":
    optional: true

  "@esbuild/linux-riscv64@0.18.20":
    optional: true

  "@esbuild/linux-riscv64@0.19.12":
    optional: true

  "@esbuild/linux-s390x@0.18.20":
    optional: true

  "@esbuild/linux-s390x@0.19.12":
    optional: true

  "@esbuild/linux-x64@0.18.20":
    optional: true

  "@esbuild/linux-x64@0.19.12":
    optional: true

  "@esbuild/netbsd-x64@0.18.20":
    optional: true

  "@esbuild/netbsd-x64@0.19.12":
    optional: true

  "@esbuild/openbsd-x64@0.18.20":
    optional: true

  "@esbuild/openbsd-x64@0.19.12":
    optional: true

  "@esbuild/sunos-x64@0.18.20":
    optional: true

  "@esbuild/sunos-x64@0.19.12":
    optional: true

  "@esbuild/win32-arm64@0.18.20":
    optional: true

  "@esbuild/win32-arm64@0.19.12":
    optional: true

  "@esbuild/win32-ia32@0.18.20":
    optional: true

  "@esbuild/win32-ia32@0.19.12":
    optional: true

  "@esbuild/win32-x64@0.18.20":
    optional: true

  "@esbuild/win32-x64@0.19.12":
    optional: true

  "@ffmpeg/ffmpeg@0.12.15":
    dependencies:
      "@ffmpeg/types": 0.12.4

  "@ffmpeg/types@0.12.4": {}

  "@ffmpeg/util@0.12.2": {}

  "@img/sharp-darwin-arm64@0.33.5":
    optionalDependencies:
      "@img/sharp-libvips-darwin-arm64": 1.0.4
    optional: true

  "@img/sharp-darwin-x64@0.33.5":
    optionalDependencies:
      "@img/sharp-libvips-darwin-x64": 1.0.4
    optional: true

  "@img/sharp-libvips-darwin-arm64@1.0.4":
    optional: true

  "@img/sharp-libvips-darwin-x64@1.0.4":
    optional: true

  "@img/sharp-libvips-linux-arm64@1.0.4":
    optional: true

  "@img/sharp-libvips-linux-arm@1.0.5":
    optional: true

  "@img/sharp-libvips-linux-s390x@1.0.4":
    optional: true

  "@img/sharp-libvips-linux-x64@1.0.4":
    optional: true

  "@img/sharp-libvips-linuxmusl-arm64@1.0.4":
    optional: true

  "@img/sharp-libvips-linuxmusl-x64@1.0.4":
    optional: true

  "@img/sharp-linux-arm64@0.33.5":
    optionalDependencies:
      "@img/sharp-libvips-linux-arm64": 1.0.4
    optional: true

  "@img/sharp-linux-arm@0.33.5":
    optionalDependencies:
      "@img/sharp-libvips-linux-arm": 1.0.5
    optional: true

  "@img/sharp-linux-s390x@0.33.5":
    optionalDependencies:
      "@img/sharp-libvips-linux-s390x": 1.0.4
    optional: true

  "@img/sharp-linux-x64@0.33.5":
    optionalDependencies:
      "@img/sharp-libvips-linux-x64": 1.0.4
    optional: true

  "@img/sharp-linuxmusl-arm64@0.33.5":
    optionalDependencies:
      "@img/sharp-libvips-linuxmusl-arm64": 1.0.4
    optional: true

  "@img/sharp-linuxmusl-x64@0.33.5":
    optionalDependencies:
      "@img/sharp-libvips-linuxmusl-x64": 1.0.4
    optional: true

  "@img/sharp-wasm32@0.33.5":
    dependencies:
      "@emnapi/runtime": 1.3.1
    optional: true

  "@img/sharp-win32-ia32@0.33.5":
    optional: true

  "@img/sharp-win32-x64@0.33.5":
    optional: true

  "@next/env@15.2.0": {}

  "@next/swc-darwin-arm64@15.2.0":
    optional: true

  "@next/swc-darwin-x64@15.2.0":
    optional: true

  "@next/swc-linux-arm64-gnu@15.2.0":
    optional: true

  "@next/swc-linux-arm64-musl@15.2.0":
    optional: true

  "@next/swc-linux-x64-gnu@15.2.0":
    optional: true

  "@next/swc-linux-x64-musl@15.2.0":
    optional: true

  "@next/swc-win32-arm64-msvc@15.2.0":
    optional: true

  "@next/swc-win32-x64-msvc@15.2.0":
    optional: true

  "@panva/hkdf@1.2.1": {}

  "@petamoriken/float16@3.9.1": {}

  "@smithy/abort-controller@4.0.1":
    dependencies:
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/chunked-blob-reader-native@4.0.0":
    dependencies:
      "@smithy/util-base64": 4.0.0
      tslib: 2.8.1

  "@smithy/chunked-blob-reader@5.0.0":
    dependencies:
      tslib: 2.8.1

  "@smithy/config-resolver@4.0.1":
    dependencies:
      "@smithy/node-config-provider": 4.0.1
      "@smithy/types": 4.1.0
      "@smithy/util-config-provider": 4.0.0
      "@smithy/util-middleware": 4.0.1
      tslib: 2.8.1

  "@smithy/core@3.1.5":
    dependencies:
      "@smithy/middleware-serde": 4.0.2
      "@smithy/protocol-http": 5.0.1
      "@smithy/types": 4.1.0
      "@smithy/util-body-length-browser": 4.0.0
      "@smithy/util-middleware": 4.0.1
      "@smithy/util-stream": 4.1.2
      "@smithy/util-utf8": 4.0.0
      tslib: 2.8.1

  "@smithy/credential-provider-imds@4.0.1":
    dependencies:
      "@smithy/node-config-provider": 4.0.1
      "@smithy/property-provider": 4.0.1
      "@smithy/types": 4.1.0
      "@smithy/url-parser": 4.0.1
      tslib: 2.8.1

  "@smithy/eventstream-codec@4.0.1":
    dependencies:
      "@aws-crypto/crc32": 5.2.0
      "@smithy/types": 4.1.0
      "@smithy/util-hex-encoding": 4.0.0
      tslib: 2.8.1

  "@smithy/eventstream-serde-browser@4.0.1":
    dependencies:
      "@smithy/eventstream-serde-universal": 4.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/eventstream-serde-config-resolver@4.0.1":
    dependencies:
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/eventstream-serde-node@4.0.1":
    dependencies:
      "@smithy/eventstream-serde-universal": 4.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/eventstream-serde-universal@4.0.1":
    dependencies:
      "@smithy/eventstream-codec": 4.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/fetch-http-handler@5.0.1":
    dependencies:
      "@smithy/protocol-http": 5.0.1
      "@smithy/querystring-builder": 4.0.1
      "@smithy/types": 4.1.0
      "@smithy/util-base64": 4.0.0
      tslib: 2.8.1

  "@smithy/hash-blob-browser@4.0.1":
    dependencies:
      "@smithy/chunked-blob-reader": 5.0.0
      "@smithy/chunked-blob-reader-native": 4.0.0
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/hash-node@4.0.1":
    dependencies:
      "@smithy/types": 4.1.0
      "@smithy/util-buffer-from": 4.0.0
      "@smithy/util-utf8": 4.0.0
      tslib: 2.8.1

  "@smithy/hash-stream-node@4.0.1":
    dependencies:
      "@smithy/types": 4.1.0
      "@smithy/util-utf8": 4.0.0
      tslib: 2.8.1

  "@smithy/invalid-dependency@4.0.1":
    dependencies:
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/is-array-buffer@2.2.0":
    dependencies:
      tslib: 2.8.1

  "@smithy/is-array-buffer@4.0.0":
    dependencies:
      tslib: 2.8.1

  "@smithy/md5-js@4.0.1":
    dependencies:
      "@smithy/types": 4.1.0
      "@smithy/util-utf8": 4.0.0
      tslib: 2.8.1

  "@smithy/middleware-content-length@4.0.1":
    dependencies:
      "@smithy/protocol-http": 5.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/middleware-endpoint@4.0.6":
    dependencies:
      "@smithy/core": 3.1.5
      "@smithy/middleware-serde": 4.0.2
      "@smithy/node-config-provider": 4.0.1
      "@smithy/shared-ini-file-loader": 4.0.1
      "@smithy/types": 4.1.0
      "@smithy/url-parser": 4.0.1
      "@smithy/util-middleware": 4.0.1
      tslib: 2.8.1

  "@smithy/middleware-retry@4.0.7":
    dependencies:
      "@smithy/node-config-provider": 4.0.1
      "@smithy/protocol-http": 5.0.1
      "@smithy/service-error-classification": 4.0.1
      "@smithy/smithy-client": 4.1.6
      "@smithy/types": 4.1.0
      "@smithy/util-middleware": 4.0.1
      "@smithy/util-retry": 4.0.1
      tslib: 2.8.1
      uuid: 9.0.1

  "@smithy/middleware-serde@4.0.2":
    dependencies:
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/middleware-stack@4.0.1":
    dependencies:
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/node-config-provider@4.0.1":
    dependencies:
      "@smithy/property-provider": 4.0.1
      "@smithy/shared-ini-file-loader": 4.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/node-http-handler@4.0.3":
    dependencies:
      "@smithy/abort-controller": 4.0.1
      "@smithy/protocol-http": 5.0.1
      "@smithy/querystring-builder": 4.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/property-provider@4.0.1":
    dependencies:
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/protocol-http@5.0.1":
    dependencies:
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/querystring-builder@4.0.1":
    dependencies:
      "@smithy/types": 4.1.0
      "@smithy/util-uri-escape": 4.0.0
      tslib: 2.8.1

  "@smithy/querystring-parser@4.0.1":
    dependencies:
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/service-error-classification@4.0.1":
    dependencies:
      "@smithy/types": 4.1.0

  "@smithy/shared-ini-file-loader@4.0.1":
    dependencies:
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/signature-v4@5.0.1":
    dependencies:
      "@smithy/is-array-buffer": 4.0.0
      "@smithy/protocol-http": 5.0.1
      "@smithy/types": 4.1.0
      "@smithy/util-hex-encoding": 4.0.0
      "@smithy/util-middleware": 4.0.1
      "@smithy/util-uri-escape": 4.0.0
      "@smithy/util-utf8": 4.0.0
      tslib: 2.8.1

  "@smithy/smithy-client@4.1.6":
    dependencies:
      "@smithy/core": 3.1.5
      "@smithy/middleware-endpoint": 4.0.6
      "@smithy/middleware-stack": 4.0.1
      "@smithy/protocol-http": 5.0.1
      "@smithy/types": 4.1.0
      "@smithy/util-stream": 4.1.2
      tslib: 2.8.1

  "@smithy/types@4.1.0":
    dependencies:
      tslib: 2.8.1

  "@smithy/url-parser@4.0.1":
    dependencies:
      "@smithy/querystring-parser": 4.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/util-base64@4.0.0":
    dependencies:
      "@smithy/util-buffer-from": 4.0.0
      "@smithy/util-utf8": 4.0.0
      tslib: 2.8.1

  "@smithy/util-body-length-browser@4.0.0":
    dependencies:
      tslib: 2.8.1

  "@smithy/util-body-length-node@4.0.0":
    dependencies:
      tslib: 2.8.1

  "@smithy/util-buffer-from@2.2.0":
    dependencies:
      "@smithy/is-array-buffer": 2.2.0
      tslib: 2.8.1

  "@smithy/util-buffer-from@4.0.0":
    dependencies:
      "@smithy/is-array-buffer": 4.0.0
      tslib: 2.8.1

  "@smithy/util-config-provider@4.0.0":
    dependencies:
      tslib: 2.8.1

  "@smithy/util-defaults-mode-browser@4.0.7":
    dependencies:
      "@smithy/property-provider": 4.0.1
      "@smithy/smithy-client": 4.1.6
      "@smithy/types": 4.1.0
      bowser: 2.11.0
      tslib: 2.8.1

  "@smithy/util-defaults-mode-node@4.0.7":
    dependencies:
      "@smithy/config-resolver": 4.0.1
      "@smithy/credential-provider-imds": 4.0.1
      "@smithy/node-config-provider": 4.0.1
      "@smithy/property-provider": 4.0.1
      "@smithy/smithy-client": 4.1.6
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/util-endpoints@3.0.1":
    dependencies:
      "@smithy/node-config-provider": 4.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/util-hex-encoding@4.0.0":
    dependencies:
      tslib: 2.8.1

  "@smithy/util-middleware@4.0.1":
    dependencies:
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/util-retry@4.0.1":
    dependencies:
      "@smithy/service-error-classification": 4.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@smithy/util-stream@4.1.2":
    dependencies:
      "@smithy/fetch-http-handler": 5.0.1
      "@smithy/node-http-handler": 4.0.3
      "@smithy/types": 4.1.0
      "@smithy/util-base64": 4.0.0
      "@smithy/util-buffer-from": 4.0.0
      "@smithy/util-hex-encoding": 4.0.0
      "@smithy/util-utf8": 4.0.0
      tslib: 2.8.1

  "@smithy/util-uri-escape@4.0.0":
    dependencies:
      tslib: 2.8.1

  "@smithy/util-utf8@2.3.0":
    dependencies:
      "@smithy/util-buffer-from": 2.2.0
      tslib: 2.8.1

  "@smithy/util-utf8@4.0.0":
    dependencies:
      "@smithy/util-buffer-from": 4.0.0
      tslib: 2.8.1

  "@smithy/util-waiter@4.0.2":
    dependencies:
      "@smithy/abort-controller": 4.0.1
      "@smithy/types": 4.1.0
      tslib: 2.8.1

  "@swc/counter@0.1.3": {}

  "@swc/helpers@0.5.15":
    dependencies:
      tslib: 2.8.1

  "@tailwindcss/node@4.0.9":
    dependencies:
      enhanced-resolve: 5.18.1
      jiti: 2.4.2
      tailwindcss: 4.0.9

  "@tailwindcss/oxide-android-arm64@4.0.9":
    optional: true

  "@tailwindcss/oxide-darwin-arm64@4.0.9":
    optional: true

  "@tailwindcss/oxide-darwin-x64@4.0.9":
    optional: true

  "@tailwindcss/oxide-freebsd-x64@4.0.9":
    optional: true

  "@tailwindcss/oxide-linux-arm-gnueabihf@4.0.9":
    optional: true

  "@tailwindcss/oxide-linux-arm64-gnu@4.0.9":
    optional: true

  "@tailwindcss/oxide-linux-arm64-musl@4.0.9":
    optional: true

  "@tailwindcss/oxide-linux-x64-gnu@4.0.9":
    optional: true

  "@tailwindcss/oxide-linux-x64-musl@4.0.9":
    optional: true

  "@tailwindcss/oxide-win32-arm64-msvc@4.0.9":
    optional: true

  "@tailwindcss/oxide-win32-x64-msvc@4.0.9":
    optional: true

  "@tailwindcss/oxide@4.0.9":
    optionalDependencies:
      "@tailwindcss/oxide-android-arm64": 4.0.9
      "@tailwindcss/oxide-darwin-arm64": 4.0.9
      "@tailwindcss/oxide-darwin-x64": 4.0.9
      "@tailwindcss/oxide-freebsd-x64": 4.0.9
      "@tailwindcss/oxide-linux-arm-gnueabihf": 4.0.9
      "@tailwindcss/oxide-linux-arm64-gnu": 4.0.9
      "@tailwindcss/oxide-linux-arm64-musl": 4.0.9
      "@tailwindcss/oxide-linux-x64-gnu": 4.0.9
      "@tailwindcss/oxide-linux-x64-musl": 4.0.9
      "@tailwindcss/oxide-win32-arm64-msvc": 4.0.9
      "@tailwindcss/oxide-win32-x64-msvc": 4.0.9

  "@tailwindcss/postcss@4.0.9":
    dependencies:
      "@alloc/quick-lru": 5.2.0
      "@tailwindcss/node": 4.0.9
      "@tailwindcss/oxide": 4.0.9
      lightningcss: 1.29.1
      postcss: 8.5.3
      tailwindcss: 4.0.9

  "@tanstack/query-core@5.67.1": {}

  "@tanstack/react-query@5.67.1(react@19.0.0)":
    dependencies:
      "@tanstack/query-core": 5.67.1
      react: 19.0.0

  "@types/formidable@3.4.5":
    dependencies:
      "@types/node": 20.17.19

  "@types/node@20.17.19":
    dependencies:
      undici-types: 6.19.8

  "@types/react-dom@19.0.4(@types/react@19.0.10)":
    dependencies:
      "@types/react": 19.0.10

  "@types/react@19.0.10":
    dependencies:
      csstype: 3.1.3

  asap@2.0.6: {}

  bowser@2.11.0: {}

  buffer-from@1.1.2: {}

  busboy@1.6.0:
    dependencies:
      streamsearch: 1.1.0

  caniuse-lite@1.0.30001701: {}

  client-only@0.0.1: {}

  color-convert@2.0.1:
    dependencies:
      color-name: 1.1.4
    optional: true

  color-name@1.1.4:
    optional: true

  color-string@1.9.1:
    dependencies:
      color-name: 1.1.4
      simple-swizzle: 0.2.2
    optional: true

  color@4.2.3:
    dependencies:
      color-convert: 2.0.1
      color-string: 1.9.1
    optional: true

  cookie@0.7.2: {}

  csstype@3.1.3: {}

  debug@4.4.0:
    dependencies:
      ms: 2.1.3

  detect-libc@1.0.3: {}

  detect-libc@2.0.3:
    optional: true

  dezalgo@1.0.4:
    dependencies:
      asap: 2.0.6
      wrappy: 1.0.2

  drizzle-kit@0.30.5:
    dependencies:
      "@drizzle-team/brocli": 0.10.2
      "@esbuild-kit/esm-loader": 2.6.5
      esbuild: 0.19.12
      esbuild-register: 3.6.0(esbuild@0.19.12)
      gel: 2.0.0
    transitivePeerDependencies:
      - supports-color

  drizzle-orm@0.40.0(gel@2.0.0)(postgres@3.4.5):
    optionalDependencies:
      gel: 2.0.0
      postgres: 3.4.5

  enhanced-resolve@5.18.1:
    dependencies:
      graceful-fs: 4.2.11
      tapable: 2.2.1

  env-paths@3.0.0: {}

  esbuild-register@3.6.0(esbuild@0.19.12):
    dependencies:
      debug: 4.4.0
      esbuild: 0.19.12
    transitivePeerDependencies:
      - supports-color

  esbuild@0.18.20:
    optionalDependencies:
      "@esbuild/android-arm": 0.18.20
      "@esbuild/android-arm64": 0.18.20
      "@esbuild/android-x64": 0.18.20
      "@esbuild/darwin-arm64": 0.18.20
      "@esbuild/darwin-x64": 0.18.20
      "@esbuild/freebsd-arm64": 0.18.20
      "@esbuild/freebsd-x64": 0.18.20
      "@esbuild/linux-arm": 0.18.20
      "@esbuild/linux-arm64": 0.18.20
      "@esbuild/linux-ia32": 0.18.20
      "@esbuild/linux-loong64": 0.18.20
      "@esbuild/linux-mips64el": 0.18.20
      "@esbuild/linux-ppc64": 0.18.20
      "@esbuild/linux-riscv64": 0.18.20
      "@esbuild/linux-s390x": 0.18.20
      "@esbuild/linux-x64": 0.18.20
      "@esbuild/netbsd-x64": 0.18.20
      "@esbuild/openbsd-x64": 0.18.20
      "@esbuild/sunos-x64": 0.18.20
      "@esbuild/win32-arm64": 0.18.20
      "@esbuild/win32-ia32": 0.18.20
      "@esbuild/win32-x64": 0.18.20

  esbuild@0.19.12:
    optionalDependencies:
      "@esbuild/aix-ppc64": 0.19.12
      "@esbuild/android-arm": 0.19.12
      "@esbuild/android-arm64": 0.19.12
      "@esbuild/android-x64": 0.19.12
      "@esbuild/darwin-arm64": 0.19.12
      "@esbuild/darwin-x64": 0.19.12
      "@esbuild/freebsd-arm64": 0.19.12
      "@esbuild/freebsd-x64": 0.19.12
      "@esbuild/linux-arm": 0.19.12
      "@esbuild/linux-arm64": 0.19.12
      "@esbuild/linux-ia32": 0.19.12
      "@esbuild/linux-loong64": 0.19.12
      "@esbuild/linux-mips64el": 0.19.12
      "@esbuild/linux-ppc64": 0.19.12
      "@esbuild/linux-riscv64": 0.19.12
      "@esbuild/linux-s390x": 0.19.12
      "@esbuild/linux-x64": 0.19.12
      "@esbuild/netbsd-x64": 0.19.12
      "@esbuild/openbsd-x64": 0.19.12
      "@esbuild/sunos-x64": 0.19.12
      "@esbuild/win32-arm64": 0.19.12
      "@esbuild/win32-ia32": 0.19.12
      "@esbuild/win32-x64": 0.19.12

  fast-xml-parser@4.4.1:
    dependencies:
      strnum: 1.1.2

  formidable@3.5.2:
    dependencies:
      dezalgo: 1.0.4
      hexoid: 2.0.0
      once: 1.4.0

  gel@2.0.0:
    dependencies:
      "@petamoriken/float16": 3.9.1
      debug: 4.4.0
      env-paths: 3.0.0
      semver: 7.7.1
      shell-quote: 1.8.2
      which: 4.0.0
    transitivePeerDependencies:
      - supports-color

  get-tsconfig@4.10.0:
    dependencies:
      resolve-pkg-maps: 1.0.0

  graceful-fs@4.2.11: {}

  hexoid@2.0.0: {}

  is-arrayish@0.3.2:
    optional: true

  isexe@3.1.1: {}

  jiti@2.4.2: {}

  jose@4.15.9: {}

  jose@6.0.8: {}

  lightningcss-darwin-arm64@1.29.1:
    optional: true

  lightningcss-darwin-x64@1.29.1:
    optional: true

  lightningcss-freebsd-x64@1.29.1:
    optional: true

  lightningcss-linux-arm-gnueabihf@1.29.1:
    optional: true

  lightningcss-linux-arm64-gnu@1.29.1:
    optional: true

  lightningcss-linux-arm64-musl@1.29.1:
    optional: true

  lightningcss-linux-x64-gnu@1.29.1:
    optional: true

  lightningcss-linux-x64-musl@1.29.1:
    optional: true

  lightningcss-win32-arm64-msvc@1.29.1:
    optional: true

  lightningcss-win32-x64-msvc@1.29.1:
    optional: true

  lightningcss@1.29.1:
    dependencies:
      detect-libc: 1.0.3
    optionalDependencies:
      lightningcss-darwin-arm64: 1.29.1
      lightningcss-darwin-x64: 1.29.1
      lightningcss-freebsd-x64: 1.29.1
      lightningcss-linux-arm-gnueabihf: 1.29.1
      lightningcss-linux-arm64-gnu: 1.29.1
      lightningcss-linux-arm64-musl: 1.29.1
      lightningcss-linux-x64-gnu: 1.29.1
      lightningcss-linux-x64-musl: 1.29.1
      lightningcss-win32-arm64-msvc: 1.29.1
      lightningcss-win32-x64-msvc: 1.29.1

  lru-cache@6.0.0:
    dependencies:
      yallist: 4.0.0

  ms@2.1.3: {}

  nanoid@3.3.8: {}

  next-auth@4.24.11(next@15.2.0(react-dom@19.0.0(react@19.0.0))(react@19.0.0))(react-dom@19.0.0(react@19.0.0))(react@19.0.0):
    dependencies:
      "@babel/runtime": 7.26.9
      "@panva/hkdf": 1.2.1
      cookie: 0.7.2
      jose: 4.15.9
      next: 15.2.0(react-dom@19.0.0(react@19.0.0))(react@19.0.0)
      oauth: 0.9.15
      openid-client: 5.7.1
      preact: 10.26.3
      preact-render-to-string: 5.2.6(preact@10.26.3)
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
      uuid: 8.3.2

  next@15.2.0(react-dom@19.0.0(react@19.0.0))(react@19.0.0):
    dependencies:
      "@next/env": 15.2.0
      "@swc/counter": 0.1.3
      "@swc/helpers": 0.5.15
      busboy: 1.6.0
      caniuse-lite: 1.0.30001701
      postcss: 8.4.31
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)
      styled-jsx: 5.1.6(react@19.0.0)
    optionalDependencies:
      "@next/swc-darwin-arm64": 15.2.0
      "@next/swc-darwin-x64": 15.2.0
      "@next/swc-linux-arm64-gnu": 15.2.0
      "@next/swc-linux-arm64-musl": 15.2.0
      "@next/swc-linux-x64-gnu": 15.2.0
      "@next/swc-linux-x64-musl": 15.2.0
      "@next/swc-win32-arm64-msvc": 15.2.0
      "@next/swc-win32-x64-msvc": 15.2.0
      sharp: 0.33.5
    transitivePeerDependencies:
      - "@babel/core"
      - babel-plugin-macros

  oauth4webapi@3.3.0: {}

  oauth@0.9.15: {}

  object-hash@2.2.0: {}

  oidc-token-hash@5.1.0: {}

  once@1.4.0:
    dependencies:
      wrappy: 1.0.2

  openid-client@5.7.1:
    dependencies:
      jose: 4.15.9
      lru-cache: 6.0.0
      object-hash: 2.2.0
      oidc-token-hash: 5.1.0

  picocolors@1.1.1: {}

  postcss@8.4.31:
    dependencies:
      nanoid: 3.3.8
      picocolors: 1.1.1
      source-map-js: 1.2.1

  postcss@8.5.3:
    dependencies:
      nanoid: 3.3.8
      picocolors: 1.1.1
      source-map-js: 1.2.1

  postgres@3.4.5: {}

  preact-render-to-string@5.2.6(preact@10.26.3):
    dependencies:
      preact: 10.26.3
      pretty-format: 3.8.0

  preact-render-to-string@6.5.11(preact@10.24.3):
    dependencies:
      preact: 10.24.3

  preact@10.24.3: {}

  preact@10.26.3: {}

  pretty-format@3.8.0: {}

  react-dom@19.0.0(react@19.0.0):
    dependencies:
      react: 19.0.0
      scheduler: 0.25.0

  react@19.0.0: {}

  regenerator-runtime@0.14.1: {}

  resolve-pkg-maps@1.0.0: {}

  scheduler@0.25.0: {}

  semver@7.7.1: {}

  server-only@0.0.1: {}

  sharp@0.33.5:
    dependencies:
      color: 4.2.3
      detect-libc: 2.0.3
      semver: 7.7.1
    optionalDependencies:
      "@img/sharp-darwin-arm64": 0.33.5
      "@img/sharp-darwin-x64": 0.33.5
      "@img/sharp-libvips-darwin-arm64": 1.0.4
      "@img/sharp-libvips-darwin-x64": 1.0.4
      "@img/sharp-libvips-linux-arm": 1.0.5
      "@img/sharp-libvips-linux-arm64": 1.0.4
      "@img/sharp-libvips-linux-s390x": 1.0.4
      "@img/sharp-libvips-linux-x64": 1.0.4
      "@img/sharp-libvips-linuxmusl-arm64": 1.0.4
      "@img/sharp-libvips-linuxmusl-x64": 1.0.4
      "@img/sharp-linux-arm": 0.33.5
      "@img/sharp-linux-arm64": 0.33.5
      "@img/sharp-linux-s390x": 0.33.5
      "@img/sharp-linux-x64": 0.33.5
      "@img/sharp-linuxmusl-arm64": 0.33.5
      "@img/sharp-linuxmusl-x64": 0.33.5
      "@img/sharp-wasm32": 0.33.5
      "@img/sharp-win32-ia32": 0.33.5
      "@img/sharp-win32-x64": 0.33.5
    optional: true

  shell-quote@1.8.2: {}

  simple-swizzle@0.2.2:
    dependencies:
      is-arrayish: 0.3.2
    optional: true

  sonner@2.0.1(react-dom@19.0.0(react@19.0.0))(react@19.0.0):
    dependencies:
      react: 19.0.0
      react-dom: 19.0.0(react@19.0.0)

  source-map-js@1.2.1: {}

  source-map-support@0.5.21:
    dependencies:
      buffer-from: 1.1.2
      source-map: 0.6.1

  source-map@0.6.1: {}

  streamsearch@1.1.0: {}

  strnum@1.1.2: {}

  styled-jsx@5.1.6(react@19.0.0):
    dependencies:
      client-only: 0.0.1
      react: 19.0.0

  tailwindcss@4.0.9: {}

  tapable@2.2.1: {}

  tslib@2.8.1: {}

  typescript@5.7.3: {}

  undici-types@6.19.8: {}

  uuid@8.3.2: {}

  uuid@9.0.1: {}

  which@4.0.0:
    dependencies:
      isexe: 3.1.1

  wrappy@1.0.2: {}

  yallist@4.0.0: {}


================================================
File: postcss.config.mjs
================================================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;


================================================
File: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": false,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


================================================
File: messages/de.json
================================================
{
  "HomePage": {
    "title": ""
  },
  "UploadPage": {
    "title": ""
  }
}


================================================
File: messages/en.json
================================================
{
  "Global": {
    "home": "Home",
    "search": "Search",
    "account": "Account"
  },
  "HomePage": {
    "title": "Home"
  },
  "UploadPage": {
    "title": ""
  },
  "AccountPage": {
    "title": "",
    "upload new song": "Upload Song"
  }
}


================================================
File: messages/es.json
================================================
{
  "HomePage": {
    "title": ""
  },
  "UploadPage": {
    "title": ""
  }
}


================================================
File: messages/fr.json
================================================
{
  "HomePage": {
    "title": ""
  },
  "UploadPage": {
    "title": ""
  }
}


================================================
File: messages/pt.json
================================================
{
  "HomePage": {
    "title": ""
  },
  "UploadPage": {
    "title": ""
  }
}


================================================
File: src/app/globals.css
================================================
@import "tailwindcss";
@theme {
  --font-sans: var(--font-inter-sans);
  --font-accent: var(--font-accent);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
}
:root {
  --background: #ffffff;
  --foreground: #000;
  --accent: #4e0000;
  --max-width: 32rem;
}
body {
  @apply bg-background text-foreground font-sans;
}
.button-black {
  @apply bg-black text-white px-4 py-2 rounded-lg border border-black hover:bg-black/80;
}
.button-white {
  @apply px-4 py-2 rounded-lg border border-black hover:bg-black/20;
}
.heading1 {
  @apply text-2xl font-bold uppercase;
}
.heading2 {
  @apply text-xl font-bold uppercase;
}
.heading3 {
  @apply text-lg font-bold uppercase;
}

button {
  @apply cursor-pointer;
}

.pill {
  @apply px-3 py-1 rounded-full text-xs border border-black/60 text-black/60 w-fit;
}

/* Music Player */

input[type="range"] {
  -webkit-appearance: none; /* Override default appearance */
  width: 100%; /* Full width */
  height: 20px; /* Adjust height as needed */
}


================================================
File: src/app/layout.tsx
================================================
export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return <>{children}</>;
}


================================================
File: src/app/manifest.tsx
================================================
import type { MetadataRoute } from "next";

export default function manifest(): MetadataRoute.Manifest {
  return {
    name: "Verzes",
    short_name: "Verzes",
    description: "A global community uniting music lovers and creators.",
    start_url: "/",
    display: "standalone",
    background_color: "#ffffff",
    theme_color: "#ffffff",
    lang: "en",
    orientation: "portrait",
    icons: [
      {
        src: "/icons/144.png",
        sizes: "144x144",
        type: "image/png",
        purpose: "any",
      },
      {
        src: "/icons/192.png",
        sizes: "192x192",
        type: "image/png",
        purpose: "any",
      },
      {
        src: "/icons/512.png",
        sizes: "512x512",
        type: "image/png",
        purpose: "any",
      },
    ],
  };
}


================================================
File: src/app/not-found.tsx
================================================
import { redirect } from "next/navigation";
export default function UnauthorizedPage() {
  return <div>Unauthorized</div>;
}


================================================
File: src/app/types.ts
================================================
interface Status {
  status: "success" | "error" | "neutral";
  message: string;
}


================================================
File: src/app/(frontend)/layout.tsx
================================================
import { Inter } from "next/font/google";
import localFont from "next/font/local";
import "@/app/globals.css";
import { Viewport } from "next";
const interSans = Inter({
  variable: "--font-inter-sans",
  subsets: ["latin"],
});
const accent = localFont({
  src: "../fonts/custom.woff",
  variable: "--font-accent",
  weight: "100 900",
});
export const viewport: Viewport = {
  themeColor: "#ffffff",
  userScalable: false,
  initialScale: 1,
  maximumScale: 1,
};
export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={`${interSans.variable} ${accent.variable} antialiased`}>{children}</body>
    </html>
  );
}


================================================
File: src/app/(frontend)/(app)/layout.tsx
================================================
"use client";
import { SessionProvider } from "next-auth/react";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { MusicPlayerProvider } from "@/hooks/music-player-provider";
import Header from "@/components/ui/header";
import { Toaster } from "sonner";
import Footer from "@/components/ui/footer";

export default function WebApp({ children }: { children: React.ReactNode }) {
  const queryClient = new QueryClient({
    defaultOptions: {
      queries: {
        staleTime: 60 * 60 * 1000,
      },
    },
  });
  return (
    <QueryClientProvider client={queryClient}>
      <SessionProvider>
        <MusicPlayerProvider>
          <Header />
          <main className="w-full max-w-[var(--max-width)] mx-auto flex flex-col items-center justify-center p-4 pb-84">
            {children}
          </main>
          <Footer />
          <Toaster position="top-center" />
        </MusicPlayerProvider>
      </SessionProvider>
    </QueryClientProvider>
  );
}


================================================
File: src/app/(frontend)/(app)/(foreign routes)/artists/[artistId]/artist-songs.tsx
================================================
"use client";

import { useArtistSongsByIdQuery } from "@/hooks/useQuery";
import SongList from "@/components/music/songs/song-list";
import { SongsLoadingSkeleton } from "@/components/music/songs/loading-skeleton";

export function ArtistSongs({ artistId }: { artistId: string }) {
  const {
    isLoading,
    data: songs,
    error,
    isError,
  } = useArtistSongsByIdQuery(artistId);
  if (isLoading) {
    return <SongsLoadingSkeleton length={12} />;
  }
  if (isError) {
    return <p>Error: {error?.message}</p>;
  }
  return <SongList songs={songs || []} />;
}


================================================
File: src/app/(frontend)/(app)/(foreign routes)/artists/[artistId]/page.tsx
================================================
"use client";
import { notFound } from "next/navigation";
import { ArtistSongs } from "./artist-songs";
import { UserIcon } from "@/components/ui/icons";
import { useParams } from "next/navigation";
import { useArtistByIdQuery } from "@/hooks/useQuery";
import { Loading } from "@/components/loading";
import { toast } from "sonner";
export default function ArtistPage() {
  const artistId = useParams().artistId;
  if (!artistId || typeof artistId !== "string") {
    return notFound();
  }
  const { isLoading, data: artist, isError } = useArtistByIdQuery(artistId);
  if (isLoading) {
    return <Loading />;
  }
  if (isError || !artist) {
    return notFound();
  }
  return (
    <div className="flex flex-col w-full gap-8">
      <div className="flex flex-row items-center justify-start gap-4  w-full ">
        {artist.image ? (
          <img
            src={artist.image}
            alt="user"
            width={100}
            height={100}
            className="rounded-full size-[100px] md:size-[125px] border border-black object-cover"
          />
        ) : (
          <UserIcon className="size-[100px] md:size-[125px] text-black" />
        )}
        <div className="flex flex-col  items-start justify-start text-left gap-2">
          <h1>{artist.name}</h1>
          <div className="flex flex-row items-center gap-2">
            <button
              className="button-black text-xs"
              onClick={() =>
                toast.success("Following artists feature coming soon")
              }
            >
              Follow
            </button>
          </div>
        </div>
      </div>
      <div className="flex flex-col gap-6">
        <div className="flex flex-col gap-4">
          <h2 className="text-xl font-semibold">Songs</h2>
          <p className="pill">Latest</p>
        </div>
        <ArtistSongs artistId={artist.id} />
      </div>
    </div>
  );
}


================================================
File: src/app/(frontend)/(app)/(foreign routes)/songs/page.tsx
================================================
"use client";
import SongList from "@/components/music/songs/song-list";
import { SongsLoadingSkeleton } from "@/components/music/songs/loading-skeleton";
import { useSongsQuery } from "@/hooks/useQuery";
export default function Home() {
  return (
    <div className="flex flex-col gap-8 w-full">
      <div className="flex flex-col gap-4 w-full">
        <h2 className="text-xl font-semibold">All Songs</h2>
        <AllSongs />
      </div>
    </div>
  );
}

function AllSongs() {
  const { isLoading, data: songs, error, isError } = useSongsQuery();
  if (isLoading || !songs) {
    return <SongsLoadingSkeleton length={12} />;
  }
  if (isError || !songs) {
    return <p>Error: {error?.message}</p>;
  }
  return <SongList songs={songs} />;
}


================================================
File: src/app/(frontend)/(app)/(foreign routes)/songs/liked/page.tsx
================================================
export default function LikedSongs() {
  return <div className="flex flex-col gap-4 w-full items-center justify-center">
    <h2 className="text-xl font-semibold">Liked Songs</h2>

    <p className="text-sm text-black/60">Coming soon...</p>
  </div>;
}

================================================
File: src/app/(frontend)/(app)/account/page.tsx
================================================
"use client";
import SignOut from "./signout";
import { redirect } from "next/navigation";
import { UserIcon } from "@/components/ui/icons";
import Link from "next/link";
import SongList from "@/components/music/songs/song-list";
import { useSession } from "next-auth/react";
import { SongsLoadingSkeleton } from "@/components/music/songs/loading-skeleton";
import { useArtistSongsByIdQuery } from "@/hooks/useQuery";
import { Loading } from "@/components/loading";
export default function Account() {
  const { data: session, status } = useSession();
  if (status === "unauthenticated") {
    redirect("/");
  }
  if (status === "loading") {
    return <Loading />;
  }
  if (!session) {
    return redirect("/");
  }
  return (
    <div className="flex flex-col w-full gap-8">
      <div className="flex flex-row items-center justify-start gap-4  w-full ">
        {session.user.image ? (
          <img
            src={session.user.image}
            alt="user"
            width={100}
            height={100}
            className="rounded-full size-[100px] md:size-[125px] border border-black object-cover"
          />
        ) : (
          <UserIcon className="size-[100px] md:size-[125px] text-black" />
        )}
        <div className="flex flex-col  items-start justify-start text-left gap-2">
          <h1>{session.user.name}</h1>
          <div className="flex flex-row items-center gap-2">
            <Link href="/account/upload-song" className="button-black text-xs">
              {"upload new song"}
            </Link>
            <SignOut />
          </div>
        </div>
      </div>

      <div className="flex flex-col gap-6">
        <div className="flex flex-col gap-4">
          <h2 className="text-xl font-semibold">Your Songs</h2>
          <p className="pill">Latest</p>
        </div>

        <YourSongs session={session} />
      </div>
    </div>
  );
}

function YourSongs({ session }: { session: { user: { id: string } } }) {
  const {
    isLoading,
    data: songs,
    error,
    isError,
  } = useArtistSongsByIdQuery(session.user.id);
  if (isLoading || !songs) {
    return <SongsLoadingSkeleton length={12} />;
  }
  if (isError || !songs) {
    return <p>Error: {error?.message}</p>;
  }
  return <SongList songs={songs} deleteable />;
}


================================================
File: src/app/(frontend)/(app)/account/signout.tsx
================================================
"use client";

import { signOut } from "next-auth/react";

export default function SignOut() {
  const handleSignOut = () => {
    signOut();
  };
  return (
    <button
      onClick={() => handleSignOut()}
      className="button-white text-xs cursor-pointer"
    >
      Sign Out
    </button>
  );
}


================================================
File: src/app/(frontend)/(app)/account/upload-song/music-player.tsx
================================================
"use client";
import { useMusicPlayer } from "@/hooks/music-player-provider";
import { PauseIcon, PlayIcon } from "@/components/ui/icons";
import Image from "next/image";
import { SongWithArtistName } from "@/server/db/schema";
export default function MusicPlayer({ song }: { song: SongWithArtistName }) {
  const { isPlaying, duration, currentTime, togglePlayPause, seekTo } =
    useMusicPlayer();
  if (!song) {
    return null;
  }
  return (
    <div className="relative text-white bg-black/80  backdrop-blur-sm  w-full overflow-hidden rounded-2xl">
      <div className=" mx-auto flex flex-row items-center p-3 pb-2 gap-2">
        <Image
          src={song.image || "/images/default-cover.svg"}
          alt="song cover art"
          width={100}
          height={100}
          className="rounded-xl size-16 aspect-square object-cover bg-white/10"
        />
        <div className="flex-1">
          <div className="text-lg">{song.title}</div>
          <div className="text-sm text-white/60">{song.artistName}</div>
        </div>
        <button onClick={togglePlayPause} className="">
          {isPlaying ? (
            <PauseIcon className="size-10" fill="white" />
          ) : (
            <PlayIcon className="size-10 pl-1" fill="white" />
          )}
        </button>
      </div>
      <ProgressBar
        currentTime={currentTime}
        duration={duration}
        seekTo={seekTo}
      />
    </div>
  );
}
function ProgressBar({
  currentTime,
  duration,
  seekTo,
}: {
  currentTime: number;
  duration: number;
  seekTo: (time: number) => void;
}) {
  return (
    <div className="relative  w-full px-4">
      <div className="w-full h-2 rounded-full bg-white/30 overflow-hidden">
        <input
          type="range"
          min="0"
          max={duration || 0}
          value={currentTime}
          onChange={(e) => seekTo(parseFloat(e.target.value))}
          className="w-full cursor-pointer"
          step="0.01"
        />
      </div>
    </div>
  );
}


================================================
File: src/app/(frontend)/(app)/account/upload-song/page.tsx
================================================
"use client";

import SongUploadComponent from "./_upload";
import { Loading } from "@/components/loading";
import { useSession } from "next-auth/react";
import { redirect } from "next/navigation";
export default function Home() {
  const { data: session, status } = useSession();
  if (status === "unauthenticated") {
    redirect("/");
  }
  if (status === "loading") {
    return <Loading />;
  }
  if (!session) {
    return redirect("/");
  }
  return (
    <div className="flex flex-col items-center justify-center max-w-3xl mx-auto w-full">
      <SongUploadComponent userId={session.user.id} />
    </div>
  );
}


================================================
File: src/app/(frontend)/(app)/account/upload-song/_upload/form.tsx
================================================
"use client";
import { useState, useRef, useEffect, useCallback } from "react";
import { handleFormSubmit } from "./handle-form-submit";
import { FFmpeg } from "@ffmpeg/ffmpeg";
import { loadFFmpeg } from "./ffmpeg/ffmpeg-core";
import MusicPlayer from "../music-player";
import { SongWithArtistName } from "@/server/db/schema";
//import { useInvalidateSongs, useInvalidateArtistSongs } from "@/hooks/useQuery";

export function SongUploadForm({ userId }: { userId: string }) {
  const [audioPreview, setAudioPreview] = useState<SongWithArtistName | null>(
    null
  );
  const [file, setFile] = useState<File | null>(null);
  const [coverArt, setCoverArt] = useState<File | null>(null);
  const [coverArtPreview, setCoverArtPreview] = useState<string | null>(null);
  const ffmpegRef = useRef(new FFmpeg());
  const [title, setTitle] = useState<string>("");
  const [status, setStatus] = useState<Status>({
    status: "neutral",
    message: "Upload your song",
  });
  const [isUploading, setIsUploading] = useState(false);
  const [FFmpegLoaded, setFFmpwgLoaded] = useState(false);
  //const { invalidateSongs } = useInvalidateSongs();
  //const { invalidateArtistSongs } = useInvalidateArtistSongs(userId);

  useEffect(() => {
    load();
  }, []);

  const load = useCallback(async () => {
    await loadFFmpeg(ffmpegRef.current, setFFmpwgLoaded);
  }, []);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const audioFile = e.target.files[0];
      setFile(audioFile);
      const reader = new FileReader();
      reader.onload = (e) => {
        if (e.target && e.target.result) {
          const tempSong = {
            id: "temp",
            fileUrl: e.target.result as string,
            title,
            artistName: "Your name", //TODO: get from user session
            artistId: "temp",
            image: coverArtPreview,
            categoryId: "temp",
            description: "temp",
            createdAt: new Date(),
          };
          setAudioPreview(tempSong);
        }
      };
      reader.readAsDataURL(audioFile);
    }
  };

  const handleCoverArtChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const selectedFile = e.target.files[0];
      setCoverArt(selectedFile);
      const reader = new FileReader();
      reader.onload = (e) => {
        if (e.target && e.target.result) {
          setCoverArtPreview(e.target.result as string);
        }
      };
      reader.readAsDataURL(selectedFile);
    }
  };

  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!file || !title || !coverArt) {
      setStatus({
        status: "error",
        message: "Something went wrong please try again",
      });
      return;
    }
    handleFormSubmit({
      file,
      coverArt,
      setStatus,
      setIsUploading,
      title,
      ffmpegRef,
   
    });
  };

  return (
    <form
      onSubmit={onSubmit}
      className="flex flex-col w-full items-center justify-center gap-4"
    >
      <input
        type="text"
        name="title"
        placeholder="Song title"
        value={title}
        onChange={(e) => setTitle(e.target.value)}
        required
        className="w-full px-3 py-2 rounded-lg border"
      />

      <label
        htmlFor="file"
        className="block bg-black px-3 py-2 rounded-lg border w-full text-white text-center cursor-pointer"
      >
        Select audio file
        <input
          type="file"
          onChange={handleFileChange}
          accept="audio/mpeg, audio/mp3, audio/wav, audio/ogg, .mp3, .wav, .ogg, .m4a"
          required
          className="hidden"
          id="file"
        />
      </label>

      <div className="w-full">
        <label
          htmlFor="coverArt"
          className="block bg-black px-3 py-2 rounded-lg border w-full text-white text-center cursor-pointer mb-2"
        >
          Select cover art
          <input
            type="file"
            onChange={handleCoverArtChange}
            accept="image/*"
            className="hidden"
            id="coverArt"
          />
        </label>
        {coverArtPreview && (
          <div className="mt-2 flex justify-center">
            <img
              src={coverArtPreview}
              alt="Cover art preview"
              className="w-full aspect-square object-cover rounded-xl my-4"
            />
          </div>
        )}
        {audioPreview && <MusicPlayer song={audioPreview} />}
      </div>

      <button
        type="submit"
        disabled={isUploading || !file || !FFmpegLoaded || !title || !coverArt}
        className={
          isUploading || !file || !FFmpegLoaded || !title || !coverArt
            ? "bg-black/10 text-black/50 w-full py-2 px-4 !cursor-not-allowed rounded-lg"
            : "w-full py-2 px-4 bg-[var(--foreground)] cursor-pointer hover:bg-[var(--foreground)]/80 text-white rounded-lg"
        }
      >
        {isUploading ? "Uploading..." : "Upload"}
      </button>

      {status && (
        <p className={statusColours[status.status]}>{status.message}</p>
      )}
    </form>
  );
}

const statusColours = {
  neutral: "bg-black/5 px-3 py-2 text-center rounded-lg",
  success: "bg-green-100 text-green-800 px-3 py-2 text-center rounded-lg",
  error: "bg-red-100 text-red-800 px-3 py-2 text-center rounded-lg",
};


================================================
File: src/app/(frontend)/(app)/account/upload-song/_upload/handle-form-submit.ts
================================================
import { getUploadUrl } from "@/server/storage/get-upload-url";
import { newSong, deleteSong } from "@/server/db/utils";
import { generateUniqueFileName } from "@/server/storage/helpers";
import type { FFmpeg } from "@ffmpeg/ffmpeg";
import { convertToMp3 } from "./ffmpeg/audio-converter";
export async function handleFormSubmit({
  file,
  setStatus,
  setIsUploading,
  title,
  ffmpegRef,
  coverArt,
}: // invalidateSongs,
// invalidateArtistSongs,
{
  file: File;
  setStatus: (status: Status) => void;
  setIsUploading: (uploading: boolean) => void;
  title: string;
  ffmpegRef: React.RefObject<FFmpeg>;
  coverArt: File;
  // invalidateSongs: () => void;
  // invalidateArtistSongs: () => void;
}) {
  if (!file) {
    setStatus({ status: "error", message: "Please select a file." });
    return;
  }
  setIsUploading(true);
  setStatus({
    status: "neutral",
    message: "Please wait while your song is uploading",
  });
  const fileType = file.type;

  const isAudioFile = fileType.startsWith("audio/");

  const isCoverArtFile = coverArt && coverArt.type.startsWith("image/");

  if (!isAudioFile) {
    return {
      status: { status: "error", message: "Invalid audio type" },
    };
  }

  if (!isCoverArtFile) {
    return {
      status: { status: "error", message: "Invalid cover art type" },
    };
  }

  let compressedAudioFile: File | null = null;

  setStatus({ status: "neutral", message: "Compressing audio..." });

  try {
    const { status, file: compressedAudio } = await convertToMp3({
      ffmpeg: ffmpegRef.current,
      file,
    });

    if (status.status === "error") {
      throw new Error("Failed to compress audio.");
    }
    if (!compressedAudio) {
      throw new Error("Failed to compress audio.");
    }

    compressedAudioFile = compressedAudio;
  } catch (error) {
    console.error("Error compressing audio:", error);
    setStatus({
      status: "error",
      message: "Failed to compress audio.",
    });
  }
  if (!compressedAudioFile) {
    setStatus({ status: "error", message: "Failed to compress audio." });
    setIsUploading(false);
    return;
  }

  setStatus({ status: "neutral", message: "Creating new song..." });

  let song;

  const uniqueId = generateUniqueFileName();

  const audioId = `${uniqueId}.${compressedAudioFile.name.split(".")[1]}`;
  const imageId = `${uniqueId}.${coverArt.name.split(".")[1]}`;

  try {
    const res = await newSong({
      fileUrl: audioId,
      title: title,
      imageUrl: imageId,
    });
    if (!res || res.status.status === "error")
      throw new Error("Failed to create new song");
    song = res.song;

    if (!song) throw new Error("Failed to create new song");
  } catch (error) {
    console.error("Error creating new song on database:", error);
    setStatus({ status: "error", message: "Failed to create new song." });
    setIsUploading(false);
    return;
  }

  if (!song) throw new Error("Failed to create new song");

  setStatus({ status: "neutral", message: "Publishing song..." });

  try {
    const { presignedUrl } = await getUploadUrl({
      fileType: compressedAudioFile.type,
      id: audioId,
      bucket: "music",
    });
    if (!presignedUrl) throw new Error("Failed to get upload URL");
    const uploadAudio = await fetch(presignedUrl, {
      method: "PUT",
      body: compressedAudioFile,
      headers: {
        "Content-Type": compressedAudioFile.type,
      },
    });
    if (!uploadAudio.ok) throw new Error("Upload failed");

    const { presignedUrl: presignedImageUrl } = await getUploadUrl({
      fileType: coverArt.type,
      id: imageId,
      bucket: "images",
    });
    if (!presignedImageUrl) throw new Error("Failed to get upload URL");

    const uploadImage = await fetch(presignedImageUrl, {
      method: "PUT",
      body: coverArt,
      headers: {
        "Content-Type": coverArt.type,
      },
    });
    if (!uploadImage.ok) throw new Error("Upload failed");
    // invalidateSongs();
    //invalidateArtistSongs();
    setStatus({ status: "success", message: "File has been uploaded." });
  } catch (error) {
    console.error("Upload to R2 error:", error);
    console.log("Deleting song record from database");
    const status = await deleteSong({ song });
    console.log("Song delete status:", status);
    setStatus({ status: "error", message: "Failed to upload file." });
  } finally {
    setIsUploading(false);
  }
}


================================================
File: src/app/(frontend)/(app)/account/upload-song/_upload/index.tsx
================================================
import NoSSRWrapper from "./no-ssr-wrapper";
import { SongUploadForm } from "./form";
import { Suspense } from "react";
import { Loading } from "@/components/loading";

export default function UploadAudioComponent({ userId }: { userId: string }) {
  return (
    <Suspense fallback={<Loading />}>
      <NoSSRWrapper>
        <SongUploadForm userId={userId} />
      </NoSSRWrapper>
    </Suspense>
  );
}


================================================
File: src/app/(frontend)/(app)/account/upload-song/_upload/no-ssr-wrapper.tsx
================================================
"use client";

import dynamic from "next/dynamic";
import React from "react";
const NoSSRWrapper = (props: any) => (
  <React.Fragment>{props.children}</React.Fragment>
);
export default dynamic(() => Promise.resolve(NoSSRWrapper), {
  ssr: false,
});


================================================
File: src/app/(frontend)/(app)/account/upload-song/_upload/ffmpeg/audio-compressor.ts
================================================
import type { FFmpeg } from "@ffmpeg/ffmpeg";

export async function compressAudio({
  ffmpeg,
  file,
}: {
  ffmpeg: FFmpeg;
  file: File;
}) {
  const outputFileName = "output.mp3";
  await ffmpeg.exec([
    "-i",
    file.name,
    "-vn",
    "-acodec",
    "libmp3lame",
    "-b:a",
    "96",
    outputFileName,
  ]);

  const data = (await ffmpeg.readFile(outputFileName)) as any;
  const compressedBlob = new Blob([data.buffer], { type: "audio/mpeg" });
  const compressedfile = new File([compressedBlob], "temp.mp3", {
    type: "audio/mpeg",
  });

  return {
    file: compressedfile,
    status: { status: "success", message: "File has been compressed." },
  };
}


================================================
File: src/app/(frontend)/(app)/account/upload-song/_upload/ffmpeg/audio-converter.ts
================================================
import { FFmpeg } from "@ffmpeg/ffmpeg";
import { fetchFile } from "@ffmpeg/util";

export async function convertToMp3({
  ffmpeg,
  file,
}: {
  ffmpeg: FFmpeg;
  file: File;
}) {
  const inputFileName = "input." + file.name.split(".").pop();
  const outputFileName = "output.mp3";

  await ffmpeg.writeFile(inputFileName, await fetchFile(file));

  await ffmpeg.exec([
    "-i",
    inputFileName,
    "-map_metadata",
    "-1",
    "-acodec",
    "libmp3lame",
    "-b:a",
    "96k",
    outputFileName,
  ]);

  const mp3Data = (await ffmpeg.readFile(outputFileName)) as any;
  const mp3Blob = new Blob([mp3Data.buffer], { type: "audio/mp3" });
  const mp3File = new File([mp3Blob], "converted.mp3", {
    type: "audio/mp3",
  });

  return {
    status: { status: "success", message: "File has been compressed." },
    file: mp3File,
  };
}


================================================
File: src/app/(frontend)/(app)/account/upload-song/_upload/ffmpeg/ffmpeg-core.ts
================================================
import { FFmpeg } from "@ffmpeg/ffmpeg";
import { toBlobURL } from "@ffmpeg/util";

export const loadFFmpeg = async (
  ffmpeg: FFmpeg,
  setFFmpegLoaded: React.Dispatch<React.SetStateAction<boolean>>
): Promise<void> => {
  const baseURL = "https://unpkg.com/@ffmpeg/core@0.12.10/dist/umd";

  try {
    await ffmpeg.load({
      coreURL: await toBlobURL(`${baseURL}/ffmpeg-core.js`, "text/javascript"),
      wasmURL: await toBlobURL(
        `${baseURL}/ffmpeg-core.wasm`,
        "application/wasm"
      ),
    });
    setFFmpegLoaded(true);
  } catch (error) {
    console.error("Failed to load FFmpeg:", error);
    alert("Failed to load FFmpeg. See console for details.");
  }
};


================================================
File: src/app/(frontend)/(app)/home/page.tsx
================================================
"use client";
import SongList from "@/components/music/songs/song-list";
import ArtistList from "@/components/music/artist-list";
import { SongsLoadingSkeleton } from "@/components/music/songs/loading-skeleton";
import { Loading } from "@/components/loading";
import Link from "next/link";
import { useArtistsQuery, useSongsQuery } from "@/hooks/useQuery";
import { useSession } from "next-auth/react";
import { redirect } from "next/navigation";
export default function Home() {
  const session = useSession();
  if (session.status === "unauthenticated") {
    return redirect("/");
  }
  if (session.status === "loading") {
    return <Loading />;
  }
  return (
    <div className="flex flex-col gap-8 w-full">
      <div className="flex flex-col gap-4 w-full">
        <h2 className="text-xl font-semibold">Latest Songs</h2>
        <LatestSongs />
        <Link
          href="/songs"
          className="w-fit px-4 py-2 text-xs rounded-full border border-black hover:bg-black hover:text-white mx-auto"
        >
          See More
        </Link>
      </div>
      <div className="flex flex-col gap-4 w-full">
        <h2 className="text-xl font-semibold">Explore Artists</h2>
        <ExploreArtists />
      </div>
    </div>
  );
}

function LatestSongs() {
  const { isLoading, data: songs, error, isError } = useSongsQuery();
  if (isLoading || !songs) {
    return <SongsLoadingSkeleton length={3} />;
  }
  if (isError || !songs) {
    return <p>Error: {error?.message}</p>;
  }
  return <SongList songs={songs.slice(0, 3)} />;
}

function ExploreArtists() {
  const { isLoading, data: artists, error, isError } = useArtistsQuery();
  if (isLoading || !artists) {
    return <Loading />;
  }
  if (isError || !artists) {
    return <p>Error: {error?.message}</p>;
  }
  return <ArtistList artists={artists} />;
}


================================================
File: src/app/(frontend)/(app)/search/page.tsx
================================================
export default function LikedSongs() {
  return (
    <div className="flex flex-col gap-4 w-full items-center justify-center">
      <h2 className="text-xl font-semibold">Search Songs and Artists</h2>

      <p className="text-sm text-black/60">Coming soon...</p>
    </div>
  );
}


================================================
File: src/app/(frontend)/(site)/header.tsx
================================================
import Link from "next/link";
export default function Header() {
  return (
    <header className="w-full max-w-5xl mx-auto flex flex-row items-center justify-between p-4 sticky top-0 z-10 bg-white">
      <Logo />
      <Link className="button-black text-xs" href="/signin">
        Sign Up
      </Link>
    </header>
  );
}

function Logo() {
  return (
    <Link
      href="/"
      className="text-2xl md:text-4xl  font-accent uppercase !tracking-[1rem] text-center pl-2 md:pl-0"
    >
      Verzes
    </Link>
  );
}


================================================
File: src/app/(frontend)/(site)/layout.tsx
================================================
import { Inter } from "next/font/google";
import "@/app/globals.css";
import { Viewport } from "next";
import Header from "./header";
const interSans = Inter({
  variable: "--font-inter-sans",
  subsets: ["latin"],
});
export const viewport: Viewport = {
  themeColor: "#ffffff",
  userScalable: false,
  initialScale: 1,
  maximumScale: 1,
};
export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <main>
      <Header />
      {children}
    </main>
  );
}


================================================
File: src/app/(frontend)/(site)/page.tsx
================================================
import { Component, Section, Row } from "@/components/ui/components";
import Link from "next/link";
import { redirect } from "next/navigation";
import { getServerAuthSession } from "@/server/auth";
export default async function Home() {
  const session = await getServerAuthSession();
  if (session) {
    return redirect("/home");
  }
  return (
    <>
      <Section full>
        <Row>
          <Component centered small padding>
            <h1 className="heading1">Some high end sh*t</h1>
            <p>Have fun window shopping mf, we know you can't afford sh*t</p>
            <div className="flex flex-row gap-4 items-center justify-center mt-2">
              <Link href="/signin" className="button-black">
                Sign up for free
              </Link>
              <Link href="/contact" className="button-white">
                See features
              </Link>
            </div>
          </Component>
        </Row>
      </Section>
    </>
  );
}


================================================
File: src/app/(frontend)/(site)/signin/googlebutton.tsx
================================================
"use client";
import { signIn } from "next-auth/react";
import { GoogleIcon } from "@/components/ui/icons";
export default function SignInPage() {
  return (
    <button
      onClick={() => signIn("google")}
      className="border border-foreground rounded-full bg-foreground text-background p-4 px-6 flex flex-row items-center  gap-3 hover:bg-black hover:text-white cursor-pointer"
    >
      <GoogleIcon className="size-8" />
      <p> Sign in with Google</p>
    </button>
  );
}


================================================
File: src/app/(frontend)/(site)/signin/page.tsx
================================================
import { redirect } from "next/navigation";
import GoogleButton from "./googlebutton";
import { getServerAuthSession } from "@/server/auth";
export default async function SignIn() {
  const session = await getServerAuthSession();
  if (session) {
    return redirect("/home");
  }
  return (
    <main className="flex flex-col items-center justify-center gap-6 my-24 p-8">
      <div className="flex flex-col items-center gap-2 text-center max-w-md">
        <h1 className="heading1">Sign Up</h1>
        <p>
          Sign in or create a new account and share your music, see what your
          friends are creating, discover new songs and more!
        </p>
      </div>
      <GoogleButton />
    </main>
  );
}


================================================
File: src/app/api/auth/[...nextauth]/route.ts
================================================
import NextAuth from "next-auth";
import { authOptions } from "@/server/auth";
const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };


================================================
File: src/app/api/stream-audio/route.ts
================================================
import { NextResponse } from "next/server";
import { GetObjectCommand } from "@aws-sdk/client-s3";
import { s3Client } from "@/server/storage";

export async function GET(req: Request) {
  const { searchParams } = new URL(req.url);
  const filename = searchParams.get("name");
  if (!filename) {
    return NextResponse.json(
      { error: "File name is required" },
      { status: 400 }
    );
  }
  try {
    const getObjectParams = {
      Bucket: process.env.CLOUDFLARE_R2_AUDIO_BUCKET_NAME,
      Key: filename,
    };
    const command = new GetObjectCommand(getObjectParams);
    const response = await s3Client.send(command);

    if (!response.Body) {
      return NextResponse.json(
        { error: "File content is empty or unavailable" },
        { status: 404 }
      );
    }
    const contentType = response.ContentType || "audio/mpeg";
    const contentLength = response.ContentLength || 0;
    const headers: Record<string, string> = {
      "Content-Type": contentType,
      "Content-Length": contentLength.toString(),
    };

    const webStream = new ReadableStream({
      start(controller) {
        const stream = response.Body as any;

        stream.on("data", (chunk: Buffer) => {
          controller.enqueue(chunk);
        });

        stream.on("end", () => {
          controller.close();
        });

        stream.on("error", (error: Error) => {
          console.error("Stream error:", error);
          try {
            controller.error(
              new Error("Streaming interrupted, please try again.")
            );
          } catch (e) {
            console.error("Error closing stream:", e);
          }
        });
      },
    });
    return new NextResponse(webStream, {
      status: 200,
      headers,
    });
  } catch (error) {
    console.error("Error streaming audio:", error);
    return NextResponse.json(
      { error: "Failed to stream audio." },
      { status: 500 }
    );
  }
}


================================================
File: src/app/api/track-listens/route.ts
================================================
import { insertSongListens } from "@/server/db/utils";
import { SongListen } from "@/server/db/schema";
import { NextRequest, NextResponse } from "next/server";

let listenBuffer: SongListen[] = [];
const BATCH_SIZE = 100;
const FLUSH_INTERVAL = 5000;

async function flushListenBuffer() {
  if (listenBuffer.length > 0) {
    try {
      await insertSongListens(listenBuffer);
      console.log(
        `Flushed ${listenBuffer.length} listens to the database using Drizzle.`
      );
      listenBuffer = [];
    } catch (error) {
      console.error("Error flushing listen buffer (Drizzle):", error);
    }
  }
}
setInterval(flushListenBuffer, FLUSH_INTERVAL);
export async function POST(req: NextRequest) {
  const { userId, songId } = await req.json();
  if (!userId || !songId) {
    return NextResponse.json({
      error: "Missing user id or song id",
      status: 400,
    });
  }
  const timestamp = new Date();
  listenBuffer.push({ id: crypto.randomUUID(), userId, songId, timestamp });
  if (listenBuffer.length >= BATCH_SIZE) {
    await flushListenBuffer();
  }
  return NextResponse.json({ message: "Listen tracked", status: 200 });
}


================================================
File: src/components/loading.tsx
================================================
import { SpinnerIcon } from "@/components/ui/icons";

export function Loading() {
  return (
    <div className="flex flex-col items-center justify-center p-8 my-12 w-full">
      <SpinnerIcon className="size-6 animate-spin" />
    </div>
  );
}


================================================
File: src/components/auth/session-provider.tsx
================================================
"use client";
import { SessionProvider } from "next-auth/react";
export default function AuthSessionProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  return <SessionProvider>{children}</SessionProvider>;
}


================================================
File: src/components/music/artist-list.tsx
================================================
import Link from "next/link";
import { User } from "@/server/db/schema";

export default function ArtistList({ artists }: { artists: User[] }) {
  return (
    <div className="grid grid-cols-2 gap-4 w-full">
      {artists.map((artist) => (
        <Link
          key={artist.id}
          className="flex flex-col items-center justify-center gap-4 w-full"
          href={`/artists/${artist.id}`}
        >
          <img
            src={artist.image || "/images/default-cover.svg"}
            alt="artist image"
            className="w-full rounded-full aspect-square object-cover shadow"
          />
          <p className="text-sm">{artist.name}</p>
        </Link>
      ))}
    </div>
  );
}


================================================
File: src/components/music/music-player-full.tsx
================================================
// TODO: create full screen music player that can be toggled on and off

"use client";
import { useMusicPlayer } from "@/hooks/music-player-provider";
import { PauseIcon, PlayIcon } from "@/components/ui/icons";
export default function MusicPlayer() {
  const {
    currentSong,
    isPlaying,
    duration,
    currentTime,
    togglePlayPause,
    seekTo,
    playNext,
    playPrevious,
  } = useMusicPlayer();
  if (!currentSong) {
    return null;
  }
  return (
    <div className="text-white bg-black/80 rounded-xl backdrop-blur-sm  w-full overflow-hidden">
      <div className=" mx-auto flex items-center p-4">
        <div className="flex-1">
          <div className="font-bold">{currentSong.title}</div>
          <div className="text-sm text-gray-400">
            {currentSong.artistId || "Unknown Artist"}
          </div>
        </div>
        <button onClick={togglePlayPause} className="">
          {isPlaying ? (
            <PauseIcon className="size-8" fill="white" />
          ) : (
            <PlayIcon className="size-8 pl-1" fill="white" />
          )}
        </button>
      </div>
      <ProgressBar
        currentTime={currentTime}
        duration={duration}
        seekTo={seekTo}
      />
    </div>
  );
}
function ProgressBar({
  currentTime,
  duration,
  seekTo,
}: {
  currentTime: number;
  duration: number;
  seekTo: (time: number) => void;
}) {
  return (
    <input
      type="range"
      min="0"
      max={duration || 0}
      value={currentTime}
      onChange={(e) => seekTo(parseFloat(e.target.value))}
      className="w-full border-none bg-transparent"
      step="0.01"
    />
  );
}

function formatTime(time: number) {
  const minutes = Math.floor(time / 60);
  const seconds = Math.floor(time % 60);
  return `${minutes}:${seconds < 10 ? "0" : ""}${seconds}`;
}


================================================
File: src/components/music/music-player.tsx
================================================
"use client";
import { useMusicPlayer } from "@/hooks/music-player-provider";
import { PauseIcon, PlayIcon } from "@/components/ui/icons";
import Image from "next/image";
export default function MusicPlayer() {
  const {
    currentSong,
    isPlaying,
    duration,
    currentTime,
    togglePlayPause,
    seekTo,
  } = useMusicPlayer();
  if (!currentSong) {
    return null;
  }
  return (
    <div className="relative text-white bg-black/80  backdrop-blur-sm  w-full overflow-hidden rounded-2xl">
      <div className=" mx-auto flex flex-row items-center p-3 pb-2 gap-2">
        <Image
          src={
            `https://pub-5d98fcdd24fb4227be900a856fef1126.r2.dev/${currentSong.image}` ||
            "/images/default-cover.svg"
          }
          alt="song cover art"
          width={100}
          height={100}
          className="rounded-xl size-16 aspect-square object-cover bg-white/10"
        />
        <div className="flex-1">
          <div className="text-lg">{currentSong.title}</div>
          <div className="text-sm text-white/60">{currentSong.artistName}</div>
        </div>
        <button onClick={togglePlayPause} className="">
          {isPlaying ? (
            <PauseIcon className="size-10" fill="white" />
          ) : (
            <PlayIcon className="size-10 pl-1" fill="white" />
          )}
        </button>
      </div>
      <ProgressBar
        currentTime={currentTime}
        duration={duration}
        seekTo={seekTo}
      />
    </div>
  );
}
function ProgressBar({
  currentTime,
  duration,
  seekTo,
}: {
  currentTime: number;
  duration: number;
  seekTo: (time: number) => void;
}) {
  return (
    <div className="relative  w-full px-4">
      <div className="w-full h-2 rounded-full bg-white/30 overflow-hidden">
        <input
          type="range"
          min="0"
          max={duration || 0}
          value={currentTime}
          onChange={(e) => seekTo(parseFloat(e.target.value))}
          className="w-full cursor-pointer"
          step="0.01"
        />
      </div>
    </div>
  );
}


================================================
File: src/components/music/songs/loading-skeleton.tsx
================================================
import Image from "next/image";
import { MoreIcon } from "@/components/ui/icons";
export function SongsLoadingSkeleton({ length }: { length: number }) {
  return (
    <div className="flex flex-col items-center justify-center w-full gap-4">
      {Array.from({ length: length }).map((_, i) => (
        <div
          className="flex flex-row w-full items-cenet justify-center"
          key={i}
        >
          <div className="flex flex-row items-center justify-start w-full gap-3 cursor-pointer">
            <div className="w-18 h-18  bg-black/15 rounded-xl animate-pulse" />
            <div className="flex flex-col gap-1">
              <p className="animate-pulse h-[24px] w-[80px] bg-black/15 rounded-lg" />
              <p className="text-xs text-black/60 animate-pulse h-[16px] w-[50px] bg-black/15 rounded-lg"></p>
            </div>
          </div>
          <button className="w-fit l ml-auto flex flex-col items-center justify-center">
            <MoreIcon className="size-10 my-auto animate-pulse" fill="black" />
          </button>
        </div>
      ))}
    </div>
  );
}


================================================
File: src/components/music/songs/song-list.tsx
================================================
import { SongWithArtistName } from "@/server/db/schema";
import SongComponent from "./song";
export default function SongList({
  songs,
  deleteable,
}: {
  songs: SongWithArtistName[];
  deleteable?: boolean;
}) {
  if (songs.length === 0) return <NoSongs />;
  return (
    <div className="flex flex-col items-center justify-center w-full gap-4">
      {songs.map((song) => (
        <SongComponent song={song} key={song.id} deleteable={deleteable} />
      ))}
    </div>
  );
}
function NoSongs() {
  return (
    <div className="flex flex-col items-center justify-center max-w-3xl mx-auto">
      <h1>No songs found</h1>
    </div>
  );
}




================================================
File: src/components/music/songs/song-modal.tsx
================================================
import { SongWithArtistName } from "@/server/db/schema";
import Image from "next/image";
import { deleteSong } from "@/server/db/utils";
import { toast } from "sonner";
import { getSession } from "next-auth/react";

export function Modal({
  song,
  deleteable,
  setModelOpen,
  addToQueue,
}: {
  song: SongWithArtistName;
  deleteable?: boolean;
  setModelOpen: (open: boolean) => void;
  addToQueue: (song: SongWithArtistName) => void;
}) {
  const handleDelete = async () => {
    const session = await getSession();
    if (!session?.user?.id || song.id !== session.user.id) {
      toast.error("Failed to delete song");
      return;
    }
    const success = await deleteSong({ song });
    if (!success) {
      toast.error("Failed to delete song");
      return;
    }
    toast.success("Song deleted successfully");
    setModelOpen(false);
  };
  return (
    <div className="flex flex-col justify-end gap-4 fixed bottom-0 left-0 w-full z-[999999999] h-[100svh] bg-black/20 backdrop-blur-md px-2">
      <div className="max-w-[var(--max-width)] mx-auto flex flex-col items-center justify-center w-full">
        <div className="flex flex-col gap-4 w-full items-center justify-start bg-white rounded-t-3xl p-6  pb-12 ">
          <div className="flex flex-row gap-3 w-full items-center pb-4">
            <Image
              src={
                `https://pub-5d98fcdd24fb4227be900a856fef1126.r2.dev/${song.image}` ||
                "/images/default-cover.svg"
              }
              alt="song cover art"
              width={100}
              height={100}
              priority
              className="rounded-xl  size-24 aspect-square object-cover bg-white/10"
            />
            <div>
              <p className="text-xl">{song.title}</p>
              <p className="text-sm">{song.artistName}</p>
            </div>
          </div>

          <button
            className="w-full button-black"
            onClick={() => addToQueue(song)}
          >
            Add to queue
          </button>
          <button className="w-full button-black"
          onClick={()=> toast.success("Liking songs feature coming soon")}
          >Like song</button>
          {deleteable && (
            <button onClick={handleDelete} className="button-black w-full">
              Delete Song
            </button>
          )}
          <button
            onClick={() => setModelOpen(false)}
            className="button-black w-full"
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
}



================================================
File: src/components/music/songs/song.tsx
================================================
"use client";

import { SongWithArtistName } from "@/server/db/schema";
import { useMusicPlayer } from "@/hooks/music-player-provider";
import { useEffect, useState } from "react";
import { MoreIcon } from "@/components/ui/icons";
import Image from "next/image";
import { Modal } from "./song-modal";

export default function SongComponent({
  song,
  deleteable,
}: {
  song: SongWithArtistName;
  deleteable?: boolean;
}) {
  const [modelOpen, setModelOpen] = useState(false);
  const { addToQueue, playSong, resetQueue } = useMusicPlayer();

  useEffect(() => {
    const themeColorMeta = document.querySelector('meta[name="theme-color"]');

    if (themeColorMeta) {
      if (modelOpen) {
        themeColorMeta.setAttribute("content", "#cccccc"); // 10% black
      } else {
        themeColorMeta.setAttribute("content", "#ffffff"); // white
      }
    }
  }, [modelOpen]);

  const handleClick = () => {
    resetQueue();
    playSong(song);
  };
  return (
    <div className="flex flex-row w-full items-cenet justify-center">
      <div
        className="flex flex-row items-center justify-start w-full gap-3 cursor-pointer"
        onClick={handleClick}
      >
        <Image
          src={
            `https://pub-5d98fcdd24fb4227be900a856fef1126.r2.dev/${song.image}` ||
            "/images/default-cover.svg"
          }
          width={100}
          height={100}
          priority
          alt="song cover art"
          className="w-18 h-18 object-cover aspect-square bg-black/5 rounded-xl"
        />
        <div className="flex flex-col gap-0 w-full">
          <p>{song.title}</p>
          <p className="text-xs text-black/60">{song.artistName}</p>
        </div>
      </div>
      <button
        onClick={() => (modelOpen ? setModelOpen(false) : setModelOpen(true))}
        className="w-fit l ml-auto flex flex-col items-center justify-center"
      >
        <MoreIcon className="size-10 my-auto" fill="black" />
      </button>
      {modelOpen && (
        <Modal
          song={song}
          deleteable={deleteable}
          setModelOpen={setModelOpen}
          addToQueue={addToQueue}
        />
      )}
    </div>
  );
}



================================================
File: src/components/ui/footer.tsx
================================================
"use client";
import Link from "next/link";
import MusicPlayer from "@/components/music/music-player";

import { usePathname } from "next/navigation";
import { SearchIcon, HomeIcon, AccountIcon } from "./icons";
const navItems = [
  {
    name: "home",
    href: "/home",
    icon: <HomeIcon className="size-6" fill="currentColor" />,
  },
  {
    name: "search",
    href: "/search",
    icon: <SearchIcon className="size-6" fill="currentColor" />,
  },
  {
    name: "account",
    href: "/account",
    icon: <AccountIcon className="size-6" fill="currentColor" />,
  },
];
export default function Footer() {
  const pathname = usePathname();
  return (
    <footer className="w-full fixed bottom-0 left-0 p-2 pb-0">
      <div className="w-full max-w-[var(--max-width)] mx-auto flex flex-col items-center justify-center gap-0">
        <MusicPlayer />
        <nav className="flex flex-row items-center justify-between gap-4 w-full p-4 bg-white pb-10">
          {navItems.map((item) => (
            <Link
              key={item.name}
              className={
                pathname === (item.href.length > 1 ? item.href : "")
                  ? navItemStyles.active
                  : navItemStyles.inactive
              }
              href={item.href}
            >
              {item.icon}
              {item.name}
            </Link>
          ))}
        </nav>
      </div>
    </footer>
  );
}
const navItemStyles = {
  active:
    "text-sm text-black hover:text-black flex flex-col gap-1 items-center justify-center",
  inactive:
    "text-sm text-black/60 hover:text-black flex flex-col gap-1 items-center justify-center",
};


================================================
File: src/components/ui/header.tsx
================================================
import Link from "next/link";
import { HeartEmptyIcon } from "./icons";

export default function Header() {
  return (
    <header className="w-full max-w-[var(--max-width)] mx-auto flex flex-row items-center justify-between p-4 sticky top-0 z-10 bg-white">
      <Link
        href="/home"
        className="text-2xl font-accent uppercase !tracking-[1rem] text-center pl-2 md:pl-0"
      >
        Verzes
      </Link>

      <Link className=" " href="/songs/liked">
        <HeartEmptyIcon className="size-6 " stroke="black" />
      </Link>
    </header>
  );
}


================================================
File: src/components/ui/icons.tsx
================================================
export function GoogleIcon(props: any) {
  return (
    <svg
      width="800px"
      height="800px"
      viewBox="-3 0 262 262"
      xmlns="http://www.w3.org/2000/svg"
      preserveAspectRatio="xMidYMid"
      {...props}
    >
      <path
        d="M255.878 133.451c0-10.734-.871-18.567-2.756-26.69H130.55v48.448h71.947c-1.45 12.04-9.283 30.172-26.69 42.356l-.244 1.622 38.755 30.023 2.685.268c24.659-22.774 38.875-56.282 38.875-96.027"
        fill="#4285F4"
      />
      <path
        d="M130.55 261.1c35.248 0 64.839-11.605 86.453-31.622l-41.196-31.913c-11.024 7.688-25.82 13.055-45.257 13.055-34.523 0-63.824-22.773-74.269-54.25l-1.531.13-40.298 31.187-.527 1.465C35.393 231.798 79.49 261.1 130.55 261.1"
        fill="#34A853"
      />
      <path
        d="M56.281 156.37c-2.756-8.123-4.351-16.827-4.351-25.82 0-8.994 1.595-17.697 4.206-25.82l-.073-1.73L15.26 71.312l-1.335.635C5.077 89.644 0 109.517 0 130.55s5.077 40.905 13.925 58.602l42.356-32.782"
        fill="#FBBC05"
      />
      <path
        d="M130.55 50.479c24.514 0 41.05 10.589 50.479 19.438l36.844-35.974C195.245 12.91 165.798 0 130.55 0 79.49 0 35.393 29.301 13.925 71.947l42.211 32.783c10.59-31.477 39.891-54.251 74.414-54.251"
        fill="#EB4335"
      />
    </svg>
  );
}

export const UserIcon = (props: any) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      strokeWidth={1.5}
      {...props}
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        d="M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
      />
    </svg>
  );
};

export const PlayIcon = (props: any) => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" {...props}>
      <path
        fillRule="evenodd"
        d="M4.5 5.653c0-1.427 1.529-2.33 2.779-1.643l11.54 6.347c1.295.712 1.295 2.573 0 3.286L7.28 19.99c-1.25.687-2.779-.217-2.779-1.643V5.653Z"
        clipRule="evenodd"
      />
    </svg>
  );
};

export const PauseIcon = (props: any) => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" {...props}>
      <path
        fillRule="evenodd"
        d="M6.75 5.25a.75.75 0 0 1 .75-.75H9a.75.75 0 0 1 .75.75v13.5a.75.75 0 0 1-.75.75H7.5a.75.75 0 0 1-.75-.75V5.25Zm7.5 0A.75.75 0 0 1 15 4.5h1.5a.75.75 0 0 1 .75.75v13.5a.75.75 0 0 1-.75.75H15a.75.75 0 0 1-.75-.75V5.25Z"
        clipRule="evenodd"
      />
    </svg>
  );
};

export const SearchIcon = (props: any) => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" {...props}>
      <path
        fillRule="evenodd"
        d="M10.5 3.75a6.75 6.75 0 1 0 0 13.5 6.75 6.75 0 0 0 0-13.5ZM2.25 10.5a8.25 8.25 0 1 1 14.59 5.28l4.69 4.69a.75.75 0 1 1-1.06 1.06l-4.69-4.69A8.25 8.25 0 0 1 2.25 10.5Z"
        clipRule="evenodd"
      />
    </svg>
  );
};

export const HomeIcon = (props: any) => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" {...props}>
      <path d="M11.47 3.841a.75.75 0 0 1 1.06 0l8.69 8.69a.75.75 0 1 0 1.06-1.061l-8.689-8.69a2.25 2.25 0 0 0-3.182 0l-8.69 8.69a.75.75 0 1 0 1.061 1.06l8.69-8.689Z" />
      <path d="m12 5.432 8.159 8.159c.03.03.06.058.091.086v6.198c0 1.035-.84 1.875-1.875 1.875H15a.75.75 0 0 1-.75-.75v-4.5a.75.75 0 0 0-.75-.75h-3a.75.75 0 0 0-.75.75V21a.75.75 0 0 1-.75.75H5.625a1.875 1.875 0 0 1-1.875-1.875v-6.198a2.29 2.29 0 0 0 .091-.086L12 5.432Z" />
    </svg>
  );
};

export const AccountIcon = (props: any) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="currentColor"
      className="size-6"
    >
      <path
        fillRule="evenodd"
        d="M18.685 19.097A9.723 9.723 0 0 0 21.75 12c0-5.385-4.365-9.75-9.75-9.75S2.25 6.615 2.25 12a9.723 9.723 0 0 0 3.065 7.097A9.716 9.716 0 0 0 12 21.75a9.716 9.716 0 0 0 6.685-2.653Zm-12.54-1.285A7.486 7.486 0 0 1 12 15a7.486 7.486 0 0 1 5.855 2.812A8.224 8.224 0 0 1 12 20.25a8.224 8.224 0 0 1-5.855-2.438ZM15.75 9a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z"
        clipRule="evenodd"
      />
    </svg>
  );
};

export const MoreIcon = (props: any) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      strokeWidth={2.5}
      {...props}
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        d="M6.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM12.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM18.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z"
      />
    </svg>
  );
};

export const HeartEmptyIcon = (props: any) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      strokeWidth={1.5}
      {...props}
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z"
      />
    </svg>
  );
};

export const HeartIcon = (props: any) => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" {...props}>
      <path d="m11.645 20.91-.007-.003-.022-.012a15.247 15.247 0 0 1-.383-.218 25.18 25.18 0 0 1-4.244-3.17C4.688 15.36 2.25 12.174 2.25 8.25 2.25 5.322 4.714 3 7.688 3A5.5 5.5 0 0 1 12 5.052 5.5 5.5 0 0 1 16.313 3c2.973 0 5.437 2.322 5.437 5.25 0 3.925-2.438 7.111-4.739 9.256a25.175 25.175 0 0 1-4.244 3.17 15.247 15.247 0 0 1-.383.219l-.022.012-.007.004-.003.001a.752.752 0 0 1-.704 0l-.003-.001Z" />
    </svg>
  );
};
export function SpinnerIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="2em"
      height="2em"
      viewBox="0 0 24 24"
    >
      <path
        fill="currentColor"
        d="M2,12A11.2,11.2,0,0,1,13,1.05C12.67,1,12.34,1,12,1a11,11,0,0,0,0,22c.34,0,.67,0,1-.05C6,23,2,17.74,2,12Z"
      ></path>
    </svg>
  );
}


================================================
File: src/components/ui/components/block.tsx
================================================
export default function Row({
  children,
  centered,
}: Readonly<{ children: React.ReactNode; centered?: boolean }>) {
  return (
    <div
      className={`flex  flex-col my-4 gap-4 ${
        centered ? "items-center justify-center text-center" : ""
      }`}
    >
      {children}
    </div>
  );
}


================================================
File: src/components/ui/components/button.tsx
================================================
import Link from "next/link";

export default function Button({
  children,
  href,
  type,
}: Readonly<{ children: React.ReactNode; href: string; type: number }>) {
  const buttonType = [
    "border bg-foreground border-foreground text-background hover:bg-background hover:text-foreground ",
    "border bg-background border-background text-foreground hover:bg-transparent hover:text-background",
    "border bg-accent bg-accent border border-accent text-background hover:bg-transparent hover:text-accent",
    "border-b border-b-2 bg-transparent border-foreground text-foreground hover:bg-foreground hover:text-background",
    "border-b border-b-2 bg-transparent border-background text-background hover:bg-background hover:text-foreground",
  ];

  return (
    <Link
      href={href}
      className={`${
        buttonType[type - 1]
      } w-fit p-2 px-4 text-xs md:text-sm rounded   flex flex-col items-center justify-center `}
    >
      {children}
    </Link>
  );
}


================================================
File: src/components/ui/components/component.tsx
================================================
export default function Component({
  children,
  centered,
  row,
  justifybetween,
  small,
  padding,
}: Readonly<{
  children: React.ReactNode;
  centered?: boolean;
  row?: boolean;
  justifybetween?: boolean;
  small?: boolean;
  padding?: boolean;
}>) {
  return (
    <div
      className={`flex flex-col gap-0 md:gap-2   w-full     ${
        centered ? "items-center text-center justify-center mx-auto" : ""
      } ${small ? "max-w-2xl " : null}
      ${padding ? "my-12 md:my-16" : null}
      `}
    >
      {children}
    </div>
  );
}


================================================
File: src/components/ui/components/image.tsx
================================================
import Image from "next/image";
export default function ImageCard({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  return (
    <Image
      src="/images/placeholder.png"
      alt="placeholder"
      width={400}
      height={400}
      className="rounded-lg"
    />
  );
}


================================================
File: src/components/ui/components/index.ts
================================================
import Section from "./section";
import Button from "./button";
import Row from "./row";
import Block from "./block";
import Link from "./link";
import Component from "./component";
export { Section, Button, Row, Link, Block, Component };


================================================
File: src/components/ui/components/link.tsx
================================================
import Link from "next/link";

export default function LinkButtom({
  children,
  href,
  type,
}: Readonly<{ children: React.ReactNode; href: string; type: number }>) {
  const buttonType = ["text-foreground ", "text-accent  "];

  return (
    <Link
      href={href}
      className={`${buttonType[type - 1]}   font-custom hover:underline font-bold`}
    >
      {children} {"->"}
    </Link>
  );
}


================================================
File: src/components/ui/components/row.tsx
================================================
export default function Row({
  children,
  centered,
  row,
  justifybetween,
  small,
  padding,
}: Readonly<{
  children: React.ReactNode;
  centered?: boolean;
  row?: boolean;
  justifybetween?: boolean;
  small?: boolean;
  padding?: boolean;
}>) {
  return (
    <div
      className={`flex flex-col relative gap-4 md:gap-8 w-full mx-auto overflow-hidden lg:overflow-visible  ${
        centered ? "items-center text-center justify-center" : ""
      } ${small ? "max-w-xl p-8 md:p-8" : "max-w-[var(--sitewidth)] p-4 md:p-6"}
      ${padding ? "my-12" : ""}
      `}
    >
      {children}
    </div>
  );
}


================================================
File: src/components/ui/components/section.tsx
================================================
export default function Section({
  children,
  full,
}: Readonly<{ children: React.ReactNode; full?: boolean }>) {
  return (
    <div className={`flex flex-col gap-8  w-full  relative  p-0 ${full ? "mb-4 md:mb-8 " : "md:my-4"}`}>
      {children}
    </div>
  );
}


================================================
File: src/hooks/music-player-provider.tsx
================================================
"use client";

import {
  createContext,
  useContext,
  useState,
  useRef,
  useEffect,
} from "react";
import type { SongWithArtistName } from "@/server/db/schema";
import { toast } from "sonner";

interface MusicPlayerContextType {
  currentSong: SongWithArtistName | null;
  isPlaying: boolean;
  duration: number;
  currentTime: number;
  playSong: (song: SongWithArtistName) => void;
  pauseSong: () => void;
  resumeSong: () => void;
  seekTo: (time: number) => void;
  togglePlayPause: () => void;
  queue: SongWithArtistName[];
  addToQueue: (song: SongWithArtistName) => void;
  playNext: () => void;
  playPrevious: () => void;
  resetQueue: () => void;
}

const MusicPlayerContext = createContext<MusicPlayerContextType | undefined>(
  undefined
);

export const MusicPlayerProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [currentSong, setCurrentSong] = useState<SongWithArtistName | null>(
    null
  );
  const [isPlaying, setIsPlaying] = useState(false);
  const [duration, setDuration] = useState(0);
  const [currentTime, setCurrentTime] = useState(0);
  const [queue, setQueue] = useState<SongWithArtistName[]>([]);
  const audioRef = useRef<HTMLAudioElement | null>(null);

  useEffect(() => {
    audioRef.current = new Audio();

    audioRef.current.addEventListener("timeupdate", handleTimeUpdate);
    audioRef.current.addEventListener("loadedmetadata", handleLoadedMetadata);
    audioRef.current.addEventListener("ended", handleSongEnd);

    return () => {
      if (audioRef.current) {
        audioRef.current.removeEventListener("timeupdate", handleTimeUpdate);
        audioRef.current.removeEventListener(
          "loadedmetadata",
          handleLoadedMetadata
        );
        audioRef.current.removeEventListener("ended", handleSongEnd);
        audioRef.current.pause();
      }
    };
  }, []);

  useEffect(() => {
    if (!audioRef.current || !currentSong) return;
    const audioUrl = `https://pub-b40ea9d340a94cb1a3dfa14413f628b2.r2.dev/${currentSong.fileUrl}`;

    audioRef.current.src = audioUrl;
    audioRef.current.load();

    if (isPlaying) {
      audioRef.current.play().catch((error) => {
        console.error("Playback failed:", error);
        setIsPlaying(false);
      });
    }
  }, [currentSong]);

  const handleTimeUpdate = () => {
    if (audioRef.current) {
      setCurrentTime(audioRef.current.currentTime);
    }
  };

  const handleLoadedMetadata = () => {
    if (audioRef.current) {
      setDuration(audioRef.current.duration);
    }
  };

  const handleSongEnd = () => {
    console.log("Song ended");
    setIsPlaying(false);
    playNext();
  };

  const playSong = (song: SongWithArtistName) => {
    setCurrentSong(song);
    setIsPlaying(true);
  };

  const pauseSong = () => {
    if (audioRef.current) {
      audioRef.current.pause();
      setIsPlaying(false);
    }
  };

  const resumeSong = () => {
    if (audioRef.current && currentSong) {
      audioRef.current.play().catch((error) => {
        console.error("Resuming playback failed:", error);
      });
      setIsPlaying(true);
    }
  };

  const togglePlayPause = () => {
    if (isPlaying) {
      pauseSong();
    } else {
      resumeSong();
    }
  };

  const seekTo = (time: number) => {
    if (audioRef.current) {
      audioRef.current.currentTime = time;
      setCurrentTime(time);
    }
  };

  const addToQueue = (song: SongWithArtistName) => {
    setQueue((prevQueue) => [...prevQueue, song]);
    toast.success("Song added to queue");
  };

  const resetQueue = () => {
    setQueue([]);
  };

  useEffect(() => {
    console.log("queue", queue);
  }, [queue]);

  const playNext = () => {
    console.log(queue);
    if (queue.length > 0) {
      const nextSong = queue[0];
      console.log("next song", nextSong);
      setQueue((prevQueue) => prevQueue.slice(1));
      playSong(nextSong);
    }
  };

  const playPrevious = () => {
    if (audioRef.current) {
      audioRef.current.currentTime = 0;
    }
  };
  const contextValue: MusicPlayerContextType = {
    currentSong,
    isPlaying,
    duration,
    currentTime,
    playSong,
    pauseSong,
    resumeSong,
    seekTo,
    togglePlayPause,
    queue,
    addToQueue,
    playNext,
    playPrevious,
    resetQueue,
  };

  return (
    <MusicPlayerContext.Provider value={contextValue}>
      {children}
    </MusicPlayerContext.Provider>
  );
};
export const useMusicPlayer = () => {
  const context = useContext(MusicPlayerContext);
  if (context === undefined) {
    throw new Error("useMusicPlayer must be used within a MusicPlayerProvider");
  }
  return context;
};


================================================
File: src/hooks/useQuery.ts
================================================
import { useQuery, useQueryClient } from "@tanstack/react-query";
import {
  getSongs,
  getArtists,
  getSongsByArtist,
  getArtist,
} from "@/server/db/utils";

export const useSongsQuery = () => {
  return useQuery({
    queryKey: ["songs"],
    queryFn: getSongs,
    staleTime: 60 * 60 * 1000,
    retry: 2,
  });
};

export const useArtistsQuery = () => {
  return useQuery({
    queryKey: ["artists"],
    queryFn: getArtists,

    staleTime: 60 * 60 * 1000,
    retry: 2,
  });
};

export const useArtistSongsByIdQuery = (artistId: string) => {
  return useQuery({
    queryKey: ["artist", artistId, "songs"],
    queryFn: () => getSongsByArtist(artistId),
    staleTime: 60 * 60 * 1000,
    retry: 2,
    enabled: !!artistId,
  });
};

export const useArtistByIdQuery = (artistId: string) => {
  return useQuery({
    queryKey: ["artist", artistId],
    queryFn: () => getArtist(artistId),
    staleTime: 60 * 60 * 1000,
    retry: 2,
    enabled: !!artistId,
  });
};
/*
export const useInvalidateSongs = () => {
  const queryClient = useQueryClient();

  const invalidateSongs = () => {
    queryClient.invalidateQueries({ queryKey: ["songs"] });
  };

  return { invalidateSongs };
};

export const useInvalideArtists = () => {
  const queryClient = useQueryClient();

  const invalidateArtists = () => {
    queryClient.invalidateQueries({ queryKey: ["artists"] });
  };

  return { invalidateArtists };
};

export const useInvalidateArtistSongs = (artistId: string) => {
  const queryClient = useQueryClient();

  const invalidateArtistSongs = () => {
    queryClient.invalidateQueries({ queryKey: ["artist", artistId, "songs"] });
  };

  return { invalidateArtistSongs };
};
*/

================================================
File: src/server/auth.ts
================================================
import { DrizzleAdapter } from "@auth/drizzle-adapter";
import {
  getServerSession,
  type DefaultSession,
  type NextAuthOptions,
} from "next-auth";
import { type Adapter } from "next-auth/adapters";
import GoogleProvider from "next-auth/providers/google";
import { db } from "@/server/db";
import {
  accounts,
  sessions,
  users,
  verificationTokens,
} from "@/server/db/schema";
declare module "next-auth" {
  interface Session extends DefaultSession {
    user: {
      id: string;
    } & DefaultSession["user"];
  }
}
export const authOptions: NextAuthOptions = {
  callbacks: {
    session: ({ session, user }) => ({
      ...session,
      user: {
        ...session.user,
        id: user.id,
      },
    }),
  },
  pages: {
    signIn: "/signin",
  },

  adapter: DrizzleAdapter(db, {
    usersTable: users,
    accountsTable: accounts,
    sessionsTable: sessions,
    verificationTokensTable: verificationTokens,
  }) as Adapter,
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
  ],
};

export const getServerAuthSession = () => getServerSession(authOptions);


================================================
File: src/server/db/index.ts
================================================
import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";
import * as schema from "./schema";
const client = postgres(process.env.DATABASE_URL!);
export const db = drizzle(client, { schema });


================================================
File: src/server/db/schema.ts
================================================
import { relations, sql } from "drizzle-orm";
import {
  index,
  integer,
  pgTableCreator,
  primaryKey,
  text,
  timestamp,
  varchar,
} from "drizzle-orm/pg-core";
import { type AdapterAccount } from "next-auth/adapters";

export const createTable = pgTableCreator((name) => `music_${name}`); // Custom prefix create table helper function

// Core tables
export const users = createTable(
  "user",
  {
    id: varchar("id", { length: 255 })
      .notNull()
      .primaryKey()
      .$defaultFn(() => crypto.randomUUID()),
    name: varchar("name", { length: 255 }).notNull(),
    bio: text("bio"),
    email: varchar("email", { length: 255 }).notNull().unique(),
    emailVerified: timestamp("email_verified", {
      mode: "date",
      withTimezone: true,
    }),
    image: text("image"),
    instagram: varchar("instagram", { length: 255 }),
    createdAt: timestamp("created_at", { mode: "date", withTimezone: true })
      .default(sql`CURRENT_TIMESTAMP`)
      .notNull(),
  },
  (table) => ({
    nameIdx: index("user_name_idx").on(table.name),
    idIdx: index("user_id_idx").on(table.id),
  })
);

export const categories = createTable("category", {
  id: varchar("id", { length: 255 })
    .notNull()
    .primaryKey()
    .$defaultFn(() => crypto.randomUUID()),
  name: varchar("name", { length: 255 }).notNull().unique(),
  slug: varchar("slug", { length: 255 }).notNull().unique(),
  description: text("description"),
  createdAt: timestamp("created_at", { mode: "date", withTimezone: true })
    .default(sql`CURRENT_TIMESTAMP`)
    .notNull(),
});

export const songs = createTable(
  "song",
  {
    id: varchar("id", { length: 255 })
      .notNull()
      .primaryKey()
      .$defaultFn(() => crypto.randomUUID()),
    artistId: varchar("artist_id", { length: 255 })
      .notNull()
      .references(() => users.id, { onDelete: "cascade" }),
    fileUrl: text("file_url").notNull().unique(),
    title: varchar("title", { length: 255 }).notNull(),
    categoryId: varchar("category_id", { length: 255 }).references(
      () => categories.id,
      { onDelete: "restrict" }
    ),
    description: text("description"),
    image: text("image"),
    createdAt: timestamp("created_at", { mode: "date", withTimezone: true })
      .default(sql`CURRENT_TIMESTAMP`)
      .notNull(),
  },
  (table) => ({
    categoryIdx: index("song_category_idx").on(table.categoryId),
    artistIdx: index("song_artist_idx").on(table.artistId),
    createdAtIdx: index("song_created_at_idx").on(table.createdAt),
    titleIdx: index("song_title_idx").on(table.title),
  })
);

export const songListens = createTable(
  "song_listen",
  {
    id: varchar("id", { length: 255 })
      .notNull()
      .primaryKey()
      .$defaultFn(() => crypto.randomUUID()),
    songId: varchar("song_id", { length: 255 })
      .notNull()
      .references(() => songs.id, { onDelete: "cascade" }),
    userId: varchar("user_id", { length: 255 })
      .notNull()
      .references(() => users.id, { onDelete: "cascade" }),
    timestamp: timestamp("timestamp", { mode: "date", withTimezone: true })
      .default(sql`CURRENT_TIMESTAMP`)
      .notNull(),
  },
  (table) => ({
    songIdx: index("song_listen_song_idx").on(table.songId),
    userIdx: index("song_listen_user_idx").on(table.userId),
    timestampIdx: index("song_listen_timestamp_idx").on(table.timestamp),
  })
);

export const likes = createTable(
  "like",
  {
    songId: varchar("song_id", { length: 255 })
      .notNull()
      .references(() => songs.id, { onDelete: "cascade" }),
    userId: varchar("user_id", { length: 255 })
      .notNull()
      .references(() => users.id, { onDelete: "cascade" }),
    createdAt: timestamp("created_at", { mode: "date", withTimezone: true })
      .default(sql`CURRENT_TIMESTAMP`)
      .notNull(),
  },
  (table) => ({
    pk: primaryKey({ columns: [table.songId, table.userId] }),
  })
);

export const tags = createTable("tag", {
  id: varchar("id", { length: 255 })
    .notNull()
    .primaryKey()
    .$defaultFn(() => crypto.randomUUID()),
  name: varchar("name", { length: 255 }).notNull().unique(),
  slug: varchar("slug", { length: 255 }).notNull().unique(),
});

export const songTags = createTable(
  "song_tag",
  {
    songId: varchar("song_id", { length: 255 })
      .notNull()
      .references(() => songs.id, { onDelete: "cascade" }),
    tagId: varchar("tag_id", { length: 255 })
      .notNull()
      .references(() => tags.id, { onDelete: "cascade" }),
  },
  (table) => ({
    pk: primaryKey({ columns: [table.songId, table.tagId] }),
  })
);

export const follows = createTable(
  "user_follow",
  {
    followerId: varchar("follower_id", { length: 255 })
      .notNull()
      .references(() => users.id, { onDelete: "cascade" }),
    followingId: varchar("following_id", { length: 255 })
      .notNull()
      .references(() => users.id, { onDelete: "cascade" }),
    createdAt: timestamp("created_at", { mode: "date", withTimezone: true })
      .default(sql`CURRENT_TIMESTAMP`)
      .notNull(),
  },
  (table) => ({
    pk: primaryKey({ columns: [table.followerId, table.followingId] }),
  })
);

// NextAuth tables
export const accounts = createTable(
  "account",
  {
    userId: varchar("user_id", { length: 255 })
      .notNull()
      .references(() => users.id),
    type: varchar("type", { length: 255 })
      .$type<AdapterAccount["type"]>()
      .notNull(),
    provider: varchar("provider", { length: 255 }).notNull(),
    providerAccountId: varchar("provider_account_id", {
      length: 255,
    }).notNull(),
    refresh_token: text("refresh_token"),
    access_token: text("access_token"),
    expires_at: integer("expires_at"),
    token_type: varchar("token_type", { length: 255 }),
    scope: varchar("scope", { length: 255 }),
    id_token: text("id_token"),
    session_state: varchar("session_state", { length: 255 }),
  },
  (account) => ({
    compoundKey: primaryKey({
      columns: [account.provider, account.providerAccountId],
    }),
    userIdIdx: index("account_user_id_idx").on(account.userId),
  })
);

export const sessions = createTable(
  "session",
  {
    sessionToken: varchar("session_token", { length: 255 })
      .notNull()
      .primaryKey(),
    userId: varchar("user_id", { length: 255 })
      .notNull()
      .references(() => users.id),
    expires: timestamp("expires", {
      mode: "date",
      withTimezone: true,
    }).notNull(),
  },
  (session) => ({
    userIdIdx: index("session_user_id_idx").on(session.userId),
  })
);

export const verificationTokens = createTable(
  "verification_token",
  {
    identifier: varchar("identifier", { length: 255 }).notNull(),
    token: varchar("token", { length: 255 }).notNull(),
    expires: timestamp("expires", {
      mode: "date",
      withTimezone: true,
    }).notNull(),
  },
  (vt) => ({
    compoundKey: primaryKey({ columns: [vt.identifier, vt.token] }),
  })
);

// Relations
export const usersRelations = relations(users, ({ many }) => ({
  songs: many(songs),
  likes: many(likes),
  accounts: many(accounts),
  following: many(follows),
  followers: many(follows),
  songListens: many(songListens),
}));

export const followsRelations = relations(follows, ({ one }) => ({
  follower: one(users, {
    fields: [follows.followerId],
    references: [users.id],
  }),
  following: one(users, {
    fields: [follows.followingId],
    references: [users.id],
  }),
}));

export const likesRelations = relations(likes, ({ one }) => ({
  song: one(songs, { fields: [likes.songId], references: [songs.id] }),
  user: one(users, { fields: [likes.userId], references: [users.id] }),
}));

export const categoriesRelations = relations(categories, ({ many }) => ({
  songs: many(songs),
}));

export const songsRelations = relations(songs, ({ one, many }) => ({
  artist: one(users, { fields: [songs.artistId], references: [users.id] }),
  category: one(categories, {
    fields: [songs.categoryId],
    references: [categories.id],
  }),
  likes: many(likes),
  tags: many(songTags),
  songListens: many(songListens),
}));

export const songListensRelations = relations(songListens, ({ one }) => ({
  song: one(songs, { fields: [songListens.songId], references: [songs.id] }),
  user: one(users, { fields: [songListens.userId], references: [users.id] }),
}));

export const songTagsRelations = relations(songTags, ({ one }) => ({
  song: one(songs, { fields: [songTags.songId], references: [songs.id] }),
  tag: one(tags, { fields: [songTags.tagId], references: [tags.id] }),
}));

export const accountsRelations = relations(accounts, ({ one }) => ({
  user: one(users, { fields: [accounts.userId], references: [users.id] }),
}));

export const sessionsRelations = relations(sessions, ({ one }) => ({
  user: one(users, { fields: [sessions.userId], references: [users.id] }),
}));

import { InferSelectModel } from "drizzle-orm";

export type User = InferSelectModel<typeof users>;
export type Category = InferSelectModel<typeof categories>;
export type Song = InferSelectModel<typeof songs>;
export type SongListen = InferSelectModel<typeof songListens>;
export type Like = InferSelectModel<typeof likes>;
export type Tag = InferSelectModel<typeof tags>;
export type SongTag = InferSelectModel<typeof songTags>;
export type Follow = InferSelectModel<typeof follows>;
export type Account = InferSelectModel<typeof accounts>;
export type Session = InferSelectModel<typeof sessions>;
export type VerificationToken = InferSelectModel<typeof verificationTokens>;
export type SongWithArtistName = Song & { artistName: string };


================================================
File: src/server/db/utils.ts
================================================
"use server";
import { db } from "@/server/db";
import { songs, likes, users, songListens } from "@/server/db/schema";
import { desc, sql, eq, and } from "drizzle-orm";
import type { Song, SongWithArtistName, SongListen } from "@/server/db/schema";
import { getServerAuthSession } from "@/server/auth";
import { unauthorized } from "next/navigation";

async function AuthenticatedQuery(): Promise<boolean> {
  const session = await getServerAuthSession();
  if (!session) return unauthorized();
  return true;
}
export async function getArtists() {
  if (!(await AuthenticatedQuery())) return [];
  try {
    const res = await db.select().from(users).limit(60);
    if (!res) throw new Error("No artists found");
    return res;
  } catch (error) {
    console.error("Error fetching artists:", error);
    return [];
  }
}
export async function getArtist(artistId: string) {
  if (!(await AuthenticatedQuery())) return null;
  try {
    const res = await db
      .select()
      .from(users)
      .where(eq(users.id, artistId))
      .limit(1);
    if (!res) throw new Error("No artist found");
    return res[0];
  } catch (error) {
    console.error("Error fetching artist:", error);
    return null;
  }
}
export async function getSongsByArtist(
  artistId: string
): Promise<SongWithArtistName[]> {
  if (!(await AuthenticatedQuery())) return [];
  try {
    const res = await db
      .select()
      .from(songs)
      .innerJoin(users, eq(songs.artistId, users.id))
      .where(eq(songs.artistId, artistId))
      .orderBy(desc(songs.createdAt))
      .limit(100);

    return res.map((object) => ({
      ...object.song,
      artistName: object.user.name,
    }));
  } catch (error) {
    console.error("Error getting songs by artist:", error);
    return [];
  }
}
export async function getSongByFileUrl(fileUrl: string): Promise<Song | null> {
  if (!(await AuthenticatedQuery())) return null;
  try {
    const res = await db
      .select()
      .from(songs)
      .where(eq(songs.fileUrl, fileUrl))
      .limit(1);
    if (!res) throw new Error("No songs found");
    return res[0];
  } catch (error) {
    console.error("Error getting song by fileUrl:", error);
    return null;
  }
}
export async function getSongs(): Promise<SongWithArtistName[]> {
  if (!(await AuthenticatedQuery())) return [];
  try {
    const res = await db
      .select()
      .from(songs)
      .innerJoin(users, eq(songs.artistId, users.id))
      .orderBy(desc(songs.createdAt))
      .limit(60);
    if (!res) throw new Error("No songs found");
    return res.map((object) => ({
      ...object.song,
      artistName: object.user.name,
    }));
  } catch (error) {
    console.error("Error fetching songs:", error);
    return [];
  }
}

export async function getLikedSongs(
  userId: string
): Promise<SongWithArtistName[]> {
  if (!(await AuthenticatedQuery())) return [];
  try {
    const res = await db
      .select()
      .from(songs)
      .where(eq(likes.userId, userId))
      .innerJoin(users, eq(songs.artistId, users.id))
      .orderBy(desc(songs.createdAt))
      .limit(60);
    if (!res) throw new Error("No songs found");
    return res.map((object) => ({
      ...object.song,
      artistName: object.user.name,
    }));
  } catch (error) {
    console.error("Error fetching liked songs:", error);
    return [];
  }
}
interface LikeStatus {
  likesCount: number;
  isLiked: boolean;
}
export async function getLikeStatus({
  userId,
  songId,
}: {
  userId?: string;
  songId: string;
}): Promise<LikeStatus> {
  try {
    const result = await db
      .select({
        likesCount: sql<number>`COUNT(${likes.userId})`.as("likes_count"),
        isLiked: userId
          ? sql<boolean>`BOOL_OR(${likes.userId} = ${userId})`.as("is_liked")
          : sql<boolean>`false`.as("is_liked"),
      })
      .from(likes)
      .where(eq(likes.songId, songId));
    const { likesCount, isLiked } = result[0] || {
      likesCount: 0,
      isLiked: false,
    };
    return { likesCount, isLiked };
  } catch (error) {
    console.error("Error fetching like status:", error);
    return { likesCount: 0, isLiked: false };
  }
}

export async function likeSong(userId: string, songId: string) {
  if (typeof userId !== "string" || typeof songId !== "string") {
    console.error("Invalid userId or songId");
    return {
      success: false,
      delta: 0,
      message: "Invalid userId or songId.",
    };
  }
  try {
    const existingLike = await db
      .select()
      .from(likes)
      .where(and(eq(likes.userId, userId), eq(likes.songId, songId)));
    if (existingLike.length > 0) {
      await db
        .delete(likes)
        .where(and(eq(likes.userId, userId), eq(likes.songId, songId)));
      return {
        success: true,
        delta: -1,
        message: "Like removed successfully.",
      };
    }
    await db.insert(likes).values({
      userId,
      songId,
    });
    return { success: true, delta: 1, message: "song liked successfully." };
  } catch (error) {
    console.error("Error toggling like:", error);
    return {
      success: false,
      delta: 0,
      message: "Something went wrong.",
    };
  }
}

export async function getSong(songId: string): Promise<Song | null> {
  try {
    const data = await db
      .select()
      .from(songs)
      .where(eq(songs.id, songId))
      .limit(1);
    if (!data) return null;
    return data[0];
  } catch (error) {
    console.error("Error fetching song:", error);
    return null;
  }
}

export async function newSong({
  fileUrl,
  title,
  imageUrl,
}: {
  fileUrl: string;
  title: string;
  imageUrl?: string;
}) {
  const session = await getServerAuthSession();
  if (!session)
    return {
      song: null,
      status: { status: "error", message: "Please sign in to upload a song." },
    };
  try {
    const song = await db
      .insert(songs)
      .values({
        fileUrl,
        title,
        artistId: session.user.id,
        image: imageUrl || null,
      })
      .returning();
    return {
      song: song[0],
      status: { status: "success", message: "Song created successfully." },
    };
  } catch (error) {
    console.error("Error creating new song:", error);
    return {
      song: null,
      status: { status: "error", message: "Failed to create new song." },
    };
  }
}

export async function deleteSong({
  song,
}: {
  song: SongWithArtistName | Song;
}): Promise<Status> {
  const session = await getServerAuthSession();
  if (!session)
    return { status: "error", message: "Please sign in to delete your song." };
  if (song.artistId !== session.user.id)
    return {
      status: "error",
      message: "You are not authorized to delete this song.",
    };
  try {
    await db.delete(songs).where(eq(songs.fileUrl, song.fileUrl));
    return { status: "success", message: "Song deleted successfully." };
  } catch (error) {
    console.error("Error deleting song:", error);
    return { status: "error", message: "Failed to delete song." };
  }
}

export async function insertSongListens(listens: SongListen[]) {
  await db.insert(songListens).values(listens);
}


================================================
File: src/server/storage/get-upload-url.ts
================================================
"use server";
import { getSignedUrl } from "@aws-sdk/s3-request-presigner";
import { PutObjectCommand } from "@aws-sdk/client-s3";
import { s3Client } from "@/server/storage";
import { getServerAuthSession } from "@/server/auth";

export async function getUploadUrl({
  fileType,
  id,
  bucket,
}: {
  fileType: string;
  id: string;
  bucket: string;
}): Promise<{ presignedUrl: string | null; status: Status }> {
  const session = await getServerAuthSession();
  if (!session || !session.user) {
    return {
      presignedUrl: null,
      status: { status: "error", message: "Please sign in to upload a song." },
    };
  }

  try {
    const command = new PutObjectCommand({
      Bucket: bucket,
      Key: id,
      ContentType: fileType,
    });
    const presignedUrl = await getSignedUrl(s3Client, command, {
      expiresIn: 300, // 5 minutes
    });
    return {
      presignedUrl: presignedUrl,
      status: { status: "success", message: "File has been uploaded." },
    };
  } catch (error) {
    console.error("Error generating presigned URL:", error);
    return {
      presignedUrl: null,
      status: { status: "error", message: "Failed to generate upload URL" },
    };
  }
}


================================================
File: src/server/storage/helpers.ts
================================================
import crypto from "crypto";

export function generateUniqueFileName() {
  return crypto.randomBytes(16).toString("hex");
;
}


================================================
File: src/server/storage/index.ts
================================================
import { S3Client } from "@aws-sdk/client-s3";

export const s3Client = new S3Client({
  region: "auto",
  endpoint: process.env.CLOUDFLARE_R2_ENDPOINT,
  credentials: {
    accessKeyId: process.env.CLOUDFLARE_R2_ACCESS_KEY_ID!,
    secretAccessKey: process.env.CLOUDFLARE_R2_SECRET_ACCESS_KEY!,
  },
});


================================================
File: src/server/storage/utils.ts
================================================
"use server";
import { DeleteObjectCommand } from "@aws-sdk/client-s3";
import { s3Client } from "@/server/storage";
import { deleteSong } from "../db/utils";
import { SongWithArtistName } from "@/server/db/schema";
import { getServerAuthSession } from "@/server/auth";

export async function deleteSongFromStorage(song: SongWithArtistName) {
  const session = await getServerAuthSession();

  if (!session)
    return { status: "error", message: "Please sign in to delete your song." };
  if (song.artistId !== session.user.id)
    return {
      status: "error",
      message: "You are not authorized to delete this song.",
    };
  try {
    const command = new DeleteObjectCommand({
      Bucket: process.env.CLOUDFLARE_R2_BUCKET_NAME,
      Key: song.fileUrl,
    });
    await s3Client.send(command);
    console.log("Deleted song from storage");
  } catch (error) {
    console.error("Error deleting song from storage:", error);
    throw new Error("Failed to delete song from storage");
  }
  deleteSong({ song });
  return true;
}


